package testing;// Generated from ..\Cypher.g4 by ANTLR 4.5.3

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;

import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CypherParser extends Parser {
    public static final int
            T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
            T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
            T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
            T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
            T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
            T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
            T__45 = 46, T__46 = 47, T__47 = 48, T__48 = 49, T__49 = 50, T__50 = 51, StringLiteral = 52,
            EscapedChar = 53, HexInteger = 54, DecimalInteger = 55, OctalInteger = 56, HexString = 57,
            DigitString = 58, OctalString = 59, HexDigit = 60, Digit = 61, OctDigit = 62, UNION = 63,
            ALL = 64, OPTIONAL = 65, MATCH = 66, UNWIND = 67, AS = 68, MERGE = 69, ON = 70, CREATE = 71,
            SET = 72, DELETE = 73, DETACH = 74, REMOVE = 75, WITH = 76, DISTINCT = 77, RETURN = 78,
            ORDER = 79, BY = 80, L_SKIP = 81, LIMIT = 82, DESCENDING = 83, DESC = 84, ASCENDING = 85,
            ASC = 86, WHERE = 87, OR = 88, XOR = 89, AND = 90, NOT = 91, IN = 92, STARTS = 93, ENDS = 94,
            CONTAINS = 95, IS = 96, NULL = 97, TRUE = 98, FALSE = 99, COUNT = 100, FILTER = 101,
            EXTRACT = 102, ANY = 103, NONE = 104, SINGLE = 105, UnescapedSymbolicName = 106,
            IdentifierStart = 107, IdentifierPart = 108, EscapedSymbolicName = 109, WHITESPACE = 110,
            Comment = 111, L_0X = 112;
    public static final int
            RULE_cypher = 0, RULE_statement = 1, RULE_query = 2, RULE_regularQuery = 3,
            RULE_singleQuery = 4, RULE_union = 5, RULE_clause = 6, RULE_match = 7,
            RULE_unwind = 8, RULE_merge = 9, RULE_mergeAction = 10, RULE_create = 11,
            RULE_set = 12, RULE_setItem = 13, RULE_delete = 14, RULE_remove = 15,
            RULE_removeItem = 16, RULE_with = 17, RULE_returnMain = 18, RULE_returnBody = 19,
            RULE_returnItems = 20, RULE_returnItem = 21, RULE_order = 22, RULE_skip = 23,
            RULE_limit = 24, RULE_sortItem = 25, RULE_where = 26, RULE_pattern = 27,
            RULE_patternPart = 28, RULE_anonymousPatternPart = 29, RULE_patternElement = 30,
            RULE_nodePattern = 31, RULE_patternElementChain = 32, RULE_relationshipPattern = 33,
            RULE_relationshipDetail = 34, RULE_properties = 35, RULE_relationshipTypes = 36,
            RULE_nodeLabels = 37, RULE_nodeLabel = 38, RULE_rangeLiteral = 39, RULE_labelName = 40,
            RULE_relTypeName = 41, RULE_expression = 42, RULE_expression12 = 43, RULE_expression11 = 44,
            RULE_expression10 = 45, RULE_expression9 = 46, RULE_expression8 = 47,
            RULE_expression7 = 48, RULE_expression6 = 49, RULE_expression5 = 50, RULE_expression4 = 51,
            RULE_expression3 = 52, RULE_expression2 = 53, RULE_atom = 54, RULE_partialComparisonExpression = 55,
            RULE_parenthesizedExpression = 56, RULE_relationshipsPattern = 57, RULE_filterExpression = 58,
            RULE_idInColl = 59, RULE_functionInvocation = 60, RULE_functionName = 61,
            RULE_listComprehension = 62, RULE_propertyLookup = 63, RULE_variable = 64,
            RULE_numberLiteral = 65, RULE_mapLiteral = 66, RULE_parameter = 67, RULE_propertyExpression = 68,
            RULE_propertyKeyName = 69, RULE_integerLiteral = 70, RULE_doubleLiteral = 71,
            RULE_exponentDecimalReal = 72, RULE_regularDecimalReal = 73, RULE_symbolicName = 74,
            RULE_sp = 75, RULE_leftArrowHead = 76, RULE_rightArrowHead = 77, RULE_dash = 78,
            RULE_digit = 79;
    public static final String[] ruleNames = {
            "cypher", "statement", "query", "regularQuery", "singleQuery", "union",
            "clause", "match", "unwind", "merge", "mergeAction", "create", "set",
            "setItem", "delete", "remove", "removeItem", "with", "returnMain", "returnBody",
            "returnItems", "returnItem", "order", "skip", "limit", "sortItem", "where",
            "pattern", "patternPart", "anonymousPatternPart", "patternElement", "nodePattern",
            "patternElementChain", "relationshipPattern", "relationshipDetail", "properties",
            "relationshipTypes", "nodeLabels", "nodeLabel", "rangeLiteral", "labelName",
            "relTypeName", "expression", "expression12", "expression11", "expression10",
            "expression9", "expression8", "expression7", "expression6", "expression5",
            "expression4", "expression3", "expression2", "atom", "partialComparisonExpression",
            "parenthesizedExpression", "relationshipsPattern", "filterExpression",
            "idInColl", "functionInvocation", "functionName", "listComprehension",
            "propertyLookup", "variable", "numberLiteral", "mapLiteral", "parameter",
            "propertyExpression", "propertyKeyName", "integerLiteral", "doubleLiteral",
            "exponentDecimalReal", "regularDecimalReal", "symbolicName", "sp", "leftArrowHead",
            "rightArrowHead", "dash", "digit"
    };
    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    public static final String _serializedATN =
            "\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3r\u04fd\4\2\t\2\4" +
                    "\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t" +
                    "\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22" +
                    "\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31" +
                    "\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!" +
                    "\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4" +
                    ",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t" +
                    "\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=" +
                    "\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I" +
                    "\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\3\2\5\2\u00a4\n\2" +
                    "\3\2\3\2\5\2\u00a8\n\2\3\2\5\2\u00ab\n\2\3\2\5\2\u00ae\n\2\3\3\3\3\3\4" +
                    "\3\4\3\5\3\5\5\5\u00b6\n\5\3\5\7\5\u00b9\n\5\f\5\16\5\u00bc\13\5\3\6\3" +
                    "\6\5\6\u00c0\n\6\3\6\7\6\u00c3\n\6\f\6\16\6\u00c6\13\6\3\7\3\7\3\7\3\7" +
                    "\5\7\u00cc\n\7\3\7\3\7\3\7\3\7\5\7\u00d2\n\7\3\7\5\7\u00d5\n\7\3\b\3\b" +
                    "\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00e0\n\b\3\t\3\t\5\t\u00e4\n\t\3\t\3" +
                    "\t\5\t\u00e8\n\t\3\t\3\t\5\t\u00ec\n\t\3\t\5\t\u00ef\n\t\3\n\3\n\5\n\u00f3" +
                    "\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\5\13\u00fd\n\13\3\13\3\13\3\13" +
                    "\3\13\7\13\u0103\n\13\f\13\16\13\u0106\13\13\3\f\3\f\3\f\3\f\3\f\3\f\3" +
                    "\f\3\f\3\f\3\f\3\f\3\f\5\f\u0114\n\f\3\r\3\r\5\r\u0118\n\r\3\r\3\r\3\16" +
                    "\3\16\3\16\3\16\7\16\u0120\n\16\f\16\16\16\u0123\13\16\3\17\3\17\3\17" +
                    "\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0134" +
                    "\n\17\3\20\3\20\3\20\3\20\7\20\u013a\n\20\f\20\16\20\u013d\13\20\3\20" +
                    "\3\20\3\20\3\20\3\20\3\20\7\20\u0145\n\20\f\20\16\20\u0148\13\20\5\20" +
                    "\u014a\n\20\3\21\3\21\3\21\3\21\5\21\u0150\n\21\3\21\3\21\5\21\u0154\n" +
                    "\21\3\21\7\21\u0157\n\21\f\21\16\21\u015a\13\21\3\22\3\22\3\22\3\22\5" +
                    "\22\u0160\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u0167\n\23\3\23\3\23\3\23" +
                    "\3\23\5\23\u016d\n\23\5\23\u016f\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3" +
                    "\24\3\24\3\24\3\24\5\24\u017b\n\24\3\25\3\25\3\25\3\25\5\25\u0181\n\25" +
                    "\3\25\3\25\3\25\5\25\u0186\n\25\3\25\3\25\3\25\5\25\u018b\n\25\3\26\3" +
                    "\26\5\26\u018f\n\26\3\26\3\26\5\26\u0193\n\26\3\26\7\26\u0196\n\26\f\26" +
                    "\16\26\u0199\13\26\3\26\3\26\5\26\u019d\n\26\3\26\3\26\5\26\u01a1\n\26" +
                    "\3\26\7\26\u01a4\n\26\f\26\16\26\u01a7\13\26\5\26\u01a9\n\26\3\27\3\27" +
                    "\3\27\3\27\3\27\3\27\3\27\5\27\u01b2\n\27\3\30\3\30\3\30\3\30\3\30\3\30" +
                    "\3\30\5\30\u01bb\n\30\3\30\7\30\u01be\n\30\f\30\16\30\u01c1\13\30\3\31" +
                    "\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\5\33\u01d0" +
                    "\n\33\5\33\u01d2\n\33\3\34\3\34\3\34\3\34\3\35\3\35\5\35\u01da\n\35\3" +
                    "\35\3\35\5\35\u01de\n\35\3\35\7\35\u01e1\n\35\f\35\16\35\u01e4\13\35\3" +
                    "\36\3\36\5\36\u01e8\n\36\3\36\3\36\5\36\u01ec\n\36\3\36\3\36\3\36\5\36" +
                    "\u01f1\n\36\3\37\3\37\3 \3 \5 \u01f7\n \3 \7 \u01fa\n \f \16 \u01fd\13" +
                    " \3 \3 \3 \3 \5 \u0203\n \3!\3!\5!\u0207\n!\3!\3!\5!\u020b\n!\5!\u020d" +
                    "\n!\3!\3!\5!\u0211\n!\5!\u0213\n!\3!\3!\5!\u0217\n!\5!\u0219\n!\3!\3!" +
                    "\3\"\3\"\5\"\u021f\n\"\3\"\3\"\3#\3#\5#\u0225\n#\3#\3#\5#\u0229\n#\3#" +
                    "\5#\u022c\n#\3#\5#\u022f\n#\3#\3#\5#\u0233\n#\3#\3#\3#\3#\5#\u0239\n#" +
                    "\3#\3#\5#\u023d\n#\3#\5#\u0240\n#\3#\5#\u0243\n#\3#\3#\3#\3#\5#\u0249" +
                    "\n#\3#\5#\u024c\n#\3#\5#\u024f\n#\3#\3#\5#\u0253\n#\3#\3#\3#\3#\5#\u0259" +
                    "\n#\3#\5#\u025c\n#\3#\5#\u025f\n#\3#\3#\5#\u0263\n#\3$\3$\5$\u0267\n$" +
                    "\3$\5$\u026a\n$\3$\5$\u026d\n$\3$\5$\u0270\n$\3$\5$\u0273\n$\3$\3$\3%" +
                    "\3%\5%\u0279\n%\3&\3&\3&\5&\u027e\n&\3&\3&\5&\u0282\n&\3&\5&\u0285\n&" +
                    "\3&\7&\u0288\n&\f&\16&\u028b\13&\3\'\3\'\5\'\u028f\n\'\3\'\7\'\u0292\n" +
                    "\'\f\'\16\'\u0295\13\'\3(\3(\3(\3)\3)\5)\u029c\n)\3)\3)\5)\u02a0\n)\5" +
                    ")\u02a2\n)\3)\3)\5)\u02a6\n)\3)\3)\5)\u02aa\n)\5)\u02ac\n)\5)\u02ae\n" +
                    ")\3*\3*\3+\3+\3,\3,\3-\3-\3-\3-\3-\3-\7-\u02bc\n-\f-\16-\u02bf\13-\3." +
                    "\3.\3.\3.\3.\3.\7.\u02c7\n.\f.\16.\u02ca\13.\3/\3/\3/\3/\3/\3/\7/\u02d2" +
                    "\n/\f/\16/\u02d5\13/\3\60\3\60\3\60\3\60\7\60\u02db\n\60\f\60\16\60\u02de" +
                    "\13\60\3\60\3\60\3\61\3\61\5\61\u02e4\n\61\3\61\7\61\u02e7\n\61\f\61\16" +
                    "\61\u02ea\13\61\3\62\3\62\5\62\u02ee\n\62\3\62\3\62\5\62\u02f2\n\62\3" +
                    "\62\3\62\5\62\u02f6\n\62\3\62\3\62\5\62\u02fa\n\62\3\62\7\62\u02fd\n\62" +
                    "\f\62\16\62\u0300\13\62\3\63\3\63\5\63\u0304\n\63\3\63\3\63\5\63\u0308" +
                    "\n\63\3\63\3\63\5\63\u030c\n\63\3\63\3\63\5\63\u0310\n\63\3\63\3\63\5" +
                    "\63\u0314\n\63\3\63\3\63\5\63\u0318\n\63\3\63\7\63\u031b\n\63\f\63\16" +
                    "\63\u031e\13\63\3\64\3\64\5\64\u0322\n\64\3\64\3\64\5\64\u0326\n\64\3" +
                    "\64\7\64\u0329\n\64\f\64\16\64\u032c\13\64\3\65\3\65\5\65\u0330\n\65\7" +
                    "\65\u0332\n\65\f\65\16\65\u0335\13\65\3\65\3\65\3\66\3\66\5\66\u033b\n" +
                    "\66\3\66\3\66\3\66\3\66\3\66\5\66\u0342\n\66\3\66\3\66\5\66\u0346\n\66" +
                    "\3\66\3\66\5\66\u034a\n\66\3\66\3\66\5\66\u034e\n\66\3\66\3\66\3\66\3" +
                    "\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5" +
                    "\66\u0361\n\66\3\66\5\66\u0364\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66" +
                    "\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0373\n\66\f\66\16\66\u0376\13\66" +
                    "\3\67\3\67\3\67\7\67\u037b\n\67\f\67\16\67\u037e\13\67\38\38\38\38\38" +
                    "\38\38\38\58\u0388\n8\38\38\58\u038c\n8\38\38\58\u0390\n8\38\38\38\38" +
                    "\38\58\u0397\n8\38\38\58\u039b\n8\38\38\58\u039f\n8\38\38\58\u03a3\n8" +
                    "\78\u03a5\n8\f8\168\u03a8\138\38\38\38\38\58\u03ae\n8\38\38\58\u03b2\n" +
                    "8\38\38\58\u03b6\n8\38\38\38\38\58\u03bc\n8\38\38\58\u03c0\n8\38\38\5" +
                    "8\u03c4\n8\38\58\u03c7\n8\38\38\58\u03cb\n8\38\38\38\38\58\u03d1\n8\3" +
                    "8\38\58\u03d5\n8\38\38\58\u03d9\n8\38\38\38\38\58\u03df\n8\38\38\58\u03e3" +
                    "\n8\38\38\58\u03e7\n8\38\38\38\38\58\u03ed\n8\38\38\58\u03f1\n8\38\38" +
                    "\58\u03f5\n8\38\38\38\38\58\u03fb\n8\38\38\58\u03ff\n8\38\38\58\u0403" +
                    "\n8\38\38\38\38\38\38\58\u040b\n8\39\39\59\u040f\n9\39\39\39\59\u0414" +
                    "\n9\39\39\39\59\u0419\n9\39\39\39\59\u041e\n9\39\39\39\59\u0423\n9\39" +
                    "\39\39\59\u0428\n9\39\39\39\59\u042d\n9\39\59\u0430\n9\3:\3:\5:\u0434" +
                    "\n:\3:\3:\5:\u0438\n:\3:\3:\3;\3;\5;\u043e\n;\3;\6;\u0441\n;\r;\16;\u0442" +
                    "\3<\3<\5<\u0447\n<\3<\5<\u044a\n<\3=\3=\3=\3=\3=\3=\3>\3>\5>\u0454\n>" +
                    "\3>\3>\5>\u0458\n>\3>\3>\5>\u045c\n>\5>\u045e\n>\3>\3>\5>\u0462\n>\3>" +
                    "\3>\5>\u0466\n>\3>\3>\5>\u046a\n>\7>\u046c\n>\f>\16>\u046f\13>\5>\u0471" +
                    "\n>\3>\3>\3?\3?\3@\3@\3@\5@\u047a\n@\3@\3@\5@\u047e\n@\3@\3@\3A\5A\u0483" +
                    "\nA\3A\3A\5A\u0487\nA\3A\3A\3A\3A\5A\u048d\nA\3B\3B\3C\3C\5C\u0493\nC" +
                    "\3D\3D\5D\u0497\nD\3D\3D\5D\u049b\nD\3D\3D\5D\u049f\nD\3D\3D\5D\u04a3" +
                    "\nD\3D\3D\5D\u04a7\nD\3D\3D\5D\u04ab\nD\3D\3D\5D\u04af\nD\3D\3D\5D\u04b3" +
                    "\nD\7D\u04b5\nD\fD\16D\u04b8\13D\5D\u04ba\nD\3D\3D\3E\3E\3E\5E\u04c1\n" +
                    "E\3F\3F\5F\u04c5\nF\3F\6F\u04c8\nF\rF\16F\u04c9\3G\3G\3H\3H\3I\3I\5I\u04d2" +
                    "\nI\3J\6J\u04d5\nJ\rJ\16J\u04d6\3J\5J\u04da\nJ\3J\3J\5J\u04de\nJ\3J\3" +
                    "J\3K\7K\u04e3\nK\fK\16K\u04e6\13K\3K\5K\u04e9\nK\3K\3K\3K\3L\3L\3M\6M" +
                    "\u04f1\nM\rM\16M\u04f2\3N\3N\3O\3O\3P\3P\3Q\3Q\3Q\2\2R\2\4\6\b\n\f\16" +
                    "\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd" +
                    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092" +
                    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\2\16\3\2UV\3\2WX\3\2\20\21" +
                    "\4\2\13\13\35\35\3\28:\4\2\34\34??\3\2!\"\4\299<<\5\2;;Aloo\4\2\30\30" +
                    "#&\4\2\31\31\'*\4\2\21\21+\65\u05ad\2\u00a3\3\2\2\2\4\u00af\3\2\2\2\6" +
                    "\u00b1\3\2\2\2\b\u00b3\3\2\2\2\n\u00bd\3\2\2\2\f\u00d4\3\2\2\2\16\u00df" +
                    "\3\2\2\2\20\u00e3\3\2\2\2\22\u00f0\3\2\2\2\24\u00fa\3\2\2\2\26\u0113\3" +
                    "\2\2\2\30\u0115\3\2\2\2\32\u011b\3\2\2\2\34\u0133\3\2\2\2\36\u0149\3\2" +
                    "\2\2 \u014b\3\2\2\2\"\u015f\3\2\2\2$\u016e\3\2\2\2&\u017a\3\2\2\2(\u017c" +
                    "\3\2\2\2*\u01a8\3\2\2\2,\u01b1\3\2\2\2.\u01b3\3\2\2\2\60\u01c2\3\2\2\2" +
                    "\62\u01c6\3\2\2\2\64\u01d1\3\2\2\2\66\u01d3\3\2\2\28\u01d7\3\2\2\2:\u01f0" +
                    "\3\2\2\2<\u01f2\3\2\2\2>\u0202\3\2\2\2@\u0204\3\2\2\2B\u021c\3\2\2\2D" +
                    "\u0262\3\2\2\2F\u0264\3\2\2\2H\u0278\3\2\2\2J\u027a\3\2\2\2L\u028c\3\2" +
                    "\2\2N\u0296\3\2\2\2P\u0299\3\2\2\2R\u02af\3\2\2\2T\u02b1\3\2\2\2V\u02b3" +
                    "\3\2\2\2X\u02b5\3\2\2\2Z\u02c0\3\2\2\2\\\u02cb\3\2\2\2^\u02dc\3\2\2\2" +
                    "`\u02e1\3\2\2\2b\u02eb\3\2\2\2d\u0301\3\2\2\2f\u031f\3\2\2\2h\u0333\3" +
                    "\2\2\2j\u0338\3\2\2\2l\u0377\3\2\2\2n\u040a\3\2\2\2p\u042f\3\2\2\2r\u0431" +
                    "\3\2\2\2t\u043b\3\2\2\2v\u0444\3\2\2\2x\u044b\3\2\2\2z\u0451\3\2\2\2|" +
                    "\u0474\3\2\2\2~\u0476\3\2\2\2\u0080\u0482\3\2\2\2\u0082\u048e\3\2\2\2" +
                    "\u0084\u0492\3\2\2\2\u0086\u0494\3\2\2\2\u0088\u04bd\3\2\2\2\u008a\u04c2" +
                    "\3\2\2\2\u008c\u04cb\3\2\2\2\u008e\u04cd\3\2\2\2\u0090\u04d1\3\2\2\2\u0092" +
                    "\u04d9\3\2\2\2\u0094\u04e8\3\2\2\2\u0096\u04ed\3\2\2\2\u0098\u04f0\3\2" +
                    "\2\2\u009a\u04f4\3\2\2\2\u009c\u04f6\3\2\2\2\u009e\u04f8\3\2\2\2\u00a0" +
                    "\u04fa\3\2\2\2\u00a2\u00a4\5\u0098M\2\u00a3\u00a2\3\2\2\2\u00a3\u00a4" +
                    "\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00aa\5\4\3\2\u00a6\u00a8\5\u0098M" +
                    "\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00ab" +
                    "\7\3\2\2\u00aa\u00a7\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac" +
                    "\u00ae\5\u0098M\2\u00ad\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\3\3\2" +
                    "\2\2\u00af\u00b0\5\6\4\2\u00b0\5\3\2\2\2\u00b1\u00b2\5\b\5\2\u00b2\7\3" +
                    "\2\2\2\u00b3\u00ba\5\n\6\2\u00b4\u00b6\5\u0098M\2\u00b5\u00b4\3\2\2\2" +
                    "\u00b5\u00b6\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\5\f\7\2\u00b8\u00b5" +
                    "\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00b8\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb" +
                    "\t\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00c4\5\16\b\2\u00be\u00c0\5\u0098" +
                    "M\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1" +
                    "\u00c3\5\16\b\2\u00c2\u00bf\3\2\2\2\u00c3\u00c6\3\2\2\2\u00c4\u00c2\3" +
                    "\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\13\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c7" +
                    "\u00c8\7A\2\2\u00c8\u00c9\5\u0098M\2\u00c9\u00cb\7B\2\2\u00ca\u00cc\5" +
                    "\u0098M\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd\3\2\2\2" +
                    "\u00cd\u00ce\5\n\6\2\u00ce\u00d5\3\2\2\2\u00cf\u00d1\7A\2\2\u00d0\u00d2" +
                    "\5\u0098M\2\u00d1\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\3\2\2" +
                    "\2\u00d3\u00d5\5\n\6\2\u00d4\u00c7\3\2\2\2\u00d4\u00cf\3\2\2\2\u00d5\r" +
                    "\3\2\2\2\u00d6\u00e0\5\20\t\2\u00d7\u00e0\5\22\n\2\u00d8\u00e0\5\24\13" +
                    "\2\u00d9\u00e0\5\30\r\2\u00da\u00e0\5\32\16\2\u00db\u00e0\5\36\20\2\u00dc" +
                    "\u00e0\5 \21\2\u00dd\u00e0\5$\23\2\u00de\u00e0\5&\24\2\u00df\u00d6\3\2" +
                    "\2\2\u00df\u00d7\3\2\2\2\u00df\u00d8\3\2\2\2\u00df\u00d9\3\2\2\2\u00df" +
                    "\u00da\3\2\2\2\u00df\u00db\3\2\2\2\u00df\u00dc\3\2\2\2\u00df\u00dd\3\2" +
                    "\2\2\u00df\u00de\3\2\2\2\u00e0\17\3\2\2\2\u00e1\u00e2\7C\2\2\u00e2\u00e4" +
                    "\5\u0098M\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e5\3\2\2" +
                    "\2\u00e5\u00e7\7D\2\2\u00e6\u00e8\5\u0098M\2\u00e7\u00e6\3\2\2\2\u00e7" +
                    "\u00e8\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00ee\58\35\2\u00ea\u00ec\5\u0098" +
                    "M\2\u00eb\u00ea\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed" +
                    "\u00ef\5\66\34\2\u00ee\u00eb\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\21\3\2" +
                    "\2\2\u00f0\u00f2\7E\2\2\u00f1\u00f3\5\u0098M\2\u00f2\u00f1\3\2\2\2\u00f2" +
                    "\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\5V,\2\u00f5\u00f6\5\u0098" +
                    "M\2\u00f6\u00f7\7F\2\2\u00f7\u00f8\5\u0098M\2\u00f8\u00f9\5\u0082B\2\u00f9" +
                    "\23\3\2\2\2\u00fa\u00fc\7G\2\2\u00fb\u00fd\5\u0098M\2\u00fc\u00fb\3\2" +
                    "\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0104\5:\36\2\u00ff" +
                    "\u0100\5\u0098M\2\u0100\u0101\5\26\f\2\u0101\u0103\3\2\2\2\u0102\u00ff" +
                    "\3\2\2\2\u0103\u0106\3\2\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105" +
                    "\25\3\2\2\2\u0106\u0104\3\2\2\2\u0107\u0108\7H\2\2\u0108\u0109\5\u0098" +
                    "M\2\u0109\u010a\7D\2\2\u010a\u010b\5\u0098M\2\u010b\u010c\5\32\16\2\u010c" +
                    "\u0114\3\2\2\2\u010d\u010e\7H\2\2\u010e\u010f\5\u0098M\2\u010f\u0110\7" +
                    "I\2\2\u0110\u0111\5\u0098M\2\u0111\u0112\5\32\16\2\u0112\u0114\3\2\2\2" +
                    "\u0113\u0107\3\2\2\2\u0113\u010d\3\2\2\2\u0114\27\3\2\2\2\u0115\u0117" +
                    "\7I\2\2\u0116\u0118\5\u0098M\2\u0117\u0116\3\2\2\2\u0117\u0118\3\2\2\2" +
                    "\u0118\u0119\3\2\2\2\u0119\u011a\58\35\2\u011a\31\3\2\2\2\u011b\u011c" +
                    "\7J\2\2\u011c\u0121\5\34\17\2\u011d\u011e\7\4\2\2\u011e\u0120\5\34\17" +
                    "\2\u011f\u011d\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122" +
                    "\3\2\2\2\u0122\33\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0125\5\u008aF\2\u0125" +
                    "\u0126\7\5\2\2\u0126\u0127\5V,\2\u0127\u0134\3\2\2\2\u0128\u0129\5\u0082" +
                    "B\2\u0129\u012a\7\5\2\2\u012a\u012b\5V,\2\u012b\u0134\3\2\2\2\u012c\u012d" +
                    "\5\u0082B\2\u012d\u012e\7\6\2\2\u012e\u012f\5V,\2\u012f\u0134\3\2\2\2" +
                    "\u0130\u0131\5\u0082B\2\u0131\u0132\5L\'\2\u0132\u0134\3\2\2\2\u0133\u0124" +
                    "\3\2\2\2\u0133\u0128\3\2\2\2\u0133\u012c\3\2\2\2\u0133\u0130\3\2\2\2\u0134" +
                    "\35\3\2\2\2\u0135\u0136\7K\2\2\u0136\u013b\5V,\2\u0137\u0138\7\4\2\2\u0138" +
                    "\u013a\5V,\2\u0139\u0137\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3\2\2" +
                    "\2\u013b\u013c\3\2\2\2\u013c\u014a\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u013f" +
                    "\7L\2\2\u013f\u0140\5\u0098M\2\u0140\u0141\7K\2\2\u0141\u0146\5V,\2\u0142" +
                    "\u0143\7\4\2\2\u0143\u0145\5V,\2\u0144\u0142\3\2\2\2\u0145\u0148\3\2\2" +
                    "\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146" +
                    "\3\2\2\2\u0149\u0135\3\2\2\2\u0149\u013e\3\2\2\2\u014a\37\3\2\2\2\u014b" +
                    "\u014c\7M\2\2\u014c\u014d\5\u0098M\2\u014d\u0158\5\"\22\2\u014e\u0150" +
                    "\5\u0098M\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2" +
                    "\2\u0151\u0153\7\4\2\2\u0152\u0154\5\u0098M\2\u0153\u0152\3\2\2\2\u0153" +
                    "\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157\5\"\22\2\u0156\u014f\3" +
                    "\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159" +
                    "!\3\2\2\2\u015a\u0158\3\2\2\2\u015b\u015c\5\u0082B\2\u015c\u015d\5L\'" +
                    "\2\u015d\u0160\3\2\2\2\u015e\u0160\5\u008aF\2\u015f\u015b\3\2\2\2\u015f" +
                    "\u015e\3\2\2\2\u0160#\3\2\2\2\u0161\u0162\7N\2\2\u0162\u0163\7O\2\2\u0163" +
                    "\u0164\5\u0098M\2\u0164\u0166\5(\25\2\u0165\u0167\5\66\34\2\u0166\u0165" +
                    "\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016f\3\2\2\2\u0168\u0169\7N\2\2\u0169" +
                    "\u016a\5\u0098M\2\u016a\u016c\5(\25\2\u016b\u016d\5\66\34\2\u016c\u016b" +
                    "\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e\u0161\3\2\2\2\u016e" +
                    "\u0168\3\2\2\2\u016f%\3\2\2\2\u0170\u0171\7P\2\2\u0171\u0172\5\u0098M" +
                    "\2\u0172\u0173\7O\2\2\u0173\u0174\5\u0098M\2\u0174\u0175\5(\25\2\u0175" +
                    "\u017b\3\2\2\2\u0176\u0177\7P\2\2\u0177\u0178\5\u0098M\2\u0178\u0179\5" +
                    "(\25\2\u0179\u017b\3\2\2\2\u017a\u0170\3\2\2\2\u017a\u0176\3\2\2\2\u017b" +
                    "\'\3\2\2\2\u017c\u0180\5*\26\2\u017d\u017e\5\u0098M\2\u017e\u017f\5.\30" +
                    "\2\u017f\u0181\3\2\2\2\u0180\u017d\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0185" +
                    "\3\2\2\2\u0182\u0183\5\u0098M\2\u0183\u0184\5\60\31\2\u0184\u0186\3\2" +
                    "\2\2\u0185\u0182\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u018a\3\2\2\2\u0187" +
                    "\u0188\5\u0098M\2\u0188\u0189\5\62\32\2\u0189\u018b\3\2\2\2\u018a\u0187" +
                    "\3\2\2\2\u018a\u018b\3\2\2\2\u018b)\3\2\2\2\u018c\u0197\7\7\2\2\u018d" +
                    "\u018f\5\u0098M\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190" +
                    "\3\2\2\2\u0190\u0192\7\4\2\2\u0191\u0193\5\u0098M\2\u0192\u0191\3\2\2" +
                    "\2\u0192\u0193\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0196\5,\27\2\u0195\u018e" +
                    "\3\2\2\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198" +
                    "\u01a9\3\2\2\2\u0199\u0197\3\2\2\2\u019a\u01a5\5,\27\2\u019b\u019d\5\u0098" +
                    "M\2\u019c\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019e\3\2\2\2\u019e" +
                    "\u01a0\7\4\2\2\u019f\u01a1\5\u0098M\2\u01a0\u019f\3\2\2\2\u01a0\u01a1" +
                    "\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\5,\27\2\u01a3\u019c\3\2\2\2\u01a4" +
                    "\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01a9\3\2" +
                    "\2\2\u01a7\u01a5\3\2\2\2\u01a8\u018c\3\2\2\2\u01a8\u019a\3\2\2\2\u01a9" +
                    "+\3\2\2\2\u01aa\u01ab\5V,\2\u01ab\u01ac\5\u0098M\2\u01ac\u01ad\7F\2\2" +
                    "\u01ad\u01ae\5\u0098M\2\u01ae\u01af\5\u0082B\2\u01af\u01b2\3\2\2\2\u01b0" +
                    "\u01b2\5V,\2\u01b1\u01aa\3\2\2\2\u01b1\u01b0\3\2\2\2\u01b2-\3\2\2\2\u01b3" +
                    "\u01b4\7Q\2\2\u01b4\u01b5\5\u0098M\2\u01b5\u01b6\7R\2\2\u01b6\u01b7\5" +
                    "\u0098M\2\u01b7\u01bf\5\64\33\2\u01b8\u01ba\7\4\2\2\u01b9\u01bb\5\u0098" +
                    "M\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc" +
                    "\u01be\5\64\33\2\u01bd\u01b8\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3" +
                    "\2\2\2\u01bf\u01c0\3\2\2\2\u01c0/\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c3" +
                    "\7S\2\2\u01c3\u01c4\5\u0098M\2\u01c4\u01c5\5V,\2\u01c5\61\3\2\2\2\u01c6" +
                    "\u01c7\7T\2\2\u01c7\u01c8\5\u0098M\2\u01c8\u01c9\5V,\2\u01c9\63\3\2\2" +
                    "\2\u01ca\u01cb\5V,\2\u01cb\u01cc\t\2\2\2\u01cc\u01d2\3\2\2\2\u01cd\u01cf" +
                    "\5V,\2\u01ce\u01d0\t\3\2\2\u01cf\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0" +
                    "\u01d2\3\2\2\2\u01d1\u01ca\3\2\2\2\u01d1\u01cd\3\2\2\2\u01d2\65\3\2\2" +
                    "\2\u01d3\u01d4\7Y\2\2\u01d4\u01d5\5\u0098M\2\u01d5\u01d6\5V,\2\u01d6\67" +
                    "\3\2\2\2\u01d7\u01e2\5:\36\2\u01d8\u01da\5\u0098M\2\u01d9\u01d8\3\2\2" +
                    "\2\u01d9\u01da\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dd\7\4\2\2\u01dc\u01de" +
                    "\5\u0098M\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3\2\2" +
                    "\2\u01df\u01e1\5:\36\2\u01e0\u01d9\3\2\2\2\u01e1\u01e4\3\2\2\2\u01e2\u01e0" +
                    "\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e39\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e5" +
                    "\u01e7\5\u0082B\2\u01e6\u01e8\5\u0098M\2\u01e7\u01e6\3\2\2\2\u01e7\u01e8" +
                    "\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\7\5\2\2\u01ea\u01ec\5\u0098M" +
                    "\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ee" +
                    "\5<\37\2\u01ee\u01f1\3\2\2\2\u01ef\u01f1\5<\37\2\u01f0\u01e5\3\2\2\2\u01f0" +
                    "\u01ef\3\2\2\2\u01f1;\3\2\2\2\u01f2\u01f3\5> \2\u01f3=\3\2\2\2\u01f4\u01fb" +
                    "\5@!\2\u01f5\u01f7\5\u0098M\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2" +
                    "\u01f7\u01f8\3\2\2\2\u01f8\u01fa\5B\"\2\u01f9\u01f6\3\2\2\2\u01fa\u01fd" +
                    "\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u0203\3\2\2\2\u01fd" +
                    "\u01fb\3\2\2\2\u01fe\u01ff\7\b\2\2\u01ff\u0200\5> \2\u0200\u0201\7\t\2" +
                    "\2\u0201\u0203\3\2\2\2\u0202\u01f4\3\2\2\2\u0202\u01fe\3\2\2\2\u0203?" +
                    "\3\2\2\2\u0204\u0206\7\b\2\2\u0205\u0207\5\u0098M\2\u0206\u0205\3\2\2" +
                    "\2\u0206\u0207\3\2\2\2\u0207\u020c\3\2\2\2\u0208\u020a\5\u0082B\2\u0209" +
                    "\u020b\5\u0098M\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020d" +
                    "\3\2\2\2\u020c\u0208\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u0212\3\2\2\2\u020e" +
                    "\u0210\5L\'\2\u020f\u0211\5\u0098M\2\u0210\u020f\3\2\2\2\u0210\u0211\3" +
                    "\2\2\2\u0211\u0213\3\2\2\2\u0212\u020e\3\2\2\2\u0212\u0213\3\2\2\2\u0213" +
                    "\u0218\3\2\2\2\u0214\u0216\5H%\2\u0215\u0217\5\u0098M\2\u0216\u0215\3" +
                    "\2\2\2\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0214\3\2\2\2\u0218" +
                    "\u0219\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\7\t\2\2\u021bA\3\2\2\2" +
                    "\u021c\u021e\5D#\2\u021d\u021f\5\u0098M\2\u021e\u021d\3\2\2\2\u021e\u021f" +
                    "\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\5@!\2\u0221C\3\2\2\2\u0222\u0224" +
                    "\5\u009aN\2\u0223\u0225\5\u0098M\2\u0224\u0223\3\2\2\2\u0224\u0225\3\2" +
                    "\2\2\u0225\u0226\3\2\2\2\u0226\u0228\5\u009eP\2\u0227\u0229\5\u0098M\2" +
                    "\u0228\u0227\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u022b\3\2\2\2\u022a\u022c" +
                    "\5F$\2\u022b\u022a\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022e\3\2\2\2\u022d" +
                    "\u022f\5\u0098M\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230" +
                    "\3\2\2\2\u0230\u0232\5\u009eP\2\u0231\u0233\5\u0098M\2\u0232\u0231\3\2" +
                    "\2\2\u0232\u0233\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0235\5\u009cO\2\u0235" +
                    "\u0263\3\2\2\2\u0236\u0238\5\u009aN\2\u0237\u0239\5\u0098M\2\u0238\u0237" +
                    "\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023c\5\u009eP" +
                    "\2\u023b\u023d\5\u0098M\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d" +
                    "\u023f\3\2\2\2\u023e\u0240\5F$\2\u023f\u023e\3\2\2\2\u023f\u0240\3\2\2" +
                    "\2\u0240\u0242\3\2\2\2\u0241\u0243\5\u0098M\2\u0242\u0241\3\2\2\2\u0242" +
                    "\u0243\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245\5\u009eP\2\u0245\u0263" +
                    "\3\2\2\2\u0246\u0248\5\u009eP\2\u0247\u0249\5\u0098M\2\u0248\u0247\3\2" +
                    "\2\2\u0248\u0249\3\2\2\2\u0249\u024b\3\2\2\2\u024a\u024c\5F$\2\u024b\u024a" +
                    "\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024e\3\2\2\2\u024d\u024f\5\u0098M" +
                    "\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0252" +
                    "\5\u009eP\2\u0251\u0253\5\u0098M\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2" +
                    "\2\2\u0253\u0254\3\2\2\2\u0254\u0255\5\u009cO\2\u0255\u0263\3\2\2\2\u0256" +
                    "\u0258\5\u009eP\2\u0257\u0259\5\u0098M\2\u0258\u0257\3\2\2\2\u0258\u0259" +
                    "\3\2\2\2\u0259\u025b\3\2\2\2\u025a\u025c\5F$\2\u025b\u025a\3\2\2\2\u025b" +
                    "\u025c\3\2\2\2\u025c\u025e\3\2\2\2\u025d\u025f\5\u0098M\2\u025e\u025d" +
                    "\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0261\5\u009eP" +
                    "\2\u0261\u0263\3\2\2\2\u0262\u0222\3\2\2\2\u0262\u0236\3\2\2\2\u0262\u0246" +
                    "\3\2\2\2\u0262\u0256\3\2\2\2\u0263E\3\2\2\2\u0264\u0266\7\n\2\2\u0265" +
                    "\u0267\5\u0082B\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0269" +
                    "\3\2\2\2\u0268\u026a\7\13\2\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2" +
                    "\u026a\u026c\3\2\2\2\u026b\u026d\5J&\2\u026c\u026b\3\2\2\2\u026c\u026d" +
                    "\3\2\2\2\u026d\u026f\3\2\2\2\u026e\u0270\5P)\2\u026f\u026e\3\2\2\2\u026f" +
                    "\u0270\3\2\2\2\u0270\u0272\3\2\2\2\u0271\u0273\5H%\2\u0272\u0271\3\2\2" +
                    "\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0275\7\f\2\2\u0275G" +
                    "\3\2\2\2\u0276\u0279\5\u0086D\2\u0277\u0279\5\u0088E\2\u0278\u0276\3\2" +
                    "\2\2\u0278\u0277\3\2\2\2\u0279I\3\2\2\2\u027a\u027b\7\r\2\2\u027b\u0289" +
                    "\5T+\2\u027c\u027e\5\u0098M\2\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2" +
                    "\u027e\u027f\3\2\2\2\u027f\u0281\7\16\2\2\u0280\u0282\7\r\2\2\u0281\u0280" +
                    "\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0284\3\2\2\2\u0283\u0285\5\u0098M" +
                    "\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0288" +
                    "\5T+\2\u0287\u027d\3\2\2\2\u0288\u028b\3\2\2\2\u0289\u0287\3\2\2\2\u0289" +
                    "\u028a\3\2\2\2\u028aK\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u0293\5N(\2\u028d" +
                    "\u028f\5\u0098M\2\u028e\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290" +
                    "\3\2\2\2\u0290\u0292\5N(\2\u0291\u028e\3\2\2\2\u0292\u0295\3\2\2\2\u0293" +
                    "\u0291\3\2\2\2\u0293\u0294\3\2\2\2\u0294M\3\2\2\2\u0295\u0293\3\2\2\2" +
                    "\u0296\u0297\7\r\2\2\u0297\u0298\5R*\2\u0298O\3\2\2\2\u0299\u029b\7\7" +
                    "\2\2\u029a\u029c\5\u0098M\2\u029b\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c" +
                    "\u02a1\3\2\2\2\u029d\u029f\5\u008eH\2\u029e\u02a0\5\u0098M\2\u029f\u029e" +
                    "\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2\3\2\2\2\u02a1\u029d\3\2\2\2\u02a1" +
                    "\u02a2\3\2\2\2\u02a2\u02ad\3\2\2\2\u02a3\u02a5\7\17\2\2\u02a4\u02a6\5" +
                    "\u0098M\2\u02a5\u02a4\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02ab\3\2\2\2" +
                    "\u02a7\u02a9\5\u008eH\2\u02a8\u02aa\5\u0098M\2\u02a9\u02a8\3\2\2\2\u02a9" +
                    "\u02aa\3\2\2\2\u02aa\u02ac\3\2\2\2\u02ab\u02a7\3\2\2\2\u02ab\u02ac\3\2" +
                    "\2\2\u02ac\u02ae\3\2\2\2\u02ad\u02a3\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae" +
                    "Q\3\2\2\2\u02af\u02b0\5\u0096L\2\u02b0S\3\2\2\2\u02b1\u02b2\5\u0096L\2" +
                    "\u02b2U\3\2\2\2\u02b3\u02b4\5X-\2\u02b4W\3\2\2\2\u02b5\u02bd\5Z.\2\u02b6" +
                    "\u02b7\5\u0098M\2\u02b7\u02b8\7Z\2\2\u02b8\u02b9\5\u0098M\2\u02b9\u02ba" +
                    "\5Z.\2\u02ba\u02bc\3\2\2\2\u02bb\u02b6\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd" +
                    "\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02beY\3\2\2\2\u02bf\u02bd\3\2\2\2" +
                    "\u02c0\u02c8\5\\/\2\u02c1\u02c2\5\u0098M\2\u02c2\u02c3\7[\2\2\u02c3\u02c4" +
                    "\5\u0098M\2\u02c4\u02c5\5\\/\2\u02c5\u02c7\3\2\2\2\u02c6\u02c1\3\2\2\2" +
                    "\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9[\3" +
                    "\2\2\2\u02ca\u02c8\3\2\2\2\u02cb\u02d3\5^\60\2\u02cc\u02cd\5\u0098M\2" +
                    "\u02cd\u02ce\7\\\2\2\u02ce\u02cf\5\u0098M\2\u02cf\u02d0\5^\60\2\u02d0" +
                    "\u02d2\3\2\2\2\u02d1\u02cc\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3\2" +
                    "\2\2\u02d3\u02d4\3\2\2\2\u02d4]\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d6\u02d7" +
                    "\5\u0098M\2\u02d7\u02d8\7]\2\2\u02d8\u02d9\5\u0098M\2\u02d9\u02db\3\2" +
                    "\2\2\u02da\u02d6\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc" +
                    "\u02dd\3\2\2\2\u02dd\u02df\3\2\2\2\u02de\u02dc\3\2\2\2\u02df\u02e0\5`" +
                    "\61\2\u02e0_\3\2\2\2\u02e1\u02e8\5b\62\2\u02e2\u02e4\5\u0098M\2\u02e3" +
                    "\u02e2\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e7\5p" +
                    "9\2\u02e6\u02e3\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8" +
                    "\u02e9\3\2\2\2\u02e9a\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb\u02fe\5d\63\2" +
                    "\u02ec\u02ee\5\u0098M\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee" +
                    "\u02ef\3\2\2\2\u02ef\u02f1\7\20\2\2\u02f0\u02f2\5\u0098M\2\u02f1\u02f0" +
                    "\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02fd\5d\63\2\u02f4" +
                    "\u02f6\5\u0098M\2\u02f5\u02f4\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7" +
                    "\3\2\2\2\u02f7\u02f9\7\21\2\2\u02f8\u02fa\5\u0098M\2\u02f9\u02f8\3\2\2" +
                    "\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fd\5d\63\2\u02fc\u02ed" +
                    "\3\2\2\2\u02fc\u02f5\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe" +
                    "\u02ff\3\2\2\2\u02ffc\3\2\2\2\u0300\u02fe\3\2\2\2\u0301\u031c\5f\64\2" +
                    "\u0302\u0304\5\u0098M\2\u0303\u0302\3\2\2\2\u0303\u0304\3\2\2\2\u0304" +
                    "\u0305\3\2\2\2\u0305\u0307\7\7\2\2\u0306\u0308\5\u0098M\2\u0307\u0306" +
                    "\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u031b\5f\64\2\u030a" +
                    "\u030c\5\u0098M\2\u030b\u030a\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030d" +
                    "\3\2\2\2\u030d\u030f\7\22\2\2\u030e\u0310\5\u0098M\2\u030f\u030e\3\2\2" +
                    "\2\u030f\u0310\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u031b\5f\64\2\u0312\u0314" +
                    "\5\u0098M\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\3\2\2" +
                    "\2\u0315\u0317\7\23\2\2\u0316\u0318\5\u0098M\2\u0317\u0316\3\2\2\2\u0317" +
                    "\u0318\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\5f\64\2\u031a\u0303\3\2" +
                    "\2\2\u031a\u030b\3\2\2\2\u031a\u0313\3\2\2\2\u031b\u031e\3\2\2\2\u031c" +
                    "\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031de\3\2\2\2\u031e\u031c\3\2\2\2" +
                    "\u031f\u032a\5h\65\2\u0320\u0322\5\u0098M\2\u0321\u0320\3\2\2\2\u0321" +
                    "\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0325\7\24\2\2\u0324\u0326\5" +
                    "\u0098M\2\u0325\u0324\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0327\3\2\2\2" +
                    "\u0327\u0329\5h\65\2\u0328\u0321\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328" +
                    "\3\2\2\2\u032a\u032b\3\2\2\2\u032bg\3\2\2\2\u032c\u032a\3\2\2\2\u032d" +
                    "\u032f\t\4\2\2\u032e\u0330\5\u0098M\2\u032f\u032e\3\2\2\2\u032f\u0330" +
                    "\3\2\2\2\u0330\u0332\3\2\2\2\u0331\u032d\3\2\2\2\u0332\u0335\3\2\2\2\u0333" +
                    "\u0331\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336\3\2\2\2\u0335\u0333\3\2" +
                    "\2\2\u0336\u0337\5j\66\2\u0337i\3\2\2\2\u0338\u0374\5l\67\2\u0339\u033b" +
                    "\5\u0098M\2\u033a\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c\3\2\2" +
                    "\2\u033c\u033d\7\n\2\2\u033d\u033e\5V,\2\u033e\u033f\7\f\2\2\u033f\u0373" +
                    "\3\2\2\2\u0340\u0342\5\u0098M\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2\2" +
                    "\2\u0342\u0343\3\2\2\2\u0343\u0345\7\n\2\2\u0344\u0346\5V,\2\u0345\u0344" +
                    "\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349\7\17\2\2" +
                    "\u0348\u034a\5V,\2\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034b" +
                    "\3\2\2\2\u034b\u0373\7\f\2\2\u034c\u034e\5\u0098M\2\u034d\u034c\3\2\2" +
                    "\2\u034d\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0361\7\25\2\2\u0350" +
                    "\u0351\5\u0098M\2\u0351\u0352\7^\2\2\u0352\u0361\3\2\2\2\u0353\u0354\5" +
                    "\u0098M\2\u0354\u0355\7_\2\2\u0355\u0356\5\u0098M\2\u0356\u0357\7N\2\2" +
                    "\u0357\u0361\3\2\2\2\u0358\u0359\5\u0098M\2\u0359\u035a\7`\2\2\u035a\u035b" +
                    "\5\u0098M\2\u035b\u035c\7N\2\2\u035c\u0361\3\2\2\2\u035d\u035e\5\u0098" +
                    "M\2\u035e\u035f\7a\2\2\u035f\u0361\3\2\2\2\u0360\u034d\3\2\2\2\u0360\u0350" +
                    "\3\2\2\2\u0360\u0353\3\2\2\2\u0360\u0358\3\2\2\2\u0360\u035d\3\2\2\2\u0361" +
                    "\u0363\3\2\2\2\u0362\u0364\5\u0098M\2\u0363\u0362\3\2\2\2\u0363\u0364" +
                    "\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0373\5l\67\2\u0366\u0367\5\u0098M" +
                    "\2\u0367\u0368\7b\2\2\u0368\u0369\5\u0098M\2\u0369\u036a\7c\2\2\u036a" +
                    "\u0373\3\2\2\2\u036b\u036c\5\u0098M\2\u036c\u036d\7b\2\2\u036d\u036e\5" +
                    "\u0098M\2\u036e\u036f\7]\2\2\u036f\u0370\5\u0098M\2\u0370\u0371\7c\2\2" +
                    "\u0371\u0373\3\2\2\2\u0372\u033a\3\2\2\2\u0372\u0341\3\2\2\2\u0372\u0360" +
                    "\3\2\2\2\u0372\u0366\3\2\2\2\u0372\u036b\3\2\2\2\u0373\u0376\3\2\2\2\u0374" +
                    "\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375k\3\2\2\2\u0376\u0374\3\2\2\2" +
                    "\u0377\u037c\5n8\2\u0378\u037b\5\u0080A\2\u0379\u037b\5L\'\2\u037a\u0378" +
                    "\3\2\2\2\u037a\u0379\3\2\2\2\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c" +
                    "\u037d\3\2\2\2\u037dm\3\2\2\2\u037e\u037c\3\2\2\2\u037f\u040b\5\u0084" +
                    "C\2\u0380\u040b\7\66\2\2\u0381\u040b\5\u0088E\2\u0382\u040b\7d\2\2\u0383" +
                    "\u040b\7e\2\2\u0384\u040b\7c\2\2\u0385\u0387\7f\2\2\u0386\u0388\5\u0098" +
                    "M\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389" +
                    "\u038b\7\b\2\2\u038a\u038c\5\u0098M\2\u038b\u038a\3\2\2\2\u038b\u038c" +
                    "\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038f\7\7\2\2\u038e\u0390\5\u0098M" +
                    "\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u040b" +
                    "\7\t\2\2\u0392\u040b\5\u0086D\2\u0393\u040b\5~@\2\u0394\u0396\7\n\2\2" +
                    "\u0395\u0397\5\u0098M\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397" +
                    "\u0398\3\2\2\2\u0398\u039a\5V,\2\u0399\u039b\5\u0098M\2\u039a\u0399\3" +
                    "\2\2\2\u039a\u039b\3\2\2\2\u039b\u03a6\3\2\2\2\u039c\u039e\7\4\2\2\u039d" +
                    "\u039f\5\u0098M\2\u039e\u039d\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0" +
                    "\3\2\2\2\u03a0\u03a2\5V,\2\u03a1\u03a3\5\u0098M\2\u03a2\u03a1\3\2\2\2" +
                    "\u03a2\u03a3\3\2\2\2\u03a3\u03a5\3\2\2\2\u03a4\u039c\3\2\2\2\u03a5\u03a8" +
                    "\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a9\3\2\2\2\u03a8" +
                    "\u03a6\3\2\2\2\u03a9\u03aa\7\f\2\2\u03aa\u040b\3\2\2\2\u03ab\u03ad\7g" +
                    "\2\2\u03ac\u03ae\5\u0098M\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae" +
                    "\u03af\3\2\2\2\u03af\u03b1\7\b\2\2\u03b0\u03b2\5\u0098M\2\u03b1\u03b0" +
                    "\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b5\5v<\2\u03b4" +
                    "\u03b6\5\u0098M\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b7" +
                    "\3\2\2\2\u03b7\u03b8\7\t\2\2\u03b8\u040b\3\2\2\2\u03b9\u03bb\7h\2\2\u03ba" +
                    "\u03bc\5\u0098M\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd" +
                    "\3\2\2\2\u03bd\u03bf\7\b\2\2\u03be\u03c0\5\u0098M\2\u03bf\u03be\3\2\2" +
                    "\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3\5v<\2\u03c2\u03c4" +
                    "\5\u0098M\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03ca\3\2\2" +
                    "\2\u03c5\u03c7\5\u0098M\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7" +
                    "\u03c8\3\2\2\2\u03c8\u03c9\7\16\2\2\u03c9\u03cb\5V,\2\u03ca\u03c6\3\2" +
                    "\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\7\t\2\2\u03cd" +
                    "\u040b\3\2\2\2\u03ce\u03d0\7B\2\2\u03cf\u03d1\5\u0098M\2\u03d0\u03cf\3" +
                    "\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d4\7\b\2\2\u03d3" +
                    "\u03d5\5\u0098M\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6" +
                    "\3\2\2\2\u03d6\u03d8\5v<\2\u03d7\u03d9\5\u0098M\2\u03d8\u03d7\3\2\2\2" +
                    "\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db\7\t\2\2\u03db\u040b" +
                    "\3\2\2\2\u03dc\u03de\7i\2\2\u03dd\u03df\5\u0098M\2\u03de\u03dd\3\2\2\2" +
                    "\u03de\u03df\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e2\7\b\2\2\u03e1\u03e3" +
                    "\5\u0098M\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\3\2\2" +
                    "\2\u03e4\u03e6\5v<\2\u03e5\u03e7\5\u0098M\2\u03e6\u03e5\3\2\2\2\u03e6" +
                    "\u03e7\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\7\t\2\2\u03e9\u040b\3\2" +
                    "\2\2\u03ea\u03ec\7j\2\2\u03eb\u03ed\5\u0098M\2\u03ec\u03eb\3\2\2\2\u03ec" +
                    "\u03ed\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03f0\7\b\2\2\u03ef\u03f1\5\u0098" +
                    "M\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2" +
                    "\u03f4\5v<\2\u03f3\u03f5\5\u0098M\2\u03f4\u03f3\3\2\2\2\u03f4\u03f5\3" +
                    "\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\7\t\2\2\u03f7\u040b\3\2\2\2\u03f8" +
                    "\u03fa\7k\2\2\u03f9\u03fb\5\u0098M\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3" +
                    "\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\7\b\2\2\u03fd\u03ff\5\u0098M\2" +
                    "\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402" +
                    "\5v<\2\u0401\u0403\5\u0098M\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2\2\2" +
                    "\u0403\u0404\3\2\2\2\u0404\u0405\7\t\2\2\u0405\u040b\3\2\2\2\u0406\u040b" +
                    "\5t;\2\u0407\u040b\5r:\2\u0408\u040b\5z>\2\u0409\u040b\5\u0082B\2\u040a" +
                    "\u037f\3\2\2\2\u040a\u0380\3\2\2\2\u040a\u0381\3\2\2\2\u040a\u0382\3\2" +
                    "\2\2\u040a\u0383\3\2\2\2\u040a\u0384\3\2\2\2\u040a\u0385\3\2\2\2\u040a" +
                    "\u0392\3\2\2\2\u040a\u0393\3\2\2\2\u040a\u0394\3\2\2\2\u040a\u03ab\3\2" +
                    "\2\2\u040a\u03b9\3\2\2\2\u040a\u03ce\3\2\2\2\u040a\u03dc\3\2\2\2\u040a" +
                    "\u03ea\3\2\2\2\u040a\u03f8\3\2\2\2\u040a\u0406\3\2\2\2\u040a\u0407\3\2" +
                    "\2\2\u040a\u0408\3\2\2\2\u040a\u0409\3\2\2\2\u040bo\3\2\2\2\u040c\u040e" +
                    "\7\5\2\2\u040d\u040f\5\u0098M\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2" +
                    "\2\u040f\u0410\3\2\2\2\u0410\u0430\5b\62\2\u0411\u0413\7\26\2\2\u0412" +
                    "\u0414\5\u0098M\2\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415" +
                    "\3\2\2\2\u0415\u0430\5b\62\2\u0416\u0418\7\27\2\2\u0417\u0419\5\u0098" +
                    "M\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u041a" +
                    "\u0430\5b\62\2\u041b\u041d\7\30\2\2\u041c\u041e\5\u0098M\2\u041d\u041c" +
                    "\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0430\5b\62\2\u0420" +
                    "\u0422\7\31\2\2\u0421\u0423\5\u0098M\2\u0422\u0421\3\2\2\2\u0422\u0423" +
                    "\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0430\5b\62\2\u0425\u0427\7\32\2\2" +
                    "\u0426\u0428\5\u0098M\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428" +
                    "\u0429\3\2\2\2\u0429\u0430\5b\62\2\u042a\u042c\7\33\2\2\u042b\u042d\5" +
                    "\u0098M\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e\3\2\2\2" +
                    "\u042e\u0430\5b\62\2\u042f\u040c\3\2\2\2\u042f\u0411\3\2\2\2\u042f\u0416" +
                    "\3\2\2\2\u042f\u041b\3\2\2\2\u042f\u0420\3\2\2\2\u042f\u0425\3\2\2\2\u042f" +
                    "\u042a\3\2\2\2\u0430q\3\2\2\2\u0431\u0433\7\b\2\2\u0432\u0434\5\u0098" +
                    "M\2\u0433\u0432\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\3\2\2\2\u0435" +
                    "\u0437\5V,\2\u0436\u0438\5\u0098M\2\u0437\u0436\3\2\2\2\u0437\u0438\3" +
                    "\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\7\t\2\2\u043as\3\2\2\2\u043b\u0440" +
                    "\5@!\2\u043c\u043e\5\u0098M\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2\2\2" +
                    "\u043e\u043f\3\2\2\2\u043f\u0441\5B\"\2\u0440\u043d\3\2\2\2\u0441\u0442" +
                    "\3\2\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443u\3\2\2\2\u0444" +
                    "\u0449\5x=\2\u0445\u0447\5\u0098M\2\u0446\u0445\3\2\2\2\u0446\u0447\3" +
                    "\2\2\2\u0447\u0448\3\2\2\2\u0448\u044a\5\66\34\2\u0449\u0446\3\2\2\2\u0449" +
                    "\u044a\3\2\2\2\u044aw\3\2\2\2\u044b\u044c\5\u0082B\2\u044c\u044d\5\u0098" +
                    "M\2\u044d\u044e\7^\2\2\u044e\u044f\5\u0098M\2\u044f\u0450\5V,\2\u0450" +
                    "y\3\2\2\2\u0451\u0453\5|?\2\u0452\u0454\5\u0098M\2\u0453\u0452\3\2\2\2" +
                    "\u0453\u0454\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457\7\b\2\2\u0456\u0458" +
                    "\5\u0098M\2\u0457\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u045d\3\2\2" +
                    "\2\u0459\u045b\7O\2\2\u045a\u045c\5\u0098M\2\u045b\u045a\3\2\2\2\u045b" +
                    "\u045c\3\2\2\2\u045c\u045e\3\2\2\2\u045d\u0459\3\2\2\2\u045d\u045e\3\2" +
                    "\2\2\u045e\u0470\3\2\2\2\u045f\u0461\5V,\2\u0460\u0462\5\u0098M\2\u0461" +
                    "\u0460\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u046d\3\2\2\2\u0463\u0465\7\4" +
                    "\2\2\u0464\u0466\5\u0098M\2\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466" +
                    "\u0467\3\2\2\2\u0467\u0469\5V,\2\u0468\u046a\5\u0098M\2\u0469\u0468\3" +
                    "\2\2\2\u0469\u046a\3\2\2\2\u046a\u046c\3\2\2\2\u046b\u0463\3\2\2\2\u046c" +
                    "\u046f\3\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0471\3\2" +
                    "\2\2\u046f\u046d\3\2\2\2\u0470\u045f\3\2\2\2\u0470\u0471\3\2\2\2\u0471" +
                    "\u0472\3\2\2\2\u0472\u0473\7\t\2\2\u0473{\3\2\2\2\u0474\u0475\5\u0096" +
                    "L\2\u0475}\3\2\2\2\u0476\u0477\7\n\2\2\u0477\u047d\5v<\2\u0478\u047a\5" +
                    "\u0098M\2\u0479\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\3\2\2\2" +
                    "\u047b\u047c\7\16\2\2\u047c\u047e\5V,\2\u047d\u0479\3\2\2\2\u047d\u047e" +
                    "\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\7\f\2\2\u0480\177\3\2\2\2\u0481" +
                    "\u0483\5\u0098M\2\u0482\u0481\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0484" +
                    "\3\2\2\2\u0484\u0486\7\34\2\2\u0485\u0487\5\u0098M\2\u0486\u0485\3\2\2" +
                    "\2\u0486\u0487\3\2\2\2\u0487\u048c\3\2\2\2\u0488\u0489\5\u008cG\2\u0489" +
                    "\u048a\t\5\2\2\u048a\u048d\3\2\2\2\u048b\u048d\5\u008cG\2\u048c\u0488" +
                    "\3\2\2\2\u048c\u048b\3\2\2\2\u048d\u0081\3\2\2\2\u048e\u048f\5\u0096L" +
                    "\2\u048f\u0083\3\2\2\2\u0490\u0493\5\u0090I\2\u0491\u0493\5\u008eH\2\u0492" +
                    "\u0490\3\2\2\2\u0492\u0491\3\2\2\2\u0493\u0085\3\2\2\2\u0494\u0496\7\36" +
                    "\2\2\u0495\u0497\5\u0098M\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2\u0497" +
                    "\u04b9\3\2\2\2\u0498\u049a\5\u008cG\2\u0499\u049b\5\u0098M\2\u049a\u0499" +
                    "\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049e\7\r\2\2\u049d" +
                    "\u049f\5\u0098M\2\u049e\u049d\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a0" +
                    "\3\2\2\2\u04a0\u04a2\5V,\2\u04a1\u04a3\5\u0098M\2\u04a2\u04a1\3\2\2\2" +
                    "\u04a2\u04a3\3\2\2\2\u04a3\u04b6\3\2\2\2\u04a4\u04a6\7\4\2\2\u04a5\u04a7" +
                    "\5\u0098M\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\3\2\2" +
                    "\2\u04a8\u04aa\5\u008cG\2\u04a9\u04ab\5\u0098M\2\u04aa\u04a9\3\2\2\2\u04aa" +
                    "\u04ab\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\7\r\2\2\u04ad\u04af\5\u0098" +
                    "M\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0" +
                    "\u04b2\5V,\2\u04b1\u04b3\5\u0098M\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3" +
                    "\2\2\2\u04b3\u04b5\3\2\2\2\u04b4\u04a4\3\2\2\2\u04b5\u04b8\3\2\2\2\u04b6" +
                    "\u04b4\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8\u04b6\3\2" +
                    "\2\2\u04b9\u0498\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb" +
                    "\u04bc\7\37\2\2\u04bc\u0087\3\2\2\2\u04bd\u04c0\7 \2\2\u04be\u04c1\5\u0096" +
                    "L\2\u04bf\u04c1\79\2\2\u04c0\u04be\3\2\2\2\u04c0\u04bf\3\2\2\2\u04c1\u0089" +
                    "\3\2\2\2\u04c2\u04c7\5n8\2\u04c3\u04c5\5\u0098M\2\u04c4\u04c3\3\2\2\2" +
                    "\u04c4\u04c5\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c8\5\u0080A\2\u04c7" +
                    "\u04c4\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2" +
                    "\2\2\u04ca\u008b\3\2\2\2\u04cb\u04cc\5\u0096L\2\u04cc\u008d\3\2\2\2\u04cd" +
                    "\u04ce\t\6\2\2\u04ce\u008f\3\2\2\2\u04cf\u04d2\5\u0092J\2\u04d0\u04d2" +
                    "\5\u0094K\2\u04d1\u04cf\3\2\2\2\u04d1\u04d0\3\2\2\2\u04d2\u0091\3\2\2" +
                    "\2\u04d3\u04d5\t\7\2\2\u04d4\u04d3\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d4" +
                    "\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8\u04da\79\2\2\u04d9" +
                    "\u04d4\3\2\2\2\u04d9\u04d8\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04de\t\b" +
                    "\2\2\u04dc\u04de\t\b\2\2\u04dd\u04db\3\2\2\2\u04dd\u04dc\3\2\2\2\u04de" +
                    "\u04df\3\2\2\2\u04df\u04e0\t\t\2\2\u04e0\u0093\3\2\2\2\u04e1\u04e3\7?" +
                    "\2\2\u04e2\u04e1\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4" +
                    "\u04e5\3\2\2\2\u04e5\u04e9\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e7\u04e9\79" +
                    "\2\2\u04e8\u04e4\3\2\2\2\u04e8\u04e7\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea" +
                    "\u04eb\7\34\2\2\u04eb\u04ec\t\t\2\2\u04ec\u0095\3\2\2\2\u04ed\u04ee\t" +
                    "\n\2\2\u04ee\u0097\3\2\2\2\u04ef\u04f1\7p\2\2\u04f0\u04ef\3\2\2\2\u04f1" +
                    "\u04f2\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u0099\3\2" +
                    "\2\2\u04f4\u04f5\t\13\2\2\u04f5\u009b\3\2\2\2\u04f6\u04f7\t\f\2\2\u04f7" +
                    "\u009d\3\2\2\2\u04f8\u04f9\t\r\2\2\u04f9\u009f\3\2\2\2\u04fa\u04fb\7?" +
                    "\2\2\u04fb\u00a1\3\2\2\2\u00da\u00a3\u00a7\u00aa\u00ad\u00b5\u00ba\u00bf" +
                    "\u00c4\u00cb\u00d1\u00d4\u00df\u00e3\u00e7\u00eb\u00ee\u00f2\u00fc\u0104" +
                    "\u0113\u0117\u0121\u0133\u013b\u0146\u0149\u014f\u0153\u0158\u015f\u0166" +
                    "\u016c\u016e\u017a\u0180\u0185\u018a\u018e\u0192\u0197\u019c\u01a0\u01a5" +
                    "\u01a8\u01b1\u01ba\u01bf\u01cf\u01d1\u01d9\u01dd\u01e2\u01e7\u01eb\u01f0" +
                    "\u01f6\u01fb\u0202\u0206\u020a\u020c\u0210\u0212\u0216\u0218\u021e\u0224" +
                    "\u0228\u022b\u022e\u0232\u0238\u023c\u023f\u0242\u0248\u024b\u024e\u0252" +
                    "\u0258\u025b\u025e\u0262\u0266\u0269\u026c\u026f\u0272\u0278\u027d\u0281" +
                    "\u0284\u0289\u028e\u0293\u029b\u029f\u02a1\u02a5\u02a9\u02ab\u02ad\u02bd" +
                    "\u02c8\u02d3\u02dc\u02e3\u02e8\u02ed\u02f1\u02f5\u02f9\u02fc\u02fe\u0303" +
                    "\u0307\u030b\u030f\u0313\u0317\u031a\u031c\u0321\u0325\u032a\u032f\u0333" +
                    "\u033a\u0341\u0345\u0349\u034d\u0360\u0363\u0372\u0374\u037a\u037c\u0387" +
                    "\u038b\u038f\u0396\u039a\u039e\u03a2\u03a6\u03ad\u03b1\u03b5\u03bb\u03bf" +
                    "\u03c3\u03c6\u03ca\u03d0\u03d4\u03d8\u03de\u03e2\u03e6\u03ec\u03f0\u03f4" +
                    "\u03fa\u03fe\u0402\u040a\u040e\u0413\u0418\u041d\u0422\u0427\u042c\u042f" +
                    "\u0433\u0437\u043d\u0442\u0446\u0449\u0453\u0457\u045b\u045d\u0461\u0465" +
                    "\u0469\u046d\u0470\u0479\u047d\u0482\u0486\u048c\u0492\u0496\u049a\u049e" +
                    "\u04a2\u04a6\u04aa\u04ae\u04b2\u04b6\u04b9\u04c0\u04c4\u04c9\u04d1\u04d6" +
                    "\u04d9\u04dd\u04e4\u04e8\u04f2";
    public static final ATN _ATN =
            new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    private static final String[] _LITERAL_NAMES = {
            null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "'?'",
            "']'", "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'=~'",
            "'<>'", "'!='", "'<'", "'>'", "'<='", "'>='", "'.'", "'!'", "'{'", "'}'",
            "'$'", "'E'", "'e'", "'⟨'", "'〈'", "'﹤'", "'＜'", "'⟩'", "'〉'",
            "'﹥'", "'＞'", "'­'", "'�?'", "'‑'", "'‒'", "'–'", "'—'",
            "'―'", "'−'", "'﹘'", "'﹣'", "'�?'"
    };
    private static final String[] _SYMBOLIC_NAMES = {
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, "StringLiteral", "EscapedChar", "HexInteger",
            "DecimalInteger", "OctalInteger", "HexString", "DigitString", "OctalString",
            "HexDigit", "Digit", "OctDigit", "UNION", "ALL", "OPTIONAL", "MATCH",
            "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DELETE", "DETACH", "REMOVE",
            "WITH", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "DESCENDING",
            "DESC", "ASCENDING", "ASC", "WHERE", "OR", "XOR", "AND", "NOT", "IN",
            "STARTS", "ENDS", "CONTAINS", "IS", "NULL", "TRUE", "FALSE", "COUNT",
            "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "UnescapedSymbolicName",
            "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "WHITESPACE",
            "Comment", "L_0X"
    };
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    static {
        RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION);
    }

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }

    public CypherParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() {
        return "Cypher.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }

    public final CypherContext cypher() throws RecognitionException {
        CypherContext _localctx = new CypherContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_cypher);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(161);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(160);
                        sp();
                    }
                }

                setState(163);
                statement();
                setState(168);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 2, _ctx)) {
                    case 1: {
                        setState(165);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(164);
                                sp();
                            }
                        }

                        setState(167);
                        match(T__0);
                    }
                    break;
                }
                setState(171);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(170);
                        sp();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(173);
                query();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QueryContext query() throws RecognitionException {
        QueryContext _localctx = new QueryContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_query);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(175);
                regularQuery();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RegularQueryContext regularQuery() throws RecognitionException {
        RegularQueryContext _localctx = new RegularQueryContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_regularQuery);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(177);
                singleQuery();
                setState(184);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 5, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(179);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(178);
                                        sp();
                                    }
                                }

                                setState(181);
                                union();
                            }
                        }
                    }
                    setState(186);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 5, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleQueryContext singleQuery() throws RecognitionException {
        SingleQueryContext _localctx = new SingleQueryContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_singleQuery);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(187);
                clause();
                setState(194);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 7, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(189);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(188);
                                        sp();
                                    }
                                }

                                setState(191);
                                clause();
                            }
                        }
                    }
                    setState(196);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 7, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final UnionContext union() throws RecognitionException {
        UnionContext _localctx = new UnionContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_union);
        int _la;
        try {
            setState(210);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 10, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(197);
                        match(UNION);
                        setState(198);
                        sp();
                        setState(199);
                        match(ALL);
                        setState(201);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(200);
                                sp();
                            }
                        }

                        setState(203);
                        singleQuery();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(205);
                        match(UNION);
                        setState(207);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(206);
                                sp();
                            }
                        }

                        setState(209);
                        singleQuery();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ClauseContext clause() throws RecognitionException {
        ClauseContext _localctx = new ClauseContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_clause);
        try {
            setState(221);
            switch (_input.LA(1)) {
                case OPTIONAL:
                case MATCH:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(212);
                    match();
                }
                break;
                case UNWIND:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(213);
                    unwind();
                }
                break;
                case MERGE:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(214);
                    merge();
                }
                break;
                case CREATE:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(215);
                    create();
                }
                break;
                case SET:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(216);
                    set();
                }
                break;
                case DELETE:
                case DETACH:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(217);
                    delete();
                }
                break;
                case REMOVE:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(218);
                    remove();
                }
                break;
                case WITH:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(219);
                    with();
                }
                break;
                case RETURN:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(220);
                    returnMain();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MatchContext match() throws RecognitionException {
        MatchContext _localctx = new MatchContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_match);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(225);
                _la = _input.LA(1);
                if (_la == OPTIONAL) {
                    {
                        setState(223);
                        match(OPTIONAL);
                        setState(224);
                        sp();
                    }
                }

                setState(227);
                match(MATCH);
                setState(229);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(228);
                        sp();
                    }
                }

                setState(231);
                pattern();
                setState(236);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 15, _ctx)) {
                    case 1: {
                        setState(233);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(232);
                                sp();
                            }
                        }

                        setState(235);
                        where();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final UnwindContext unwind() throws RecognitionException {
        UnwindContext _localctx = new UnwindContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_unwind);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(238);
                match(UNWIND);
                setState(240);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 16, _ctx)) {
                    case 1: {
                        setState(239);
                        sp();
                    }
                    break;
                }
                setState(242);
                expression();
                setState(243);
                sp();
                setState(244);
                match(AS);
                setState(245);
                sp();
                setState(246);
                variable();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MergeContext merge() throws RecognitionException {
        MergeContext _localctx = new MergeContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_merge);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(248);
                match(MERGE);
                setState(250);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(249);
                        sp();
                    }
                }

                setState(252);
                patternPart();
                setState(258);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 18, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(253);
                                sp();
                                setState(254);
                                mergeAction();
                            }
                        }
                    }
                    setState(260);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 18, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MergeActionContext mergeAction() throws RecognitionException {
        MergeActionContext _localctx = new MergeActionContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_mergeAction);
        try {
            setState(273);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 19, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(261);
                        match(ON);
                        setState(262);
                        sp();
                        setState(263);
                        match(MATCH);
                        setState(264);
                        sp();
                        setState(265);
                        set();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(267);
                        match(ON);
                        setState(268);
                        sp();
                        setState(269);
                        match(CREATE);
                        setState(270);
                        sp();
                        setState(271);
                        set();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CreateContext create() throws RecognitionException {
        CreateContext _localctx = new CreateContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_create);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(275);
                match(CREATE);
                setState(277);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(276);
                        sp();
                    }
                }

                setState(279);
                pattern();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SetContext set() throws RecognitionException {
        SetContext _localctx = new SetContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_set);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(281);
                match(SET);
                setState(282);
                setItem();
                setState(287);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T__1) {
                    {
                        {
                            setState(283);
                            match(T__1);
                            setState(284);
                            setItem();
                        }
                    }
                    setState(289);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SetItemContext setItem() throws RecognitionException {
        SetItemContext _localctx = new SetItemContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_setItem);
        try {
            setState(305);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 22, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(290);
                        propertyExpression();
                        setState(291);
                        match(T__2);
                        setState(292);
                        expression();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(294);
                        variable();
                        setState(295);
                        match(T__2);
                        setState(296);
                        expression();
                    }
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    {
                        setState(298);
                        variable();
                        setState(299);
                        match(T__3);
                        setState(300);
                        expression();
                    }
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    {
                        setState(302);
                        variable();
                        setState(303);
                        nodeLabels();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DeleteContext delete() throws RecognitionException {
        DeleteContext _localctx = new DeleteContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_delete);
        int _la;
        try {
            setState(327);
            switch (_input.LA(1)) {
                case DELETE:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(307);
                        match(DELETE);
                        setState(308);
                        expression();
                        setState(313);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T__1) {
                            {
                                {
                                    setState(309);
                                    match(T__1);
                                    setState(310);
                                    expression();
                                }
                            }
                            setState(315);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }
                break;
                case DETACH:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(316);
                        match(DETACH);
                        setState(317);
                        sp();
                        setState(318);
                        match(DELETE);
                        setState(319);
                        expression();
                        setState(324);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T__1) {
                            {
                                {
                                    setState(320);
                                    match(T__1);
                                    setState(321);
                                    expression();
                                }
                            }
                            setState(326);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RemoveContext remove() throws RecognitionException {
        RemoveContext _localctx = new RemoveContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_remove);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(329);
                match(REMOVE);
                setState(330);
                sp();
                setState(331);
                removeItem();
                setState(342);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 28, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(333);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(332);
                                        sp();
                                    }
                                }

                                setState(335);
                                match(T__1);
                                setState(337);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(336);
                                        sp();
                                    }
                                }

                                setState(339);
                                removeItem();
                            }
                        }
                    }
                    setState(344);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 28, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RemoveItemContext removeItem() throws RecognitionException {
        RemoveItemContext _localctx = new RemoveItemContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_removeItem);
        try {
            setState(349);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 29, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(345);
                        variable();
                        setState(346);
                        nodeLabels();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(348);
                    propertyExpression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WithContext with() throws RecognitionException {
        WithContext _localctx = new WithContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_with);
        int _la;
        try {
            setState(364);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 32, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(351);
                        match(WITH);
                        setState(352);
                        match(DISTINCT);
                        setState(353);
                        sp();
                        setState(354);
                        returnBody();
                        setState(356);
                        _la = _input.LA(1);
                        if (_la == WHERE) {
                            {
                                setState(355);
                                where();
                            }
                        }

                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(358);
                        match(WITH);
                        setState(359);
                        sp();
                        setState(360);
                        returnBody();
                        setState(362);
                        _la = _input.LA(1);
                        if (_la == WHERE) {
                            {
                                setState(361);
                                where();
                            }
                        }

                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ReturnMainContext returnMain() throws RecognitionException {
        ReturnMainContext _localctx = new ReturnMainContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_returnMain);
        try {
            setState(376);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 33, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(366);
                        match(RETURN);
                        setState(367);
                        sp();
                        setState(368);
                        match(DISTINCT);
                        setState(369);
                        sp();
                        setState(370);
                        returnBody();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(372);
                        match(RETURN);
                        setState(373);
                        sp();
                        setState(374);
                        returnBody();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ReturnBodyContext returnBody() throws RecognitionException {
        ReturnBodyContext _localctx = new ReturnBodyContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_returnBody);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(378);
                returnItems();
                setState(382);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 34, _ctx)) {
                    case 1: {
                        setState(379);
                        sp();
                        setState(380);
                        order();
                    }
                    break;
                }
                setState(387);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 35, _ctx)) {
                    case 1: {
                        setState(384);
                        sp();
                        setState(385);
                        skip();
                    }
                    break;
                }
                setState(392);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 36, _ctx)) {
                    case 1: {
                        setState(389);
                        sp();
                        setState(390);
                        limit();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ReturnItemsContext returnItems() throws RecognitionException {
        ReturnItemsContext _localctx = new ReturnItemsContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_returnItems);
        int _la;
        try {
            int _alt;
            setState(422);
            switch (_input.LA(1)) {
                case T__4:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(394);
                        match(T__4);
                        setState(405);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 39, _ctx);
                        while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(396);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(395);
                                                sp();
                                            }
                                        }

                                        setState(398);
                                        match(T__1);
                                        setState(400);
                                        _errHandler.sync(this);
                                        switch (getInterpreter().adaptivePredict(_input, 38, _ctx)) {
                                            case 1: {
                                                setState(399);
                                                sp();
                                            }
                                            break;
                                        }
                                        setState(402);
                                        returnItem();
                                    }
                                }
                            }
                            setState(407);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 39, _ctx);
                        }
                    }
                }
                break;
                case T__5:
                case T__7:
                case T__13:
                case T__14:
                case T__25:
                case T__27:
                case T__29:
                case StringLiteral:
                case HexInteger:
                case DecimalInteger:
                case OctalInteger:
                case HexString:
                case Digit:
                case UNION:
                case ALL:
                case OPTIONAL:
                case MATCH:
                case UNWIND:
                case AS:
                case MERGE:
                case ON:
                case CREATE:
                case SET:
                case DELETE:
                case DETACH:
                case REMOVE:
                case WITH:
                case DISTINCT:
                case RETURN:
                case ORDER:
                case BY:
                case L_SKIP:
                case LIMIT:
                case DESCENDING:
                case DESC:
                case ASCENDING:
                case ASC:
                case WHERE:
                case OR:
                case XOR:
                case AND:
                case NOT:
                case IN:
                case STARTS:
                case ENDS:
                case CONTAINS:
                case IS:
                case NULL:
                case TRUE:
                case FALSE:
                case COUNT:
                case FILTER:
                case EXTRACT:
                case ANY:
                case NONE:
                case SINGLE:
                case UnescapedSymbolicName:
                case EscapedSymbolicName:
                case WHITESPACE:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(408);
                        returnItem();
                        setState(419);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 42, _ctx);
                        while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(410);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(409);
                                                sp();
                                            }
                                        }

                                        setState(412);
                                        match(T__1);
                                        setState(414);
                                        _errHandler.sync(this);
                                        switch (getInterpreter().adaptivePredict(_input, 41, _ctx)) {
                                            case 1: {
                                                setState(413);
                                                sp();
                                            }
                                            break;
                                        }
                                        setState(416);
                                        returnItem();
                                    }
                                }
                            }
                            setState(421);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 42, _ctx);
                        }
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ReturnItemContext returnItem() throws RecognitionException {
        ReturnItemContext _localctx = new ReturnItemContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_returnItem);
        try {
            setState(431);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 44, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(424);
                        expression();
                        setState(425);
                        sp();
                        setState(426);
                        match(AS);
                        setState(427);
                        sp();
                        setState(428);
                        variable();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(430);
                    expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final OrderContext order() throws RecognitionException {
        OrderContext _localctx = new OrderContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_order);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(433);
                match(ORDER);
                setState(434);
                sp();
                setState(435);
                match(BY);
                setState(436);
                sp();
                setState(437);
                sortItem();
                setState(445);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T__1) {
                    {
                        {
                            setState(438);
                            match(T__1);
                            setState(440);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 45, _ctx)) {
                                case 1: {
                                    setState(439);
                                    sp();
                                }
                                break;
                            }
                            setState(442);
                            sortItem();
                        }
                    }
                    setState(447);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SkipContext skip() throws RecognitionException {
        SkipContext _localctx = new SkipContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_skip);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(448);
                match(L_SKIP);
                setState(449);
                sp();
                setState(450);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final LimitContext limit() throws RecognitionException {
        LimitContext _localctx = new LimitContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_limit);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(452);
                match(LIMIT);
                setState(453);
                sp();
                setState(454);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SortItemContext sortItem() throws RecognitionException {
        SortItemContext _localctx = new SortItemContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_sortItem);
        int _la;
        try {
            setState(463);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 48, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(456);
                        expression();
                        setState(457);
                        _la = _input.LA(1);
                        if (!(_la == DESCENDING || _la == DESC)) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(459);
                        expression();
                        setState(461);
                        _la = _input.LA(1);
                        if (_la == ASCENDING || _la == ASC) {
                            {
                                setState(460);
                                _la = _input.LA(1);
                                if (!(_la == ASCENDING || _la == ASC)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    consume();
                                }
                            }
                        }

                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WhereContext where() throws RecognitionException {
        WhereContext _localctx = new WhereContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_where);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(465);
                match(WHERE);
                setState(466);
                sp();
                setState(467);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PatternContext pattern() throws RecognitionException {
        PatternContext _localctx = new PatternContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_pattern);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(469);
                patternPart();
                setState(480);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 51, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(471);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(470);
                                        sp();
                                    }
                                }

                                setState(473);
                                match(T__1);
                                setState(475);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(474);
                                        sp();
                                    }
                                }

                                setState(477);
                                patternPart();
                            }
                        }
                    }
                    setState(482);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 51, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PatternPartContext patternPart() throws RecognitionException {
        PatternPartContext _localctx = new PatternPartContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_patternPart);
        int _la;
        try {
            setState(494);
            switch (_input.LA(1)) {
                case HexString:
                case UNION:
                case ALL:
                case OPTIONAL:
                case MATCH:
                case UNWIND:
                case AS:
                case MERGE:
                case ON:
                case CREATE:
                case SET:
                case DELETE:
                case DETACH:
                case REMOVE:
                case WITH:
                case DISTINCT:
                case RETURN:
                case ORDER:
                case BY:
                case L_SKIP:
                case LIMIT:
                case DESCENDING:
                case DESC:
                case ASCENDING:
                case ASC:
                case WHERE:
                case OR:
                case XOR:
                case AND:
                case NOT:
                case IN:
                case STARTS:
                case ENDS:
                case CONTAINS:
                case IS:
                case NULL:
                case TRUE:
                case FALSE:
                case COUNT:
                case FILTER:
                case EXTRACT:
                case ANY:
                case NONE:
                case SINGLE:
                case UnescapedSymbolicName:
                case EscapedSymbolicName:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(483);
                        variable();
                        setState(485);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(484);
                                sp();
                            }
                        }

                        setState(487);
                        match(T__2);
                        setState(489);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(488);
                                sp();
                            }
                        }

                        setState(491);
                        anonymousPatternPart();
                    }
                }
                break;
                case T__5:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(493);
                    anonymousPatternPart();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AnonymousPatternPartContext anonymousPatternPart() throws RecognitionException {
        AnonymousPatternPartContext _localctx = new AnonymousPatternPartContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_anonymousPatternPart);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(496);
                patternElement();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PatternElementContext patternElement() throws RecognitionException {
        PatternElementContext _localctx = new PatternElementContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_patternElement);
        int _la;
        try {
            int _alt;
            setState(512);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 57, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(498);
                        nodePattern();
                        setState(505);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 56, _ctx);
                        while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(500);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(499);
                                                sp();
                                            }
                                        }

                                        setState(502);
                                        patternElementChain();
                                    }
                                }
                            }
                            setState(507);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 56, _ctx);
                        }
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(508);
                        match(T__5);
                        setState(509);
                        patternElement();
                        setState(510);
                        match(T__6);
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NodePatternContext nodePattern() throws RecognitionException {
        NodePatternContext _localctx = new NodePatternContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_nodePattern);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(514);
                match(T__5);
                setState(516);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(515);
                        sp();
                    }
                }

                setState(522);
                _la = _input.LA(1);
                if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0)) {
                    {
                        setState(518);
                        variable();
                        setState(520);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(519);
                                sp();
                            }
                        }

                    }
                }

                setState(528);
                _la = _input.LA(1);
                if (_la == T__10) {
                    {
                        setState(524);
                        nodeLabels();
                        setState(526);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(525);
                                sp();
                            }
                        }

                    }
                }

                setState(534);
                _la = _input.LA(1);
                if (_la == T__27 || _la == T__29) {
                    {
                        setState(530);
                        properties();
                        setState(532);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(531);
                                sp();
                            }
                        }

                    }
                }

                setState(536);
                match(T__6);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PatternElementChainContext patternElementChain() throws RecognitionException {
        PatternElementChainContext _localctx = new PatternElementChainContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_patternElementChain);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(538);
                relationshipPattern();
                setState(540);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(539);
                        sp();
                    }
                }

                setState(542);
                nodePattern();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelationshipPatternContext relationshipPattern() throws RecognitionException {
        RelationshipPatternContext _localctx = new RelationshipPatternContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_relationshipPattern);
        int _la;
        try {
            setState(608);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 82, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(544);
                        leftArrowHead();
                        setState(546);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(545);
                                sp();
                            }
                        }

                        setState(548);
                        dash();
                        setState(550);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 67, _ctx)) {
                            case 1: {
                                setState(549);
                                sp();
                            }
                            break;
                        }
                        setState(553);
                        _la = _input.LA(1);
                        if (_la == T__7) {
                            {
                                setState(552);
                                relationshipDetail();
                            }
                        }

                        setState(556);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(555);
                                sp();
                            }
                        }

                        setState(558);
                        dash();
                        setState(560);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(559);
                                sp();
                            }
                        }

                        setState(562);
                        rightArrowHead();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(564);
                        leftArrowHead();
                        setState(566);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(565);
                                sp();
                            }
                        }

                        setState(568);
                        dash();
                        setState(570);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 72, _ctx)) {
                            case 1: {
                                setState(569);
                                sp();
                            }
                            break;
                        }
                        setState(573);
                        _la = _input.LA(1);
                        if (_la == T__7) {
                            {
                                setState(572);
                                relationshipDetail();
                            }
                        }

                        setState(576);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(575);
                                sp();
                            }
                        }

                        setState(578);
                        dash();
                    }
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    {
                        setState(580);
                        dash();
                        setState(582);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 75, _ctx)) {
                            case 1: {
                                setState(581);
                                sp();
                            }
                            break;
                        }
                        setState(585);
                        _la = _input.LA(1);
                        if (_la == T__7) {
                            {
                                setState(584);
                                relationshipDetail();
                            }
                        }

                        setState(588);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(587);
                                sp();
                            }
                        }

                        setState(590);
                        dash();
                        setState(592);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(591);
                                sp();
                            }
                        }

                        setState(594);
                        rightArrowHead();
                    }
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    {
                        setState(596);
                        dash();
                        setState(598);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 79, _ctx)) {
                            case 1: {
                                setState(597);
                                sp();
                            }
                            break;
                        }
                        setState(601);
                        _la = _input.LA(1);
                        if (_la == T__7) {
                            {
                                setState(600);
                                relationshipDetail();
                            }
                        }

                        setState(604);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(603);
                                sp();
                            }
                        }

                        setState(606);
                        dash();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelationshipDetailContext relationshipDetail() throws RecognitionException {
        RelationshipDetailContext _localctx = new RelationshipDetailContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_relationshipDetail);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(610);
                match(T__7);
                setState(612);
                _la = _input.LA(1);
                if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0)) {
                    {
                        setState(611);
                        variable();
                    }
                }

                setState(615);
                _la = _input.LA(1);
                if (_la == T__8) {
                    {
                        setState(614);
                        match(T__8);
                    }
                }

                setState(618);
                _la = _input.LA(1);
                if (_la == T__10) {
                    {
                        setState(617);
                        relationshipTypes();
                    }
                }

                setState(621);
                _la = _input.LA(1);
                if (_la == T__4) {
                    {
                        setState(620);
                        rangeLiteral();
                    }
                }

                setState(624);
                _la = _input.LA(1);
                if (_la == T__27 || _la == T__29) {
                    {
                        setState(623);
                        properties();
                    }
                }

                setState(626);
                match(T__9);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertiesContext properties() throws RecognitionException {
        PropertiesContext _localctx = new PropertiesContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_properties);
        try {
            setState(630);
            switch (_input.LA(1)) {
                case T__27:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(628);
                    mapLiteral();
                }
                break;
                case T__29:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(629);
                    parameter();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelationshipTypesContext relationshipTypes() throws RecognitionException {
        RelationshipTypesContext _localctx = new RelationshipTypesContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_relationshipTypes);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(632);
                match(T__10);
                setState(633);
                relTypeName();
                setState(647);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T__11 || _la == WHITESPACE) {
                    {
                        {
                            setState(635);
                            _la = _input.LA(1);
                            if (_la == WHITESPACE) {
                                {
                                    setState(634);
                                    sp();
                                }
                            }

                            setState(637);
                            match(T__11);
                            setState(639);
                            _la = _input.LA(1);
                            if (_la == T__10) {
                                {
                                    setState(638);
                                    match(T__10);
                                }
                            }

                            setState(642);
                            _la = _input.LA(1);
                            if (_la == WHITESPACE) {
                                {
                                    setState(641);
                                    sp();
                                }
                            }

                            setState(644);
                            relTypeName();
                        }
                    }
                    setState(649);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NodeLabelsContext nodeLabels() throws RecognitionException {
        NodeLabelsContext _localctx = new NodeLabelsContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_nodeLabels);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(650);
                nodeLabel();
                setState(657);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 94, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(652);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(651);
                                        sp();
                                    }
                                }

                                setState(654);
                                nodeLabel();
                            }
                        }
                    }
                    setState(659);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 94, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NodeLabelContext nodeLabel() throws RecognitionException {
        NodeLabelContext _localctx = new NodeLabelContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_nodeLabel);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(660);
                match(T__10);
                setState(661);
                labelName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RangeLiteralContext rangeLiteral() throws RecognitionException {
        RangeLiteralContext _localctx = new RangeLiteralContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_rangeLiteral);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(663);
                match(T__4);
                setState(665);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(664);
                        sp();
                    }
                }

                setState(671);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger))) != 0)) {
                    {
                        setState(667);
                        integerLiteral();
                        setState(669);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(668);
                                sp();
                            }
                        }

                    }
                }

                setState(683);
                _la = _input.LA(1);
                if (_la == T__12) {
                    {
                        setState(673);
                        match(T__12);
                        setState(675);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(674);
                                sp();
                            }
                        }

                        setState(681);
                        _la = _input.LA(1);
                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger))) != 0)) {
                            {
                                setState(677);
                                integerLiteral();
                                setState(679);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(678);
                                        sp();
                                    }
                                }

                            }
                        }

                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final LabelNameContext labelName() throws RecognitionException {
        LabelNameContext _localctx = new LabelNameContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_labelName);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(685);
                symbolicName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelTypeNameContext relTypeName() throws RecognitionException {
        RelTypeNameContext _localctx = new RelTypeNameContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_relTypeName);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(687);
                symbolicName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ExpressionContext expression() throws RecognitionException {
        ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(689);
                expression12();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression12Context expression12() throws RecognitionException {
        Expression12Context _localctx = new Expression12Context(_ctx, getState());
        enterRule(_localctx, 86, RULE_expression12);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(691);
                expression11();
                setState(699);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 102, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(692);
                                sp();
                                setState(693);
                                match(OR);
                                setState(694);
                                sp();
                                setState(695);
                                expression11();
                            }
                        }
                    }
                    setState(701);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 102, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression11Context expression11() throws RecognitionException {
        Expression11Context _localctx = new Expression11Context(_ctx, getState());
        enterRule(_localctx, 88, RULE_expression11);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(702);
                expression10();
                setState(710);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 103, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(703);
                                sp();
                                setState(704);
                                match(XOR);
                                setState(705);
                                sp();
                                setState(706);
                                expression10();
                            }
                        }
                    }
                    setState(712);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 103, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression10Context expression10() throws RecognitionException {
        Expression10Context _localctx = new Expression10Context(_ctx, getState());
        enterRule(_localctx, 90, RULE_expression10);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(713);
                expression9();
                setState(721);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 104, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(714);
                                sp();
                                setState(715);
                                match(AND);
                                setState(716);
                                sp();
                                setState(717);
                                expression9();
                            }
                        }
                    }
                    setState(723);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 104, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression9Context expression9() throws RecognitionException {
        Expression9Context _localctx = new Expression9Context(_ctx, getState());
        enterRule(_localctx, 92, RULE_expression9);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(730);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == WHITESPACE) {
                    {
                        {
                            setState(724);
                            sp();
                            setState(725);
                            match(NOT);
                            setState(726);
                            sp();
                        }
                    }
                    setState(732);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(733);
                expression8();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression8Context expression8() throws RecognitionException {
        Expression8Context _localctx = new Expression8Context(_ctx, getState());
        enterRule(_localctx, 94, RULE_expression8);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(735);
                expression7();
                setState(742);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 107, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(737);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(736);
                                        sp();
                                    }
                                }

                                setState(739);
                                partialComparisonExpression();
                            }
                        }
                    }
                    setState(744);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 107, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression7Context expression7() throws RecognitionException {
        Expression7Context _localctx = new Expression7Context(_ctx, getState());
        enterRule(_localctx, 96, RULE_expression7);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(745);
                expression6();
                setState(764);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 113, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            setState(762);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 112, _ctx)) {
                                case 1: {
                                    {
                                        setState(747);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(746);
                                                sp();
                                            }
                                        }

                                        setState(749);
                                        match(T__13);
                                        setState(751);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(750);
                                                sp();
                                            }
                                        }

                                        setState(753);
                                        expression6();
                                    }
                                }
                                break;
                                case 2: {
                                    {
                                        setState(755);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(754);
                                                sp();
                                            }
                                        }

                                        setState(757);
                                        match(T__14);
                                        setState(759);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(758);
                                                sp();
                                            }
                                        }

                                        setState(761);
                                        expression6();
                                    }
                                }
                                break;
                            }
                        }
                    }
                    setState(766);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 113, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression6Context expression6() throws RecognitionException {
        Expression6Context _localctx = new Expression6Context(_ctx, getState());
        enterRule(_localctx, 98, RULE_expression6);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(767);
                expression5();
                setState(794);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 121, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            setState(792);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 120, _ctx)) {
                                case 1: {
                                    {
                                        setState(769);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(768);
                                                sp();
                                            }
                                        }

                                        setState(771);
                                        match(T__4);
                                        setState(773);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(772);
                                                sp();
                                            }
                                        }

                                        setState(775);
                                        expression5();
                                    }
                                }
                                break;
                                case 2: {
                                    {
                                        setState(777);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(776);
                                                sp();
                                            }
                                        }

                                        setState(779);
                                        match(T__15);
                                        setState(781);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(780);
                                                sp();
                                            }
                                        }

                                        setState(783);
                                        expression5();
                                    }
                                }
                                break;
                                case 3: {
                                    {
                                        setState(785);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(784);
                                                sp();
                                            }
                                        }

                                        setState(787);
                                        match(T__16);
                                        setState(789);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(788);
                                                sp();
                                            }
                                        }

                                        setState(791);
                                        expression5();
                                    }
                                }
                                break;
                            }
                        }
                    }
                    setState(796);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 121, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression5Context expression5() throws RecognitionException {
        Expression5Context _localctx = new Expression5Context(_ctx, getState());
        enterRule(_localctx, 100, RULE_expression5);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(797);
                expression4();
                setState(808);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 124, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(799);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(798);
                                        sp();
                                    }
                                }

                                setState(801);
                                match(T__17);
                                setState(803);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(802);
                                        sp();
                                    }
                                }

                                setState(805);
                                expression4();
                            }
                        }
                    }
                    setState(810);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 124, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression4Context expression4() throws RecognitionException {
        Expression4Context _localctx = new Expression4Context(_ctx, getState());
        enterRule(_localctx, 102, RULE_expression4);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(817);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T__13 || _la == T__14) {
                    {
                        {
                            setState(811);
                            _la = _input.LA(1);
                            if (!(_la == T__13 || _la == T__14)) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                            setState(813);
                            _la = _input.LA(1);
                            if (_la == WHITESPACE) {
                                {
                                    setState(812);
                                    sp();
                                }
                            }

                        }
                    }
                    setState(819);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(820);
                expression3();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression3Context expression3() throws RecognitionException {
        Expression3Context _localctx = new Expression3Context(_ctx, getState());
        enterRule(_localctx, 104, RULE_expression3);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(822);
                expression2();
                setState(882);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 135, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            setState(880);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 134, _ctx)) {
                                case 1: {
                                    {
                                        setState(824);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(823);
                                                sp();
                                            }
                                        }

                                        setState(826);
                                        match(T__7);
                                        setState(827);
                                        expression();
                                        setState(828);
                                        match(T__9);
                                    }
                                }
                                break;
                                case 2: {
                                    {
                                        setState(831);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(830);
                                                sp();
                                            }
                                        }

                                        setState(833);
                                        match(T__7);
                                        setState(835);
                                        _la = _input.LA(1);
                                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << StringLiteral) | (1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger) | (1L << HexString) | (1L << Digit) | (1L << UNION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ALL - 64)) | (1L << (OPTIONAL - 64)) | (1L << (MATCH - 64)) | (1L << (UNWIND - 64)) | (1L << (AS - 64)) | (1L << (MERGE - 64)) | (1L << (ON - 64)) | (1L << (CREATE - 64)) | (1L << (SET - 64)) | (1L << (DELETE - 64)) | (1L << (DETACH - 64)) | (1L << (REMOVE - 64)) | (1L << (WITH - 64)) | (1L << (DISTINCT - 64)) | (1L << (RETURN - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (L_SKIP - 64)) | (1L << (LIMIT - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESC - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASC - 64)) | (1L << (WHERE - 64)) | (1L << (OR - 64)) | (1L << (XOR - 64)) | (1L << (AND - 64)) | (1L << (NOT - 64)) | (1L << (IN - 64)) | (1L << (STARTS - 64)) | (1L << (ENDS - 64)) | (1L << (CONTAINS - 64)) | (1L << (IS - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (COUNT - 64)) | (1L << (FILTER - 64)) | (1L << (EXTRACT - 64)) | (1L << (ANY - 64)) | (1L << (NONE - 64)) | (1L << (SINGLE - 64)) | (1L << (UnescapedSymbolicName - 64)) | (1L << (EscapedSymbolicName - 64)) | (1L << (WHITESPACE - 64)))) != 0)) {
                                            {
                                                setState(834);
                                                expression();
                                            }
                                        }

                                        setState(837);
                                        match(T__12);
                                        setState(839);
                                        _la = _input.LA(1);
                                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << StringLiteral) | (1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger) | (1L << HexString) | (1L << Digit) | (1L << UNION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ALL - 64)) | (1L << (OPTIONAL - 64)) | (1L << (MATCH - 64)) | (1L << (UNWIND - 64)) | (1L << (AS - 64)) | (1L << (MERGE - 64)) | (1L << (ON - 64)) | (1L << (CREATE - 64)) | (1L << (SET - 64)) | (1L << (DELETE - 64)) | (1L << (DETACH - 64)) | (1L << (REMOVE - 64)) | (1L << (WITH - 64)) | (1L << (DISTINCT - 64)) | (1L << (RETURN - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (L_SKIP - 64)) | (1L << (LIMIT - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESC - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASC - 64)) | (1L << (WHERE - 64)) | (1L << (OR - 64)) | (1L << (XOR - 64)) | (1L << (AND - 64)) | (1L << (NOT - 64)) | (1L << (IN - 64)) | (1L << (STARTS - 64)) | (1L << (ENDS - 64)) | (1L << (CONTAINS - 64)) | (1L << (IS - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (COUNT - 64)) | (1L << (FILTER - 64)) | (1L << (EXTRACT - 64)) | (1L << (ANY - 64)) | (1L << (NONE - 64)) | (1L << (SINGLE - 64)) | (1L << (UnescapedSymbolicName - 64)) | (1L << (EscapedSymbolicName - 64)) | (1L << (WHITESPACE - 64)))) != 0)) {
                                            {
                                                setState(838);
                                                expression();
                                            }
                                        }

                                        setState(841);
                                        match(T__9);
                                    }
                                }
                                break;
                                case 3: {
                                    {
                                        setState(862);
                                        _errHandler.sync(this);
                                        switch (getInterpreter().adaptivePredict(_input, 132, _ctx)) {
                                            case 1: {
                                                {
                                                    setState(843);
                                                    _la = _input.LA(1);
                                                    if (_la == WHITESPACE) {
                                                        {
                                                            setState(842);
                                                            sp();
                                                        }
                                                    }

                                                    setState(845);
                                                    match(T__18);
                                                }
                                            }
                                            break;
                                            case 2: {
                                                {
                                                    setState(846);
                                                    sp();
                                                    setState(847);
                                                    match(IN);
                                                }
                                            }
                                            break;
                                            case 3: {
                                                {
                                                    setState(849);
                                                    sp();
                                                    setState(850);
                                                    match(STARTS);
                                                    setState(851);
                                                    sp();
                                                    setState(852);
                                                    match(WITH);
                                                }
                                            }
                                            break;
                                            case 4: {
                                                {
                                                    setState(854);
                                                    sp();
                                                    setState(855);
                                                    match(ENDS);
                                                    setState(856);
                                                    sp();
                                                    setState(857);
                                                    match(WITH);
                                                }
                                            }
                                            break;
                                            case 5: {
                                                {
                                                    setState(859);
                                                    sp();
                                                    setState(860);
                                                    match(CONTAINS);
                                                }
                                            }
                                            break;
                                        }
                                        setState(865);
                                        _la = _input.LA(1);
                                        if (_la == WHITESPACE) {
                                            {
                                                setState(864);
                                                sp();
                                            }
                                        }

                                        setState(867);
                                        expression2();
                                    }
                                }
                                break;
                                case 4: {
                                    {
                                        setState(868);
                                        sp();
                                        setState(869);
                                        match(IS);
                                        setState(870);
                                        sp();
                                        setState(871);
                                        match(NULL);
                                    }
                                }
                                break;
                                case 5: {
                                    {
                                        setState(873);
                                        sp();
                                        setState(874);
                                        match(IS);
                                        setState(875);
                                        sp();
                                        setState(876);
                                        match(NOT);
                                        setState(877);
                                        sp();
                                        setState(878);
                                        match(NULL);
                                    }
                                }
                                break;
                            }
                        }
                    }
                    setState(884);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 135, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Expression2Context expression2() throws RecognitionException {
        Expression2Context _localctx = new Expression2Context(_ctx, getState());
        enterRule(_localctx, 106, RULE_expression2);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(885);
                atom();
                setState(890);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 137, _ctx);
                while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            setState(888);
                            switch (_input.LA(1)) {
                                case T__25:
                                case WHITESPACE: {
                                    setState(886);
                                    propertyLookup();
                                }
                                break;
                                case T__10: {
                                    setState(887);
                                    nodeLabels();
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    setState(892);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 137, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AtomContext atom() throws RecognitionException {
        AtomContext _localctx = new AtomContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_atom);
        int _la;
        try {
            setState(1032);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 166, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(893);
                    numberLiteral();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(894);
                    match(StringLiteral);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(895);
                    parameter();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(896);
                    match(TRUE);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(897);
                    match(FALSE);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(898);
                    match(NULL);
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    {
                        setState(899);
                        match(COUNT);
                        setState(901);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(900);
                                sp();
                            }
                        }

                        setState(903);
                        match(T__5);
                        setState(905);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(904);
                                sp();
                            }
                        }

                        setState(907);
                        match(T__4);
                        setState(909);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(908);
                                sp();
                            }
                        }

                        setState(911);
                        match(T__6);
                    }
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(912);
                    mapLiteral();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(913);
                    listComprehension();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    {
                        setState(914);
                        match(T__7);
                        setState(916);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 141, _ctx)) {
                            case 1: {
                                setState(915);
                                sp();
                            }
                            break;
                        }
                        setState(918);
                        expression();
                        setState(920);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(919);
                                sp();
                            }
                        }

                        setState(932);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T__1) {
                            {
                                {
                                    setState(922);
                                    match(T__1);
                                    setState(924);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 143, _ctx)) {
                                        case 1: {
                                            setState(923);
                                            sp();
                                        }
                                        break;
                                    }
                                    setState(926);
                                    expression();
                                    setState(928);
                                    _la = _input.LA(1);
                                    if (_la == WHITESPACE) {
                                        {
                                            setState(927);
                                            sp();
                                        }
                                    }

                                }
                            }
                            setState(934);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(935);
                        match(T__9);
                    }
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    {
                        setState(937);
                        match(FILTER);
                        setState(939);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(938);
                                sp();
                            }
                        }

                        setState(941);
                        match(T__5);
                        setState(943);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(942);
                                sp();
                            }
                        }

                        setState(945);
                        filterExpression();
                        setState(947);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(946);
                                sp();
                            }
                        }

                        setState(949);
                        match(T__6);
                    }
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    {
                        setState(951);
                        match(EXTRACT);
                        setState(953);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(952);
                                sp();
                            }
                        }

                        setState(955);
                        match(T__5);
                        setState(957);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(956);
                                sp();
                            }
                        }

                        setState(959);
                        filterExpression();
                        setState(961);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 151, _ctx)) {
                            case 1: {
                                setState(960);
                                sp();
                            }
                            break;
                        }
                        setState(968);
                        _la = _input.LA(1);
                        if (_la == T__11 || _la == WHITESPACE) {
                            {
                                setState(964);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(963);
                                        sp();
                                    }
                                }

                                setState(966);
                                match(T__11);
                                setState(967);
                                expression();
                            }
                        }

                        setState(970);
                        match(T__6);
                    }
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    {
                        setState(972);
                        match(ALL);
                        setState(974);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(973);
                                sp();
                            }
                        }

                        setState(976);
                        match(T__5);
                        setState(978);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(977);
                                sp();
                            }
                        }

                        setState(980);
                        filterExpression();
                        setState(982);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(981);
                                sp();
                            }
                        }

                        setState(984);
                        match(T__6);
                    }
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    {
                        setState(986);
                        match(ANY);
                        setState(988);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(987);
                                sp();
                            }
                        }

                        setState(990);
                        match(T__5);
                        setState(992);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(991);
                                sp();
                            }
                        }

                        setState(994);
                        filterExpression();
                        setState(996);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(995);
                                sp();
                            }
                        }

                        setState(998);
                        match(T__6);
                    }
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    {
                        setState(1000);
                        match(NONE);
                        setState(1002);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1001);
                                sp();
                            }
                        }

                        setState(1004);
                        match(T__5);
                        setState(1006);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1005);
                                sp();
                            }
                        }

                        setState(1008);
                        filterExpression();
                        setState(1010);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1009);
                                sp();
                            }
                        }

                        setState(1012);
                        match(T__6);
                    }
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    {
                        setState(1014);
                        match(SINGLE);
                        setState(1016);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1015);
                                sp();
                            }
                        }

                        setState(1018);
                        match(T__5);
                        setState(1020);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1019);
                                sp();
                            }
                        }

                        setState(1022);
                        filterExpression();
                        setState(1024);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1023);
                                sp();
                            }
                        }

                        setState(1026);
                        match(T__6);
                    }
                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(1028);
                    relationshipsPattern();
                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(1029);
                    parenthesizedExpression();
                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(1030);
                    functionInvocation();
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(1031);
                    variable();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PartialComparisonExpressionContext partialComparisonExpression() throws RecognitionException {
        PartialComparisonExpressionContext _localctx = new PartialComparisonExpressionContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_partialComparisonExpression);
        int _la;
        try {
            setState(1069);
            switch (_input.LA(1)) {
                case T__2:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(1034);
                        match(T__2);
                        setState(1036);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1035);
                                sp();
                            }
                        }

                        setState(1038);
                        expression7();
                    }
                }
                break;
                case T__19:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(1039);
                        match(T__19);
                        setState(1041);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1040);
                                sp();
                            }
                        }

                        setState(1043);
                        expression7();
                    }
                }
                break;
                case T__20:
                    enterOuterAlt(_localctx, 3);
                {
                    {
                        setState(1044);
                        match(T__20);
                        setState(1046);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1045);
                                sp();
                            }
                        }

                        setState(1048);
                        expression7();
                    }
                }
                break;
                case T__21:
                    enterOuterAlt(_localctx, 4);
                {
                    {
                        setState(1049);
                        match(T__21);
                        setState(1051);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1050);
                                sp();
                            }
                        }

                        setState(1053);
                        expression7();
                    }
                }
                break;
                case T__22:
                    enterOuterAlt(_localctx, 5);
                {
                    {
                        setState(1054);
                        match(T__22);
                        setState(1056);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1055);
                                sp();
                            }
                        }

                        setState(1058);
                        expression7();
                    }
                }
                break;
                case T__23:
                    enterOuterAlt(_localctx, 6);
                {
                    {
                        setState(1059);
                        match(T__23);
                        setState(1061);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1060);
                                sp();
                            }
                        }

                        setState(1063);
                        expression7();
                    }
                }
                break;
                case T__24:
                    enterOuterAlt(_localctx, 7);
                {
                    {
                        setState(1064);
                        match(T__24);
                        setState(1066);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1065);
                                sp();
                            }
                        }

                        setState(1068);
                        expression7();
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ParenthesizedExpressionContext parenthesizedExpression() throws RecognitionException {
        ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_parenthesizedExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1071);
                match(T__5);
                setState(1073);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 175, _ctx)) {
                    case 1: {
                        setState(1072);
                        sp();
                    }
                    break;
                }
                setState(1075);
                expression();
                setState(1077);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(1076);
                        sp();
                    }
                }

                setState(1079);
                match(T__6);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelationshipsPatternContext relationshipsPattern() throws RecognitionException {
        RelationshipsPatternContext _localctx = new RelationshipsPatternContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_relationshipsPattern);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1081);
                nodePattern();
                setState(1086);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(1083);
                                _la = _input.LA(1);
                                if (_la == WHITESPACE) {
                                    {
                                        setState(1082);
                                        sp();
                                    }
                                }

                                setState(1085);
                                patternElementChain();
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1088);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 178, _ctx);
                } while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FilterExpressionContext filterExpression() throws RecognitionException {
        FilterExpressionContext _localctx = new FilterExpressionContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_filterExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1090);
                idInColl();
                setState(1095);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 180, _ctx)) {
                    case 1: {
                        setState(1092);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1091);
                                sp();
                            }
                        }

                        setState(1094);
                        where();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IdInCollContext idInColl() throws RecognitionException {
        IdInCollContext _localctx = new IdInCollContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_idInColl);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1097);
                variable();
                setState(1098);
                sp();
                setState(1099);
                match(IN);
                setState(1100);
                sp();
                setState(1101);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FunctionInvocationContext functionInvocation() throws RecognitionException {
        FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_functionInvocation);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1103);
                functionName();
                setState(1105);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(1104);
                        sp();
                    }
                }

                setState(1107);
                match(T__5);
                setState(1109);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 182, _ctx)) {
                    case 1: {
                        setState(1108);
                        sp();
                    }
                    break;
                }
                setState(1115);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 184, _ctx)) {
                    case 1: {
                        setState(1111);
                        match(DISTINCT);
                        setState(1113);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 183, _ctx)) {
                            case 1: {
                                setState(1112);
                                sp();
                            }
                            break;
                        }
                    }
                    break;
                }
                setState(1134);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << StringLiteral) | (1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger) | (1L << HexString) | (1L << Digit) | (1L << UNION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ALL - 64)) | (1L << (OPTIONAL - 64)) | (1L << (MATCH - 64)) | (1L << (UNWIND - 64)) | (1L << (AS - 64)) | (1L << (MERGE - 64)) | (1L << (ON - 64)) | (1L << (CREATE - 64)) | (1L << (SET - 64)) | (1L << (DELETE - 64)) | (1L << (DETACH - 64)) | (1L << (REMOVE - 64)) | (1L << (WITH - 64)) | (1L << (DISTINCT - 64)) | (1L << (RETURN - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (L_SKIP - 64)) | (1L << (LIMIT - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESC - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASC - 64)) | (1L << (WHERE - 64)) | (1L << (OR - 64)) | (1L << (XOR - 64)) | (1L << (AND - 64)) | (1L << (NOT - 64)) | (1L << (IN - 64)) | (1L << (STARTS - 64)) | (1L << (ENDS - 64)) | (1L << (CONTAINS - 64)) | (1L << (IS - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (COUNT - 64)) | (1L << (FILTER - 64)) | (1L << (EXTRACT - 64)) | (1L << (ANY - 64)) | (1L << (NONE - 64)) | (1L << (SINGLE - 64)) | (1L << (UnescapedSymbolicName - 64)) | (1L << (EscapedSymbolicName - 64)) | (1L << (WHITESPACE - 64)))) != 0)) {
                    {
                        setState(1117);
                        expression();
                        setState(1119);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1118);
                                sp();
                            }
                        }

                        setState(1131);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T__1) {
                            {
                                {
                                    setState(1121);
                                    match(T__1);
                                    setState(1123);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 186, _ctx)) {
                                        case 1: {
                                            setState(1122);
                                            sp();
                                        }
                                        break;
                                    }
                                    setState(1125);
                                    expression();
                                    setState(1127);
                                    _la = _input.LA(1);
                                    if (_la == WHITESPACE) {
                                        {
                                            setState(1126);
                                            sp();
                                        }
                                    }

                                }
                            }
                            setState(1133);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }

                setState(1136);
                match(T__6);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FunctionNameContext functionName() throws RecognitionException {
        FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
        enterRule(_localctx, 122, RULE_functionName);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1138);
                symbolicName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ListComprehensionContext listComprehension() throws RecognitionException {
        ListComprehensionContext _localctx = new ListComprehensionContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_listComprehension);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1140);
                match(T__7);
                setState(1141);
                filterExpression();
                setState(1147);
                _la = _input.LA(1);
                if (_la == T__11 || _la == WHITESPACE) {
                    {
                        setState(1143);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1142);
                                sp();
                            }
                        }

                        setState(1145);
                        match(T__11);
                        setState(1146);
                        expression();
                    }
                }

                setState(1149);
                match(T__9);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyLookupContext propertyLookup() throws RecognitionException {
        PropertyLookupContext _localctx = new PropertyLookupContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_propertyLookup);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1152);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(1151);
                        sp();
                    }
                }

                setState(1154);
                match(T__25);
                setState(1156);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(1155);
                        sp();
                    }
                }

                setState(1162);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 194, _ctx)) {
                    case 1: {
                        {
                            setState(1158);
                            propertyKeyName();
                            setState(1159);
                            _la = _input.LA(1);
                            if (!(_la == T__8 || _la == T__26)) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                    }
                    break;
                    case 2: {
                        setState(1161);
                        propertyKeyName();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final VariableContext variable() throws RecognitionException {
        VariableContext _localctx = new VariableContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_variable);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1164);
                symbolicName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NumberLiteralContext numberLiteral() throws RecognitionException {
        NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_numberLiteral);
        try {
            setState(1168);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 195, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1166);
                    doubleLiteral();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1167);
                    integerLiteral();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MapLiteralContext mapLiteral() throws RecognitionException {
        MapLiteralContext _localctx = new MapLiteralContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_mapLiteral);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1170);
                match(T__27);
                setState(1172);
                _la = _input.LA(1);
                if (_la == WHITESPACE) {
                    {
                        setState(1171);
                        sp();
                    }
                }

                setState(1207);
                _la = _input.LA(1);
                if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0)) {
                    {
                        setState(1174);
                        propertyKeyName();
                        setState(1176);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1175);
                                sp();
                            }
                        }

                        setState(1178);
                        match(T__10);
                        setState(1180);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 198, _ctx)) {
                            case 1: {
                                setState(1179);
                                sp();
                            }
                            break;
                        }
                        setState(1182);
                        expression();
                        setState(1184);
                        _la = _input.LA(1);
                        if (_la == WHITESPACE) {
                            {
                                setState(1183);
                                sp();
                            }
                        }

                        setState(1204);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T__1) {
                            {
                                {
                                    setState(1186);
                                    match(T__1);
                                    setState(1188);
                                    _la = _input.LA(1);
                                    if (_la == WHITESPACE) {
                                        {
                                            setState(1187);
                                            sp();
                                        }
                                    }

                                    setState(1190);
                                    propertyKeyName();
                                    setState(1192);
                                    _la = _input.LA(1);
                                    if (_la == WHITESPACE) {
                                        {
                                            setState(1191);
                                            sp();
                                        }
                                    }

                                    setState(1194);
                                    match(T__10);
                                    setState(1196);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 202, _ctx)) {
                                        case 1: {
                                            setState(1195);
                                            sp();
                                        }
                                        break;
                                    }
                                    setState(1198);
                                    expression();
                                    setState(1200);
                                    _la = _input.LA(1);
                                    if (_la == WHITESPACE) {
                                        {
                                            setState(1199);
                                            sp();
                                        }
                                    }

                                }
                            }
                            setState(1206);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }

                setState(1209);
                match(T__28);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ParameterContext parameter() throws RecognitionException {
        ParameterContext _localctx = new ParameterContext(_ctx, getState());
        enterRule(_localctx, 134, RULE_parameter);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1211);
                match(T__29);
                setState(1214);
                switch (_input.LA(1)) {
                    case HexString:
                    case UNION:
                    case ALL:
                    case OPTIONAL:
                    case MATCH:
                    case UNWIND:
                    case AS:
                    case MERGE:
                    case ON:
                    case CREATE:
                    case SET:
                    case DELETE:
                    case DETACH:
                    case REMOVE:
                    case WITH:
                    case DISTINCT:
                    case RETURN:
                    case ORDER:
                    case BY:
                    case L_SKIP:
                    case LIMIT:
                    case DESCENDING:
                    case DESC:
                    case ASCENDING:
                    case ASC:
                    case WHERE:
                    case OR:
                    case XOR:
                    case AND:
                    case NOT:
                    case IN:
                    case STARTS:
                    case ENDS:
                    case CONTAINS:
                    case IS:
                    case NULL:
                    case TRUE:
                    case FALSE:
                    case COUNT:
                    case FILTER:
                    case EXTRACT:
                    case ANY:
                    case NONE:
                    case SINGLE:
                    case UnescapedSymbolicName:
                    case EscapedSymbolicName: {
                        setState(1212);
                        symbolicName();
                    }
                    break;
                    case DecimalInteger: {
                        setState(1213);
                        match(DecimalInteger);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyExpressionContext propertyExpression() throws RecognitionException {
        PropertyExpressionContext _localctx = new PropertyExpressionContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_propertyExpression);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1216);
                atom();
                setState(1221);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(1218);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 207, _ctx)) {
                                    case 1: {
                                        setState(1217);
                                        sp();
                                    }
                                    break;
                                }
                                setState(1220);
                                propertyLookup();
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1223);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 208, _ctx);
                } while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyKeyNameContext propertyKeyName() throws RecognitionException {
        PropertyKeyNameContext _localctx = new PropertyKeyNameContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_propertyKeyName);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1225);
                symbolicName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IntegerLiteralContext integerLiteral() throws RecognitionException {
        IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, getState());
        enterRule(_localctx, 140, RULE_integerLiteral);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1227);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DoubleLiteralContext doubleLiteral() throws RecognitionException {
        DoubleLiteralContext _localctx = new DoubleLiteralContext(_ctx, getState());
        enterRule(_localctx, 142, RULE_doubleLiteral);
        try {
            setState(1231);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 209, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1229);
                    exponentDecimalReal();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1230);
                    regularDecimalReal();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ExponentDecimalRealContext exponentDecimalReal() throws RecognitionException {
        ExponentDecimalRealContext _localctx = new ExponentDecimalRealContext(_ctx, getState());
        enterRule(_localctx, 144, RULE_exponentDecimalReal);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1239);
                switch (_input.LA(1)) {
                    case T__25:
                    case Digit: {
                        setState(1234);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(1233);
                                    _la = _input.LA(1);
                                    if (!(_la == T__25 || _la == Digit)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        consume();
                                    }
                                }
                            }
                            setState(1236);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == T__25 || _la == Digit);
                    }
                    break;
                    case DecimalInteger: {
                        setState(1238);
                        match(DecimalInteger);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1243);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 212, _ctx)) {
                    case 1: {
                        setState(1241);
                        _la = _input.LA(1);
                        if (!(_la == T__30 || _la == T__31)) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                    case 2: {
                        setState(1242);
                        _la = _input.LA(1);
                        if (!(_la == T__30 || _la == T__31)) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(1245);
                _la = _input.LA(1);
                if (!(_la == DecimalInteger || _la == DigitString)) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RegularDecimalRealContext regularDecimalReal() throws RecognitionException {
        RegularDecimalRealContext _localctx = new RegularDecimalRealContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_regularDecimalReal);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1254);
                switch (_input.LA(1)) {
                    case T__25:
                    case Digit: {
                        setState(1250);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == Digit) {
                            {
                                {
                                    setState(1247);
                                    match(Digit);
                                }
                            }
                            setState(1252);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                    case DecimalInteger: {
                        setState(1253);
                        match(DecimalInteger);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1256);
                match(T__25);
                setState(1257);
                _la = _input.LA(1);
                if (!(_la == DecimalInteger || _la == DigitString)) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SymbolicNameContext symbolicName() throws RecognitionException {
        SymbolicNameContext _localctx = new SymbolicNameContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_symbolicName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1259);
                _la = _input.LA(1);
                if (!(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SpContext sp() throws RecognitionException {
        SpContext _localctx = new SpContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_sp);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1262);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(1261);
                                match(WHITESPACE);
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1264);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 215, _ctx);
                } while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final LeftArrowHeadContext leftArrowHead() throws RecognitionException {
        LeftArrowHeadContext _localctx = new LeftArrowHeadContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_leftArrowHead);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1266);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RightArrowHeadContext rightArrowHead() throws RecognitionException {
        RightArrowHeadContext _localctx = new RightArrowHeadContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_rightArrowHead);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1268);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DashContext dash() throws RecognitionException {
        DashContext _localctx = new DashContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_dash);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1270);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DigitContext digit() throws RecognitionException {
        DigitContext _localctx = new DigitContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_digit);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1272);
                match(Digit);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CypherContext extends ParserRuleContext {
        public CypherContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cypher;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterCypher(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitCypher(this);
        }
    }

    public static class StatementContext extends ParserRuleContext {
        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_statement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitStatement(this);
        }
    }

    public static class QueryContext extends ParserRuleContext {
        public QueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public RegularQueryContext regularQuery() {
            return getRuleContext(RegularQueryContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_query;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitQuery(this);
        }
    }

    public static class RegularQueryContext extends ParserRuleContext {
        public RegularQueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SingleQueryContext singleQuery() {
            return getRuleContext(SingleQueryContext.class, 0);
        }

        public List<UnionContext> union() {
            return getRuleContexts(UnionContext.class);
        }

        public UnionContext union(int i) {
            return getRuleContext(UnionContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_regularQuery;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRegularQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRegularQuery(this);
        }
    }

    public static class SingleQueryContext extends ParserRuleContext {
        public SingleQueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ClauseContext> clause() {
            return getRuleContexts(ClauseContext.class);
        }

        public ClauseContext clause(int i) {
            return getRuleContext(ClauseContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleQuery;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSingleQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSingleQuery(this);
        }
    }

    public static class UnionContext extends ParserRuleContext {
        public UnionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode UNION() {
            return getToken(CypherParser.UNION, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode ALL() {
            return getToken(CypherParser.ALL, 0);
        }

        public SingleQueryContext singleQuery() {
            return getRuleContext(SingleQueryContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_union;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterUnion(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitUnion(this);
        }
    }

    public static class ClauseContext extends ParserRuleContext {
        public ClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MatchContext match() {
            return getRuleContext(MatchContext.class, 0);
        }

        public UnwindContext unwind() {
            return getRuleContext(UnwindContext.class, 0);
        }

        public MergeContext merge() {
            return getRuleContext(MergeContext.class, 0);
        }

        public CreateContext create() {
            return getRuleContext(CreateContext.class, 0);
        }

        public SetContext set() {
            return getRuleContext(SetContext.class, 0);
        }

        public DeleteContext delete() {
            return getRuleContext(DeleteContext.class, 0);
        }

        public RemoveContext remove() {
            return getRuleContext(RemoveContext.class, 0);
        }

        public WithContext with() {
            return getRuleContext(WithContext.class, 0);
        }

        public ReturnMainContext returnMain() {
            return getRuleContext(ReturnMainContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitClause(this);
        }
    }

    public static class MatchContext extends ParserRuleContext {
        public MatchContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode MATCH() {
            return getToken(CypherParser.MATCH, 0);
        }

        public PatternContext pattern() {
            return getRuleContext(PatternContext.class, 0);
        }

        public TerminalNode OPTIONAL() {
            return getToken(CypherParser.OPTIONAL, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public WhereContext where() {
            return getRuleContext(WhereContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_match;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterMatch(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitMatch(this);
        }
    }

    public static class UnwindContext extends ParserRuleContext {
        public UnwindContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode UNWIND() {
            return getToken(CypherParser.UNWIND, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode AS() {
            return getToken(CypherParser.AS, 0);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unwind;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterUnwind(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitUnwind(this);
        }
    }

    public static class MergeContext extends ParserRuleContext {
        public MergeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode MERGE() {
            return getToken(CypherParser.MERGE, 0);
        }

        public PatternPartContext patternPart() {
            return getRuleContext(PatternPartContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<MergeActionContext> mergeAction() {
            return getRuleContexts(MergeActionContext.class);
        }

        public MergeActionContext mergeAction(int i) {
            return getRuleContext(MergeActionContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_merge;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterMerge(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitMerge(this);
        }
    }

    public static class MergeActionContext extends ParserRuleContext {
        public MergeActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ON() {
            return getToken(CypherParser.ON, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode MATCH() {
            return getToken(CypherParser.MATCH, 0);
        }

        public SetContext set() {
            return getRuleContext(SetContext.class, 0);
        }

        public TerminalNode CREATE() {
            return getToken(CypherParser.CREATE, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_mergeAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterMergeAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitMergeAction(this);
        }
    }

    public static class CreateContext extends ParserRuleContext {
        public CreateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CREATE() {
            return getToken(CypherParser.CREATE, 0);
        }

        public PatternContext pattern() {
            return getRuleContext(PatternContext.class, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterCreate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitCreate(this);
        }
    }

    public static class SetContext extends ParserRuleContext {
        public SetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SET() {
            return getToken(CypherParser.SET, 0);
        }

        public List<SetItemContext> setItem() {
            return getRuleContexts(SetItemContext.class);
        }

        public SetItemContext setItem(int i) {
            return getRuleContext(SetItemContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_set;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSet(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSet(this);
        }
    }

    public static class SetItemContext extends ParserRuleContext {
        public SetItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PropertyExpressionContext propertyExpression() {
            return getRuleContext(PropertyExpressionContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        public NodeLabelsContext nodeLabels() {
            return getRuleContext(NodeLabelsContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSetItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSetItem(this);
        }
    }

    public static class DeleteContext extends ParserRuleContext {
        public DeleteContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DELETE() {
            return getToken(CypherParser.DELETE, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode DETACH() {
            return getToken(CypherParser.DETACH, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_delete;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterDelete(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitDelete(this);
        }
    }

    public static class RemoveContext extends ParserRuleContext {
        public RemoveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode REMOVE() {
            return getToken(CypherParser.REMOVE, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<RemoveItemContext> removeItem() {
            return getRuleContexts(RemoveItemContext.class);
        }

        public RemoveItemContext removeItem(int i) {
            return getRuleContext(RemoveItemContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_remove;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRemove(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRemove(this);
        }
    }

    public static class RemoveItemContext extends ParserRuleContext {
        public RemoveItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        public NodeLabelsContext nodeLabels() {
            return getRuleContext(NodeLabelsContext.class, 0);
        }

        public PropertyExpressionContext propertyExpression() {
            return getRuleContext(PropertyExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_removeItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRemoveItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRemoveItem(this);
        }
    }

    public static class WithContext extends ParserRuleContext {
        public WithContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WITH() {
            return getToken(CypherParser.WITH, 0);
        }

        public TerminalNode DISTINCT() {
            return getToken(CypherParser.DISTINCT, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        public ReturnBodyContext returnBody() {
            return getRuleContext(ReturnBodyContext.class, 0);
        }

        public WhereContext where() {
            return getRuleContext(WhereContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_with;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterWith(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitWith(this);
        }
    }

    public static class ReturnMainContext extends ParserRuleContext {
        public ReturnMainContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode RETURN() {
            return getToken(CypherParser.RETURN, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode DISTINCT() {
            return getToken(CypherParser.DISTINCT, 0);
        }

        public ReturnBodyContext returnBody() {
            return getRuleContext(ReturnBodyContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_returnMain;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnMain(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnMain(this);
        }
    }

    public static class ReturnBodyContext extends ParserRuleContext {
        public ReturnBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ReturnItemsContext returnItems() {
            return getRuleContext(ReturnItemsContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public OrderContext order() {
            return getRuleContext(OrderContext.class, 0);
        }

        public SkipContext skip() {
            return getRuleContext(SkipContext.class, 0);
        }

        public LimitContext limit() {
            return getRuleContext(LimitContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_returnBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnBody(this);
        }
    }

    public static class ReturnItemsContext extends ParserRuleContext {
        public ReturnItemsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ReturnItemContext> returnItem() {
            return getRuleContexts(ReturnItemContext.class);
        }

        public ReturnItemContext returnItem(int i) {
            return getRuleContext(ReturnItemContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_returnItems;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnItems(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnItems(this);
        }
    }

    public static class ReturnItemContext extends ParserRuleContext {
        public ReturnItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode AS() {
            return getToken(CypherParser.AS, 0);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_returnItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnItem(this);
        }
    }

    public static class OrderContext extends ParserRuleContext {
        public OrderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ORDER() {
            return getToken(CypherParser.ORDER, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode BY() {
            return getToken(CypherParser.BY, 0);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_order;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterOrder(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitOrder(this);
        }
    }

    public static class SkipContext extends ParserRuleContext {
        public SkipContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode L_SKIP() {
            return getToken(CypherParser.L_SKIP, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skip;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSkip(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSkip(this);
        }
    }

    public static class LimitContext extends ParserRuleContext {
        public LimitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LIMIT() {
            return getToken(CypherParser.LIMIT, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_limit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterLimit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitLimit(this);
        }
    }

    public static class SortItemContext extends ParserRuleContext {
        public SortItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode DESCENDING() {
            return getToken(CypherParser.DESCENDING, 0);
        }

        public TerminalNode DESC() {
            return getToken(CypherParser.DESC, 0);
        }

        public TerminalNode ASCENDING() {
            return getToken(CypherParser.ASCENDING, 0);
        }

        public TerminalNode ASC() {
            return getToken(CypherParser.ASC, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sortItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSortItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSortItem(this);
        }
    }

    public static class WhereContext extends ParserRuleContext {
        public WhereContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WHERE() {
            return getToken(CypherParser.WHERE, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_where;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterWhere(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitWhere(this);
        }
    }

    public static class PatternContext extends ParserRuleContext {
        public PatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<PatternPartContext> patternPart() {
            return getRuleContexts(PatternPartContext.class);
        }

        public PatternPartContext patternPart(int i) {
            return getRuleContext(PatternPartContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pattern;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPattern(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPattern(this);
        }
    }

    public static class PatternPartContext extends ParserRuleContext {
        public PatternPartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        public AnonymousPatternPartContext anonymousPatternPart() {
            return getRuleContext(AnonymousPatternPartContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_patternPart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPatternPart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPatternPart(this);
        }
    }

    public static class AnonymousPatternPartContext extends ParserRuleContext {
        public AnonymousPatternPartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PatternElementContext patternElement() {
            return getRuleContext(PatternElementContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_anonymousPatternPart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterAnonymousPatternPart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitAnonymousPatternPart(this);
        }
    }

    public static class PatternElementContext extends ParserRuleContext {
        public PatternElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public NodePatternContext nodePattern() {
            return getRuleContext(NodePatternContext.class, 0);
        }

        public List<PatternElementChainContext> patternElementChain() {
            return getRuleContexts(PatternElementChainContext.class);
        }

        public PatternElementChainContext patternElementChain(int i) {
            return getRuleContext(PatternElementChainContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public PatternElementContext patternElement() {
            return getRuleContext(PatternElementContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_patternElement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPatternElement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPatternElement(this);
        }
    }

    public static class NodePatternContext extends ParserRuleContext {
        public NodePatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        public NodeLabelsContext nodeLabels() {
            return getRuleContext(NodeLabelsContext.class, 0);
        }

        public PropertiesContext properties() {
            return getRuleContext(PropertiesContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nodePattern;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterNodePattern(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitNodePattern(this);
        }
    }

    public static class PatternElementChainContext extends ParserRuleContext {
        public PatternElementChainContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public RelationshipPatternContext relationshipPattern() {
            return getRuleContext(RelationshipPatternContext.class, 0);
        }

        public NodePatternContext nodePattern() {
            return getRuleContext(NodePatternContext.class, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_patternElementChain;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPatternElementChain(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPatternElementChain(this);
        }
    }

    public static class RelationshipPatternContext extends ParserRuleContext {
        public RelationshipPatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public LeftArrowHeadContext leftArrowHead() {
            return getRuleContext(LeftArrowHeadContext.class, 0);
        }

        public List<DashContext> dash() {
            return getRuleContexts(DashContext.class);
        }

        public DashContext dash(int i) {
            return getRuleContext(DashContext.class, i);
        }

        public RightArrowHeadContext rightArrowHead() {
            return getRuleContext(RightArrowHeadContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public RelationshipDetailContext relationshipDetail() {
            return getRuleContext(RelationshipDetailContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationshipPattern;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipPattern(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipPattern(this);
        }
    }

    public static class RelationshipDetailContext extends ParserRuleContext {
        public RelationshipDetailContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        public RelationshipTypesContext relationshipTypes() {
            return getRuleContext(RelationshipTypesContext.class, 0);
        }

        public RangeLiteralContext rangeLiteral() {
            return getRuleContext(RangeLiteralContext.class, 0);
        }

        public PropertiesContext properties() {
            return getRuleContext(PropertiesContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationshipDetail;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipDetail(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipDetail(this);
        }
    }

    public static class PropertiesContext extends ParserRuleContext {
        public PropertiesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MapLiteralContext mapLiteral() {
            return getRuleContext(MapLiteralContext.class, 0);
        }

        public ParameterContext parameter() {
            return getRuleContext(ParameterContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_properties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitProperties(this);
        }
    }

    public static class RelationshipTypesContext extends ParserRuleContext {
        public RelationshipTypesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<RelTypeNameContext> relTypeName() {
            return getRuleContexts(RelTypeNameContext.class);
        }

        public RelTypeNameContext relTypeName(int i) {
            return getRuleContext(RelTypeNameContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationshipTypes;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipTypes(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipTypes(this);
        }
    }

    public static class NodeLabelsContext extends ParserRuleContext {
        public NodeLabelsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<NodeLabelContext> nodeLabel() {
            return getRuleContexts(NodeLabelContext.class);
        }

        public NodeLabelContext nodeLabel(int i) {
            return getRuleContext(NodeLabelContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nodeLabels;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterNodeLabels(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitNodeLabels(this);
        }
    }

    public static class NodeLabelContext extends ParserRuleContext {
        public NodeLabelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public LabelNameContext labelName() {
            return getRuleContext(LabelNameContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nodeLabel;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterNodeLabel(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitNodeLabel(this);
        }
    }

    public static class RangeLiteralContext extends ParserRuleContext {
        public RangeLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<IntegerLiteralContext> integerLiteral() {
            return getRuleContexts(IntegerLiteralContext.class);
        }

        public IntegerLiteralContext integerLiteral(int i) {
            return getRuleContext(IntegerLiteralContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rangeLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRangeLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRangeLiteral(this);
        }
    }

    public static class LabelNameContext extends ParserRuleContext {
        public LabelNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SymbolicNameContext symbolicName() {
            return getRuleContext(SymbolicNameContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_labelName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterLabelName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitLabelName(this);
        }
    }

    public static class RelTypeNameContext extends ParserRuleContext {
        public RelTypeNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SymbolicNameContext symbolicName() {
            return getRuleContext(SymbolicNameContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relTypeName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRelTypeName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRelTypeName(this);
        }
    }

    public static class ExpressionContext extends ParserRuleContext {
        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Expression12Context expression12() {
            return getRuleContext(Expression12Context.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression(this);
        }
    }

    public static class Expression12Context extends ParserRuleContext {
        public Expression12Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression11Context> expression11() {
            return getRuleContexts(Expression11Context.class);
        }

        public Expression11Context expression11(int i) {
            return getRuleContext(Expression11Context.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<TerminalNode> OR() {
            return getTokens(CypherParser.OR);
        }

        public TerminalNode OR(int i) {
            return getToken(CypherParser.OR, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression12;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression12(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression12(this);
        }
    }

    public static class Expression11Context extends ParserRuleContext {
        public Expression11Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression10Context> expression10() {
            return getRuleContexts(Expression10Context.class);
        }

        public Expression10Context expression10(int i) {
            return getRuleContext(Expression10Context.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<TerminalNode> XOR() {
            return getTokens(CypherParser.XOR);
        }

        public TerminalNode XOR(int i) {
            return getToken(CypherParser.XOR, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression11;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression11(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression11(this);
        }
    }

    public static class Expression10Context extends ParserRuleContext {
        public Expression10Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression9Context> expression9() {
            return getRuleContexts(Expression9Context.class);
        }

        public Expression9Context expression9(int i) {
            return getRuleContext(Expression9Context.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<TerminalNode> AND() {
            return getTokens(CypherParser.AND);
        }

        public TerminalNode AND(int i) {
            return getToken(CypherParser.AND, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression10;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression10(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression10(this);
        }
    }

    public static class Expression9Context extends ParserRuleContext {
        public Expression9Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Expression8Context expression8() {
            return getRuleContext(Expression8Context.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<TerminalNode> NOT() {
            return getTokens(CypherParser.NOT);
        }

        public TerminalNode NOT(int i) {
            return getToken(CypherParser.NOT, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression9;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression9(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression9(this);
        }
    }

    public static class Expression8Context extends ParserRuleContext {
        public Expression8Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Expression7Context expression7() {
            return getRuleContext(Expression7Context.class, 0);
        }

        public List<PartialComparisonExpressionContext> partialComparisonExpression() {
            return getRuleContexts(PartialComparisonExpressionContext.class);
        }

        public PartialComparisonExpressionContext partialComparisonExpression(int i) {
            return getRuleContext(PartialComparisonExpressionContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression8;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression8(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression8(this);
        }
    }

    public static class Expression7Context extends ParserRuleContext {
        public Expression7Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression6Context> expression6() {
            return getRuleContexts(Expression6Context.class);
        }

        public Expression6Context expression6(int i) {
            return getRuleContext(Expression6Context.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression7;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression7(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression7(this);
        }
    }

    public static class Expression6Context extends ParserRuleContext {
        public Expression6Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression5Context> expression5() {
            return getRuleContexts(Expression5Context.class);
        }

        public Expression5Context expression5(int i) {
            return getRuleContext(Expression5Context.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression6;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression6(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression6(this);
        }
    }

    public static class Expression5Context extends ParserRuleContext {
        public Expression5Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression4Context> expression4() {
            return getRuleContexts(Expression4Context.class);
        }

        public Expression4Context expression4(int i) {
            return getRuleContext(Expression4Context.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression5;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression5(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression5(this);
        }
    }

    public static class Expression4Context extends ParserRuleContext {
        public Expression4Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Expression3Context expression3() {
            return getRuleContext(Expression3Context.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression4;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression4(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression4(this);
        }
    }

    public static class Expression3Context extends ParserRuleContext {
        public Expression3Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<Expression2Context> expression2() {
            return getRuleContexts(Expression2Context.class);
        }

        public Expression2Context expression2(int i) {
            return getRuleContext(Expression2Context.class, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<TerminalNode> IS() {
            return getTokens(CypherParser.IS);
        }

        public TerminalNode IS(int i) {
            return getToken(CypherParser.IS, i);
        }

        public List<TerminalNode> NULL() {
            return getTokens(CypherParser.NULL);
        }

        public TerminalNode NULL(int i) {
            return getToken(CypherParser.NULL, i);
        }

        public List<TerminalNode> NOT() {
            return getTokens(CypherParser.NOT);
        }

        public TerminalNode NOT(int i) {
            return getToken(CypherParser.NOT, i);
        }

        public List<TerminalNode> IN() {
            return getTokens(CypherParser.IN);
        }

        public TerminalNode IN(int i) {
            return getToken(CypherParser.IN, i);
        }

        public List<TerminalNode> STARTS() {
            return getTokens(CypherParser.STARTS);
        }

        public TerminalNode STARTS(int i) {
            return getToken(CypherParser.STARTS, i);
        }

        public List<TerminalNode> WITH() {
            return getTokens(CypherParser.WITH);
        }

        public TerminalNode WITH(int i) {
            return getToken(CypherParser.WITH, i);
        }

        public List<TerminalNode> ENDS() {
            return getTokens(CypherParser.ENDS);
        }

        public TerminalNode ENDS(int i) {
            return getToken(CypherParser.ENDS, i);
        }

        public List<TerminalNode> CONTAINS() {
            return getTokens(CypherParser.CONTAINS);
        }

        public TerminalNode CONTAINS(int i) {
            return getToken(CypherParser.CONTAINS, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression3;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression3(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression3(this);
        }
    }

    public static class Expression2Context extends ParserRuleContext {
        public Expression2Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AtomContext atom() {
            return getRuleContext(AtomContext.class, 0);
        }

        public List<PropertyLookupContext> propertyLookup() {
            return getRuleContexts(PropertyLookupContext.class);
        }

        public PropertyLookupContext propertyLookup(int i) {
            return getRuleContext(PropertyLookupContext.class, i);
        }

        public List<NodeLabelsContext> nodeLabels() {
            return getRuleContexts(NodeLabelsContext.class);
        }

        public NodeLabelsContext nodeLabels(int i) {
            return getRuleContext(NodeLabelsContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression2;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression2(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression2(this);
        }
    }

    public static class AtomContext extends ParserRuleContext {
        public AtomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public NumberLiteralContext numberLiteral() {
            return getRuleContext(NumberLiteralContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(CypherParser.StringLiteral, 0);
        }

        public ParameterContext parameter() {
            return getRuleContext(ParameterContext.class, 0);
        }

        public TerminalNode TRUE() {
            return getToken(CypherParser.TRUE, 0);
        }

        public TerminalNode FALSE() {
            return getToken(CypherParser.FALSE, 0);
        }

        public TerminalNode NULL() {
            return getToken(CypherParser.NULL, 0);
        }

        public TerminalNode COUNT() {
            return getToken(CypherParser.COUNT, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public MapLiteralContext mapLiteral() {
            return getRuleContext(MapLiteralContext.class, 0);
        }

        public ListComprehensionContext listComprehension() {
            return getRuleContext(ListComprehensionContext.class, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode FILTER() {
            return getToken(CypherParser.FILTER, 0);
        }

        public FilterExpressionContext filterExpression() {
            return getRuleContext(FilterExpressionContext.class, 0);
        }

        public TerminalNode EXTRACT() {
            return getToken(CypherParser.EXTRACT, 0);
        }

        public TerminalNode ALL() {
            return getToken(CypherParser.ALL, 0);
        }

        public TerminalNode ANY() {
            return getToken(CypherParser.ANY, 0);
        }

        public TerminalNode NONE() {
            return getToken(CypherParser.NONE, 0);
        }

        public TerminalNode SINGLE() {
            return getToken(CypherParser.SINGLE, 0);
        }

        public RelationshipsPatternContext relationshipsPattern() {
            return getRuleContext(RelationshipsPatternContext.class, 0);
        }

        public ParenthesizedExpressionContext parenthesizedExpression() {
            return getRuleContext(ParenthesizedExpressionContext.class, 0);
        }

        public FunctionInvocationContext functionInvocation() {
            return getRuleContext(FunctionInvocationContext.class, 0);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_atom;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterAtom(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitAtom(this);
        }
    }

    public static class PartialComparisonExpressionContext extends ParserRuleContext {
        public PartialComparisonExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Expression7Context expression7() {
            return getRuleContext(Expression7Context.class, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partialComparisonExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPartialComparisonExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPartialComparisonExpression(this);
        }
    }

    public static class ParenthesizedExpressionContext extends ParserRuleContext {
        public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_parenthesizedExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterParenthesizedExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitParenthesizedExpression(this);
        }
    }

    public static class RelationshipsPatternContext extends ParserRuleContext {
        public RelationshipsPatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public NodePatternContext nodePattern() {
            return getRuleContext(NodePatternContext.class, 0);
        }

        public List<PatternElementChainContext> patternElementChain() {
            return getRuleContexts(PatternElementChainContext.class);
        }

        public PatternElementChainContext patternElementChain(int i) {
            return getRuleContext(PatternElementChainContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationshipsPattern;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipsPattern(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipsPattern(this);
        }
    }

    public static class FilterExpressionContext extends ParserRuleContext {
        public FilterExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdInCollContext idInColl() {
            return getRuleContext(IdInCollContext.class, 0);
        }

        public WhereContext where() {
            return getRuleContext(WhereContext.class, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_filterExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterFilterExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitFilterExpression(this);
        }
    }

    public static class IdInCollContext extends ParserRuleContext {
        public IdInCollContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableContext variable() {
            return getRuleContext(VariableContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode IN() {
            return getToken(CypherParser.IN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_idInColl;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterIdInColl(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitIdInColl(this);
        }
    }

    public static class FunctionInvocationContext extends ParserRuleContext {
        public FunctionInvocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public FunctionNameContext functionName() {
            return getRuleContext(FunctionNameContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public TerminalNode DISTINCT() {
            return getToken(CypherParser.DISTINCT, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionInvocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterFunctionInvocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitFunctionInvocation(this);
        }
    }

    public static class FunctionNameContext extends ParserRuleContext {
        public FunctionNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SymbolicNameContext symbolicName() {
            return getRuleContext(SymbolicNameContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterFunctionName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitFunctionName(this);
        }
    }

    public static class ListComprehensionContext extends ParserRuleContext {
        public ListComprehensionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public FilterExpressionContext filterExpression() {
            return getRuleContext(FilterExpressionContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public SpContext sp() {
            return getRuleContext(SpContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_listComprehension;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterListComprehension(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitListComprehension(this);
        }
    }

    public static class PropertyLookupContext extends ParserRuleContext {
        public PropertyLookupContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PropertyKeyNameContext propertyKeyName() {
            return getRuleContext(PropertyKeyNameContext.class, 0);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyLookup;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPropertyLookup(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPropertyLookup(this);
        }
    }

    public static class VariableContext extends ParserRuleContext {
        public VariableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SymbolicNameContext symbolicName() {
            return getRuleContext(SymbolicNameContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_variable;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterVariable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitVariable(this);
        }
    }

    public static class NumberLiteralContext extends ParserRuleContext {
        public NumberLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DoubleLiteralContext doubleLiteral() {
            return getRuleContext(DoubleLiteralContext.class, 0);
        }

        public IntegerLiteralContext integerLiteral() {
            return getRuleContext(IntegerLiteralContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_numberLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterNumberLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitNumberLiteral(this);
        }
    }

    public static class MapLiteralContext extends ParserRuleContext {
        public MapLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        public List<PropertyKeyNameContext> propertyKeyName() {
            return getRuleContexts(PropertyKeyNameContext.class);
        }

        public PropertyKeyNameContext propertyKeyName(int i) {
            return getRuleContext(PropertyKeyNameContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_mapLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterMapLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitMapLiteral(this);
        }
    }

    public static class ParameterContext extends ParserRuleContext {
        public ParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SymbolicNameContext symbolicName() {
            return getRuleContext(SymbolicNameContext.class, 0);
        }

        public TerminalNode DecimalInteger() {
            return getToken(CypherParser.DecimalInteger, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_parameter;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterParameter(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitParameter(this);
        }
    }

    public static class PropertyExpressionContext extends ParserRuleContext {
        public PropertyExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AtomContext atom() {
            return getRuleContext(AtomContext.class, 0);
        }

        public List<PropertyLookupContext> propertyLookup() {
            return getRuleContexts(PropertyLookupContext.class);
        }

        public PropertyLookupContext propertyLookup(int i) {
            return getRuleContext(PropertyLookupContext.class, i);
        }

        public List<SpContext> sp() {
            return getRuleContexts(SpContext.class);
        }

        public SpContext sp(int i) {
            return getRuleContext(SpContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPropertyExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPropertyExpression(this);
        }
    }

    public static class PropertyKeyNameContext extends ParserRuleContext {
        public PropertyKeyNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SymbolicNameContext symbolicName() {
            return getRuleContext(SymbolicNameContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyKeyName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterPropertyKeyName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitPropertyKeyName(this);
        }
    }

    public static class IntegerLiteralContext extends ParserRuleContext {
        public IntegerLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode HexInteger() {
            return getToken(CypherParser.HexInteger, 0);
        }

        public TerminalNode OctalInteger() {
            return getToken(CypherParser.OctalInteger, 0);
        }

        public TerminalNode DecimalInteger() {
            return getToken(CypherParser.DecimalInteger, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_integerLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterIntegerLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitIntegerLiteral(this);
        }
    }

    public static class DoubleLiteralContext extends ParserRuleContext {
        public DoubleLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExponentDecimalRealContext exponentDecimalReal() {
            return getRuleContext(ExponentDecimalRealContext.class, 0);
        }

        public RegularDecimalRealContext regularDecimalReal() {
            return getRuleContext(RegularDecimalRealContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_doubleLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterDoubleLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitDoubleLiteral(this);
        }
    }

    public static class ExponentDecimalRealContext extends ParserRuleContext {
        public ExponentDecimalRealContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DigitString() {
            return getToken(CypherParser.DigitString, 0);
        }

        public List<TerminalNode> DecimalInteger() {
            return getTokens(CypherParser.DecimalInteger);
        }

        public TerminalNode DecimalInteger(int i) {
            return getToken(CypherParser.DecimalInteger, i);
        }

        public List<TerminalNode> Digit() {
            return getTokens(CypherParser.Digit);
        }

        public TerminalNode Digit(int i) {
            return getToken(CypherParser.Digit, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exponentDecimalReal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterExponentDecimalReal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitExponentDecimalReal(this);
        }
    }

    public static class RegularDecimalRealContext extends ParserRuleContext {
        public RegularDecimalRealContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DigitString() {
            return getToken(CypherParser.DigitString, 0);
        }

        public List<TerminalNode> DecimalInteger() {
            return getTokens(CypherParser.DecimalInteger);
        }

        public TerminalNode DecimalInteger(int i) {
            return getToken(CypherParser.DecimalInteger, i);
        }

        public List<TerminalNode> Digit() {
            return getTokens(CypherParser.Digit);
        }

        public TerminalNode Digit(int i) {
            return getToken(CypherParser.Digit, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_regularDecimalReal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRegularDecimalReal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRegularDecimalReal(this);
        }
    }

    public static class SymbolicNameContext extends ParserRuleContext {
        public SymbolicNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode UnescapedSymbolicName() {
            return getToken(CypherParser.UnescapedSymbolicName, 0);
        }

        public TerminalNode EscapedSymbolicName() {
            return getToken(CypherParser.EscapedSymbolicName, 0);
        }

        public TerminalNode UNION() {
            return getToken(CypherParser.UNION, 0);
        }

        public TerminalNode ALL() {
            return getToken(CypherParser.ALL, 0);
        }

        public TerminalNode OPTIONAL() {
            return getToken(CypherParser.OPTIONAL, 0);
        }

        public TerminalNode MATCH() {
            return getToken(CypherParser.MATCH, 0);
        }

        public TerminalNode UNWIND() {
            return getToken(CypherParser.UNWIND, 0);
        }

        public TerminalNode AS() {
            return getToken(CypherParser.AS, 0);
        }

        public TerminalNode MERGE() {
            return getToken(CypherParser.MERGE, 0);
        }

        public TerminalNode ON() {
            return getToken(CypherParser.ON, 0);
        }

        public TerminalNode CREATE() {
            return getToken(CypherParser.CREATE, 0);
        }

        public TerminalNode SET() {
            return getToken(CypherParser.SET, 0);
        }

        public TerminalNode DELETE() {
            return getToken(CypherParser.DELETE, 0);
        }

        public TerminalNode DETACH() {
            return getToken(CypherParser.DETACH, 0);
        }

        public TerminalNode REMOVE() {
            return getToken(CypherParser.REMOVE, 0);
        }

        public TerminalNode WITH() {
            return getToken(CypherParser.WITH, 0);
        }

        public TerminalNode DISTINCT() {
            return getToken(CypherParser.DISTINCT, 0);
        }

        public TerminalNode RETURN() {
            return getToken(CypherParser.RETURN, 0);
        }

        public TerminalNode ORDER() {
            return getToken(CypherParser.ORDER, 0);
        }

        public TerminalNode BY() {
            return getToken(CypherParser.BY, 0);
        }

        public TerminalNode L_SKIP() {
            return getToken(CypherParser.L_SKIP, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(CypherParser.LIMIT, 0);
        }

        public TerminalNode DESCENDING() {
            return getToken(CypherParser.DESCENDING, 0);
        }

        public TerminalNode DESC() {
            return getToken(CypherParser.DESC, 0);
        }

        public TerminalNode ASCENDING() {
            return getToken(CypherParser.ASCENDING, 0);
        }

        public TerminalNode ASC() {
            return getToken(CypherParser.ASC, 0);
        }

        public TerminalNode WHERE() {
            return getToken(CypherParser.WHERE, 0);
        }

        public TerminalNode OR() {
            return getToken(CypherParser.OR, 0);
        }

        public TerminalNode XOR() {
            return getToken(CypherParser.XOR, 0);
        }

        public TerminalNode AND() {
            return getToken(CypherParser.AND, 0);
        }

        public TerminalNode NOT() {
            return getToken(CypherParser.NOT, 0);
        }

        public TerminalNode IN() {
            return getToken(CypherParser.IN, 0);
        }

        public TerminalNode STARTS() {
            return getToken(CypherParser.STARTS, 0);
        }

        public TerminalNode ENDS() {
            return getToken(CypherParser.ENDS, 0);
        }

        public TerminalNode CONTAINS() {
            return getToken(CypherParser.CONTAINS, 0);
        }

        public TerminalNode IS() {
            return getToken(CypherParser.IS, 0);
        }

        public TerminalNode NULL() {
            return getToken(CypherParser.NULL, 0);
        }

        public TerminalNode TRUE() {
            return getToken(CypherParser.TRUE, 0);
        }

        public TerminalNode FALSE() {
            return getToken(CypherParser.FALSE, 0);
        }

        public TerminalNode COUNT() {
            return getToken(CypherParser.COUNT, 0);
        }

        public TerminalNode FILTER() {
            return getToken(CypherParser.FILTER, 0);
        }

        public TerminalNode EXTRACT() {
            return getToken(CypherParser.EXTRACT, 0);
        }

        public TerminalNode ANY() {
            return getToken(CypherParser.ANY, 0);
        }

        public TerminalNode NONE() {
            return getToken(CypherParser.NONE, 0);
        }

        public TerminalNode SINGLE() {
            return getToken(CypherParser.SINGLE, 0);
        }

        public TerminalNode HexString() {
            return getToken(CypherParser.HexString, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_symbolicName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSymbolicName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSymbolicName(this);
        }
    }

    public static class SpContext extends ParserRuleContext {
        public SpContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<TerminalNode> WHITESPACE() {
            return getTokens(CypherParser.WHITESPACE);
        }

        public TerminalNode WHITESPACE(int i) {
            return getToken(CypherParser.WHITESPACE, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sp;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterSp(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitSp(this);
        }
    }

    public static class LeftArrowHeadContext extends ParserRuleContext {
        public LeftArrowHeadContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_leftArrowHead;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterLeftArrowHead(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitLeftArrowHead(this);
        }
    }

    public static class RightArrowHeadContext extends ParserRuleContext {
        public RightArrowHeadContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rightArrowHead;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterRightArrowHead(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitRightArrowHead(this);
        }
    }

    public static class DashContext extends ParserRuleContext {
        public DashContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dash;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterDash(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitDash(this);
        }
    }

    public static class DigitContext extends ParserRuleContext {
        public DigitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode Digit() {
            return getToken(CypherParser.Digit, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_digit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).enterDigit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof CypherListener) ((CypherListener) listener).exitDigit(this);
        }
    }
}