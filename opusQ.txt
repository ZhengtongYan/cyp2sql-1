match (n:Global) return n;
match ()-[r]-() return count(r);
//match (n:Global {name:['/var/db/entropy/saved-entropy.2','/var/db/entropy/saved-entropy.3']}) return n;
//match (n:Global {name:'sh'}) return n;
match (n:Global {sys_time:1112012297}) return n;
//match (n:Global {name:['/var/db/entropy/saved-entropy.2','/var/db/entropy/saved-entropy.3'], node_id:810}) return n;
match (a {name:'7'})-->(b)-->(c:Meta)-->(d) return d;
//match (a)-->(b)-->(c) WHERE b.type = 3 or b.type = 2 return count(c);
//match (a:Global)-[*1..3]->(b) return b;
//match ()-[]->(b:Process) return b;
//MATCH (a)-[:META_PREV]->(b)-->(c) RETURN c;
//MATCH (a)-[:META_PREV]->(b)-->(c:Meta) RETURN c;
//MATCH (a:Meta)-[:META_PREV]->(b)-[:META_PREV]->(c:Meta) RETURN c;
//match (a:Global)-[*1..2]->(b:Process) return b.node_id;
//match (a:Global)-[*1..6]->(b:Process) return b.node_id;
//match (a:Global)-[*1..10]->(b:Local {name:"omega"}) return b.node_id;
//match (a:Global)-[*1..20]->(b) return b.node_id;
//match (a {node_id:95025})-->(b)-->(c:Local) return c.node_id;
//match (a {node_id:15})-[*1..5]->(m) return m.node_id;
//match (a:Global)-->()-->()-->()-->(b:Process) return b;
//match (a:Global)-[*1..4]->(b:Local) return b;
//MATCH (f:Global {node_id: 191})-[*1..3]->(t:Process) RETURN t.node_id;
//MATCH p=shortestPath((f:Global)-[*1..2]->(t:Process)) RETURN count(t.node_id);
//MATCH p=shortestPath((f:Global)-[*1..4]->(t:Process)) RETURN count(t.node_id);
//MATCH p=shortestPath((f:Global)-[*1..3]->(t:Meta)) RETURN count(t.node_id);
//MATCH p=allShortestPaths((f:Global {node_id: 191})-[*1..4]->(t:Process)) RETURN t.node_id;
//MATCH p=allShortestPaths((f:Global {node_id: 191})-[*1..10]->(t:Process)) RETURN t.node_id;
//MATCH p=allShortestPaths((f:Global {name: 'cron'})-[*1..6]->(t:Process)) RETURN t.node_id;
//MATCH p=shortestPath((f:Global)-[*1..5]->(t:Process)) RETURN t.node_id;
//MATCH ()-->()-->()-->()-->()-->()-->(a) return count(a);
//MATCH (a)-[*1..2]->(b) return b.node_id;
//MATCH (a)-[*1..4]->(b) return b.node_id;
//MATCH (a)-[*1..6]->(b) return b.node_id;
//MATCH (a)-[*1..8]->(b) return b.node_id;
//MATCH (a)-[*1..10]->(b) return b.node_id;