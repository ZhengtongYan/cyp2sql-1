package testing;// Generated from Cypher.g4 by ANTLR 4.5.3
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CypherParser extends Parser {
	public static final int
			T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
			T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
			T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
			T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
			T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
			T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
			T__45 = 46, T__46 = 47, T__47 = 48, T__48 = 49, T__49 = 50, T__50 = 51, StringLiteral = 52,
			EscapedChar = 53, HexInteger = 54, DecimalInteger = 55, OctalInteger = 56, HexString = 57,
			DigitString = 58, OctalString = 59, HexDigit = 60, Digit = 61, OctDigit = 62, UNION = 63,
			ALL = 64, OPTIONAL = 65, MATCH = 66, UNWIND = 67, AS = 68, MERGE = 69, ON = 70, CREATE = 71,
			SET = 72, DELETE = 73, DETACH = 74, REMOVE = 75, WITH = 76, DISTINCT = 77, RETURN = 78,
			ORDER = 79, BY = 80, L_SKIP = 81, LIMIT = 82, DESCENDING = 83, DESC = 84, ASCENDING = 85,
			ASC = 86, WHERE = 87, OR = 88, XOR = 89, AND = 90, NOT = 91, IN = 92, STARTS = 93, ENDS = 94,
			CONTAINS = 95, IS = 96, NULL = 97, TRUE = 98, FALSE = 99, COUNT = 100, FILTER = 101,
			EXTRACT = 102, ANY = 103, NONE = 104, SINGLE = 105, UnescapedSymbolicName = 106,
			IdentifierStart = 107, IdentifierPart = 108, EscapedSymbolicName = 109, WHITESPACE = 110,
			Comment = 111, L_0X = 112;
	public static final int
			RULE_cypher = 0, RULE_statement = 1, RULE_query = 2, RULE_regularQuery = 3,
			RULE_singleQuery = 4, RULE_union = 5, RULE_clause = 6, RULE_match = 7,
			RULE_unwind = 8, RULE_merge = 9, RULE_mergeAction = 10, RULE_create = 11,
			RULE_set = 12, RULE_setItem = 13, RULE_delete = 14, RULE_remove = 15,
			RULE_removeItem = 16, RULE_with = 17, RULE_returnMain = 18, RULE_returnBody = 19,
			RULE_returnItems = 20, RULE_returnItem = 21, RULE_order = 22, RULE_skip = 23,
			RULE_limit = 24, RULE_sortItem = 25, RULE_where = 26, RULE_pattern = 27,
			RULE_patternPart = 28, RULE_anonymousPatternPart = 29, RULE_patternElement = 30,
			RULE_nodePattern = 31, RULE_patternElementChain = 32, RULE_relationshipPattern = 33,
			RULE_relationshipDetail = 34, RULE_properties = 35, RULE_relationshipTypes = 36,
			RULE_nodeLabels = 37, RULE_nodeLabel = 38, RULE_rangeLiteral = 39, RULE_labelName = 40,
			RULE_relTypeName = 41, RULE_expression = 42, RULE_expression12 = 43, RULE_expression11 = 44,
			RULE_expression10 = 45, RULE_expression9 = 46, RULE_expression8 = 47,
			RULE_expression7 = 48, RULE_expression6 = 49, RULE_expression5 = 50, RULE_expression4 = 51,
			RULE_expression3 = 52, RULE_expression2 = 53, RULE_atom = 54, RULE_partialComparisonExpression = 55,
			RULE_parenthesizedExpression = 56, RULE_relationshipsPattern = 57, RULE_filterExpression = 58,
			RULE_idInColl = 59, RULE_functionInvocation = 60, RULE_functionName = 61,
			RULE_listComprehension = 62, RULE_propertyLookup = 63, RULE_variable = 64,
			RULE_numberLiteral = 65, RULE_mapLiteral = 66, RULE_parameter = 67, RULE_propertyExpression = 68,
			RULE_propertyKeyName = 69, RULE_integerLiteral = 70, RULE_doubleLiteral = 71,
			RULE_exponentDecimalReal = 72, RULE_regularDecimalReal = 73, RULE_symbolicName = 74,
			RULE_sp = 75, RULE_leftArrowHead = 76, RULE_rightArrowHead = 77, RULE_dash = 78,
			RULE_digit = 79;
	public static final String[] ruleNames = {
			"cypher", "statement", "query", "regularQuery", "singleQuery", "union",
			"clause", "match", "unwind", "merge", "mergeAction", "create", "set",
			"setItem", "delete", "remove", "removeItem", "with", "returnMain", "returnBody",
			"returnItems", "returnItem", "order", "skip", "limit", "sortItem", "where",
			"pattern", "patternPart", "anonymousPatternPart", "patternElement", "nodePattern",
			"patternElementChain", "relationshipPattern", "relationshipDetail", "properties",
			"relationshipTypes", "nodeLabels", "nodeLabel", "rangeLiteral", "labelName",
			"relTypeName", "expression", "expression12", "expression11", "expression10",
			"expression9", "expression8", "expression7", "expression6", "expression5",
			"expression4", "expression3", "expression2", "atom", "partialComparisonExpression",
			"parenthesizedExpression", "relationshipsPattern", "filterExpression",
			"idInColl", "functionInvocation", "functionName", "listComprehension",
			"propertyLookup", "variable", "numberLiteral", "mapLiteral", "parameter",
			"propertyExpression", "propertyKeyName", "integerLiteral", "doubleLiteral",
			"exponentDecimalReal", "regularDecimalReal", "symbolicName", "sp", "leftArrowHead",
			"rightArrowHead", "dash", "digit"
	};
	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	public static final String _serializedATN =
			"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3r\u04ff\4\2\t\2\4" +
					"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t" +
					"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22" +
					"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31" +
					"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!" +
					"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4" +
					",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t" +
					"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=" +
					"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I" +
					"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\3\2\5\2\u00a4\n\2" +
					"\3\2\3\2\5\2\u00a8\n\2\3\2\5\2\u00ab\n\2\3\2\5\2\u00ae\n\2\3\3\3\3\3\4" +
					"\3\4\3\5\3\5\5\5\u00b6\n\5\3\5\7\5\u00b9\n\5\f\5\16\5\u00bc\13\5\3\6\3" +
					"\6\5\6\u00c0\n\6\3\6\7\6\u00c3\n\6\f\6\16\6\u00c6\13\6\3\7\3\7\3\7\3\7" +
					"\5\7\u00cc\n\7\3\7\3\7\3\7\3\7\5\7\u00d2\n\7\3\7\5\7\u00d5\n\7\3\b\3\b" +
					"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00e0\n\b\3\t\3\t\5\t\u00e4\n\t\3\t\3" +
					"\t\5\t\u00e8\n\t\3\t\3\t\5\t\u00ec\n\t\3\t\5\t\u00ef\n\t\3\n\3\n\5\n\u00f3" +
					"\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\5\13\u00fd\n\13\3\13\3\13\3\13" +
					"\3\13\7\13\u0103\n\13\f\13\16\13\u0106\13\13\3\f\3\f\3\f\3\f\3\f\3\f\3" +
					"\f\3\f\3\f\3\f\3\f\3\f\5\f\u0114\n\f\3\r\3\r\5\r\u0118\n\r\3\r\3\r\3\16" +
					"\3\16\3\16\3\16\7\16\u0120\n\16\f\16\16\16\u0123\13\16\3\17\3\17\3\17" +
					"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0134" +
					"\n\17\3\20\3\20\3\20\3\20\7\20\u013a\n\20\f\20\16\20\u013d\13\20\3\20" +
					"\3\20\3\20\3\20\3\20\3\20\7\20\u0145\n\20\f\20\16\20\u0148\13\20\5\20" +
					"\u014a\n\20\3\21\3\21\3\21\3\21\5\21\u0150\n\21\3\21\3\21\5\21\u0154\n" +
					"\21\3\21\7\21\u0157\n\21\f\21\16\21\u015a\13\21\3\22\3\22\3\22\3\22\5" +
					"\22\u0160\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u0167\n\23\3\23\3\23\3\23" +
					"\3\23\5\23\u016d\n\23\5\23\u016f\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3" +
					"\24\3\24\3\24\3\24\5\24\u017b\n\24\3\25\3\25\3\25\3\25\5\25\u0181\n\25" +
					"\3\25\3\25\3\25\5\25\u0186\n\25\3\25\3\25\3\25\5\25\u018b\n\25\3\26\3" +
					"\26\5\26\u018f\n\26\3\26\3\26\5\26\u0193\n\26\3\26\7\26\u0196\n\26\f\26" +
					"\16\26\u0199\13\26\3\26\3\26\5\26\u019d\n\26\3\26\3\26\5\26\u01a1\n\26" +
					"\3\26\7\26\u01a4\n\26\f\26\16\26\u01a7\13\26\5\26\u01a9\n\26\3\27\3\27" +
					"\3\27\3\27\3\27\3\27\3\27\5\27\u01b2\n\27\3\30\3\30\3\30\3\30\3\30\3\30" +
					"\3\30\5\30\u01bb\n\30\3\30\7\30\u01be\n\30\f\30\16\30\u01c1\13\30\3\31" +
					"\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33" +
					"\3\33\3\33\5\33\u01d4\n\33\3\34\3\34\3\34\3\34\3\35\3\35\5\35\u01dc\n" +
					"\35\3\35\3\35\5\35\u01e0\n\35\3\35\7\35\u01e3\n\35\f\35\16\35\u01e6\13" +
					"\35\3\36\3\36\5\36\u01ea\n\36\3\36\3\36\5\36\u01ee\n\36\3\36\3\36\3\36" +
					"\5\36\u01f3\n\36\3\37\3\37\3 \3 \5 \u01f9\n \3 \7 \u01fc\n \f \16 \u01ff" +
					"\13 \3 \3 \3 \3 \5 \u0205\n \3!\3!\5!\u0209\n!\3!\3!\5!\u020d\n!\5!\u020f" +
					"\n!\3!\3!\5!\u0213\n!\5!\u0215\n!\3!\3!\5!\u0219\n!\5!\u021b\n!\3!\3!" +
					"\3\"\3\"\5\"\u0221\n\"\3\"\3\"\3#\3#\5#\u0227\n#\3#\3#\5#\u022b\n#\3#" +
					"\5#\u022e\n#\3#\5#\u0231\n#\3#\3#\5#\u0235\n#\3#\3#\3#\3#\5#\u023b\n#" +
					"\3#\3#\5#\u023f\n#\3#\5#\u0242\n#\3#\5#\u0245\n#\3#\3#\3#\3#\5#\u024b" +
					"\n#\3#\5#\u024e\n#\3#\5#\u0251\n#\3#\3#\5#\u0255\n#\3#\3#\3#\3#\5#\u025b" +
					"\n#\3#\5#\u025e\n#\3#\5#\u0261\n#\3#\3#\5#\u0265\n#\3$\3$\5$\u0269\n$" +
					"\3$\5$\u026c\n$\3$\5$\u026f\n$\3$\5$\u0272\n$\3$\5$\u0275\n$\3$\3$\3%" +
					"\3%\5%\u027b\n%\3&\3&\3&\5&\u0280\n&\3&\3&\5&\u0284\n&\3&\5&\u0287\n&" +
					"\3&\7&\u028a\n&\f&\16&\u028d\13&\3\'\3\'\5\'\u0291\n\'\3\'\7\'\u0294\n" +
					"\'\f\'\16\'\u0297\13\'\3(\3(\3(\3)\3)\5)\u029e\n)\3)\3)\5)\u02a2\n)\5" +
					")\u02a4\n)\3)\3)\5)\u02a8\n)\3)\3)\5)\u02ac\n)\5)\u02ae\n)\5)\u02b0\n" +
					")\3*\3*\3+\3+\3,\3,\3-\3-\3-\3-\3-\3-\7-\u02be\n-\f-\16-\u02c1\13-\3." +
					"\3.\3.\3.\3.\3.\7.\u02c9\n.\f.\16.\u02cc\13.\3/\3/\3/\3/\3/\3/\7/\u02d4" +
					"\n/\f/\16/\u02d7\13/\3\60\3\60\3\60\3\60\7\60\u02dd\n\60\f\60\16\60\u02e0" +
					"\13\60\3\60\3\60\3\61\3\61\5\61\u02e6\n\61\3\61\7\61\u02e9\n\61\f\61\16" +
					"\61\u02ec\13\61\3\62\3\62\5\62\u02f0\n\62\3\62\3\62\5\62\u02f4\n\62\3" +
					"\62\3\62\5\62\u02f8\n\62\3\62\3\62\5\62\u02fc\n\62\3\62\7\62\u02ff\n\62" +
					"\f\62\16\62\u0302\13\62\3\63\3\63\5\63\u0306\n\63\3\63\3\63\5\63\u030a" +
					"\n\63\3\63\3\63\5\63\u030e\n\63\3\63\3\63\5\63\u0312\n\63\3\63\3\63\5" +
					"\63\u0316\n\63\3\63\3\63\5\63\u031a\n\63\3\63\7\63\u031d\n\63\f\63\16" +
					"\63\u0320\13\63\3\64\3\64\5\64\u0324\n\64\3\64\3\64\5\64\u0328\n\64\3" +
					"\64\7\64\u032b\n\64\f\64\16\64\u032e\13\64\3\65\3\65\5\65\u0332\n\65\7" +
					"\65\u0334\n\65\f\65\16\65\u0337\13\65\3\65\3\65\3\66\3\66\5\66\u033d\n" +
					"\66\3\66\3\66\3\66\3\66\3\66\5\66\u0344\n\66\3\66\3\66\5\66\u0348\n\66" +
					"\3\66\3\66\5\66\u034c\n\66\3\66\3\66\5\66\u0350\n\66\3\66\3\66\3\66\3" +
					"\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5" +
					"\66\u0363\n\66\3\66\5\66\u0366\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66" +
					"\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0375\n\66\f\66\16\66\u0378\13\66" +
					"\3\67\3\67\3\67\7\67\u037d\n\67\f\67\16\67\u0380\13\67\38\38\38\38\38" +
					"\38\38\38\58\u038a\n8\38\38\58\u038e\n8\38\38\58\u0392\n8\38\38\38\38" +
					"\38\58\u0399\n8\38\38\58\u039d\n8\38\38\58\u03a1\n8\38\38\58\u03a5\n8" +
					"\78\u03a7\n8\f8\168\u03aa\138\38\38\38\38\58\u03b0\n8\38\38\58\u03b4\n" +
					"8\38\38\58\u03b8\n8\38\38\38\38\58\u03be\n8\38\38\58\u03c2\n8\38\38\5" +
					"8\u03c6\n8\38\58\u03c9\n8\38\38\58\u03cd\n8\38\38\38\38\58\u03d3\n8\3" +
					"8\38\58\u03d7\n8\38\38\58\u03db\n8\38\38\38\38\58\u03e1\n8\38\38\58\u03e5" +
					"\n8\38\38\58\u03e9\n8\38\38\38\38\58\u03ef\n8\38\38\58\u03f3\n8\38\38" +
					"\58\u03f7\n8\38\38\38\38\58\u03fd\n8\38\38\58\u0401\n8\38\38\58\u0405" +
					"\n8\38\38\38\38\38\38\58\u040d\n8\39\39\59\u0411\n9\39\39\39\59\u0416" +
					"\n9\39\39\39\59\u041b\n9\39\39\39\59\u0420\n9\39\39\39\59\u0425\n9\39" +
					"\39\39\59\u042a\n9\39\39\39\59\u042f\n9\39\59\u0432\n9\3:\3:\5:\u0436" +
					"\n:\3:\3:\5:\u043a\n:\3:\3:\3;\3;\5;\u0440\n;\3;\6;\u0443\n;\r;\16;\u0444" +
					"\3<\3<\5<\u0449\n<\3<\5<\u044c\n<\3=\3=\3=\3=\3=\3=\3>\3>\5>\u0456\n>" +
					"\3>\3>\5>\u045a\n>\3>\3>\5>\u045e\n>\5>\u0460\n>\3>\3>\5>\u0464\n>\3>" +
					"\3>\5>\u0468\n>\3>\3>\5>\u046c\n>\7>\u046e\n>\f>\16>\u0471\13>\5>\u0473" +
					"\n>\3>\3>\3?\3?\3@\3@\3@\5@\u047c\n@\3@\3@\5@\u0480\n@\3@\3@\3A\5A\u0485" +
					"\nA\3A\3A\5A\u0489\nA\3A\3A\3A\3A\5A\u048f\nA\3B\3B\3C\3C\5C\u0495\nC" +
					"\3D\3D\5D\u0499\nD\3D\3D\5D\u049d\nD\3D\3D\5D\u04a1\nD\3D\3D\5D\u04a5" +
					"\nD\3D\3D\5D\u04a9\nD\3D\3D\5D\u04ad\nD\3D\3D\5D\u04b1\nD\3D\3D\5D\u04b5" +
					"\nD\7D\u04b7\nD\fD\16D\u04ba\13D\5D\u04bc\nD\3D\3D\3E\3E\3E\5E\u04c3\n" +
					"E\3F\3F\5F\u04c7\nF\3F\6F\u04ca\nF\rF\16F\u04cb\3G\3G\3H\3H\3I\3I\5I\u04d4" +
					"\nI\3J\6J\u04d7\nJ\rJ\16J\u04d8\3J\5J\u04dc\nJ\3J\3J\5J\u04e0\nJ\3J\3" +
					"J\3K\7K\u04e5\nK\fK\16K\u04e8\13K\3K\5K\u04eb\nK\3K\3K\3K\3L\3L\3M\6M" +
					"\u04f3\nM\rM\16M\u04f4\3N\3N\3O\3O\3P\3P\3Q\3Q\3Q\2\2R\2\4\6\b\n\f\16" +
					"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd" +
					"fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092" +
					"\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\2\16\3\2UV\3\2WX\3\2\20\21" +
					"\4\2\13\13\35\35\3\28:\4\2\34\34??\3\2!\"\4\299<<\5\2;;Aloo\4\2\30\30" +
					"#&\4\2\31\31\'*\4\2\21\21+\65\u05af\2\u00a3\3\2\2\2\4\u00af\3\2\2\2\6" +
					"\u00b1\3\2\2\2\b\u00b3\3\2\2\2\n\u00bd\3\2\2\2\f\u00d4\3\2\2\2\16\u00df" +
					"\3\2\2\2\20\u00e3\3\2\2\2\22\u00f0\3\2\2\2\24\u00fa\3\2\2\2\26\u0113\3" +
					"\2\2\2\30\u0115\3\2\2\2\32\u011b\3\2\2\2\34\u0133\3\2\2\2\36\u0149\3\2" +
					"\2\2 \u014b\3\2\2\2\"\u015f\3\2\2\2$\u016e\3\2\2\2&\u017a\3\2\2\2(\u017c" +
					"\3\2\2\2*\u01a8\3\2\2\2,\u01b1\3\2\2\2.\u01b3\3\2\2\2\60\u01c2\3\2\2\2" +
					"\62\u01c6\3\2\2\2\64\u01d3\3\2\2\2\66\u01d5\3\2\2\28\u01d9\3\2\2\2:\u01f2" +
					"\3\2\2\2<\u01f4\3\2\2\2>\u0204\3\2\2\2@\u0206\3\2\2\2B\u021e\3\2\2\2D" +
					"\u0264\3\2\2\2F\u0266\3\2\2\2H\u027a\3\2\2\2J\u027c\3\2\2\2L\u028e\3\2" +
					"\2\2N\u0298\3\2\2\2P\u029b\3\2\2\2R\u02b1\3\2\2\2T\u02b3\3\2\2\2V\u02b5" +
					"\3\2\2\2X\u02b7\3\2\2\2Z\u02c2\3\2\2\2\\\u02cd\3\2\2\2^\u02de\3\2\2\2" +
					"`\u02e3\3\2\2\2b\u02ed\3\2\2\2d\u0303\3\2\2\2f\u0321\3\2\2\2h\u0335\3" +
					"\2\2\2j\u033a\3\2\2\2l\u0379\3\2\2\2n\u040c\3\2\2\2p\u0431\3\2\2\2r\u0433" +
					"\3\2\2\2t\u043d\3\2\2\2v\u0446\3\2\2\2x\u044d\3\2\2\2z\u0453\3\2\2\2|" +
					"\u0476\3\2\2\2~\u0478\3\2\2\2\u0080\u0484\3\2\2\2\u0082\u0490\3\2\2\2" +
					"\u0084\u0494\3\2\2\2\u0086\u0496\3\2\2\2\u0088\u04bf\3\2\2\2\u008a\u04c4" +
					"\3\2\2\2\u008c\u04cd\3\2\2\2\u008e\u04cf\3\2\2\2\u0090\u04d3\3\2\2\2\u0092" +
					"\u04db\3\2\2\2\u0094\u04ea\3\2\2\2\u0096\u04ef\3\2\2\2\u0098\u04f2\3\2" +
					"\2\2\u009a\u04f6\3\2\2\2\u009c\u04f8\3\2\2\2\u009e\u04fa\3\2\2\2\u00a0" +
					"\u04fc\3\2\2\2\u00a2\u00a4\5\u0098M\2\u00a3\u00a2\3\2\2\2\u00a3\u00a4" +
					"\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00aa\5\4\3\2\u00a6\u00a8\5\u0098M" +
					"\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00ab" +
					"\7\3\2\2\u00aa\u00a7\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac" +
					"\u00ae\5\u0098M\2\u00ad\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\3\3\2" +
					"\2\2\u00af\u00b0\5\6\4\2\u00b0\5\3\2\2\2\u00b1\u00b2\5\b\5\2\u00b2\7\3" +
					"\2\2\2\u00b3\u00ba\5\n\6\2\u00b4\u00b6\5\u0098M\2\u00b5\u00b4\3\2\2\2" +
					"\u00b5\u00b6\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\5\f\7\2\u00b8\u00b5" +
					"\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00b8\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb" +
					"\t\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00c4\5\16\b\2\u00be\u00c0\5\u0098" +
					"M\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1" +
					"\u00c3\5\16\b\2\u00c2\u00bf\3\2\2\2\u00c3\u00c6\3\2\2\2\u00c4\u00c2\3" +
					"\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\13\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c7" +
					"\u00c8\7A\2\2\u00c8\u00c9\5\u0098M\2\u00c9\u00cb\7B\2\2\u00ca\u00cc\5" +
					"\u0098M\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd\3\2\2\2" +
					"\u00cd\u00ce\5\n\6\2\u00ce\u00d5\3\2\2\2\u00cf\u00d1\7A\2\2\u00d0\u00d2" +
					"\5\u0098M\2\u00d1\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\3\2\2" +
					"\2\u00d3\u00d5\5\n\6\2\u00d4\u00c7\3\2\2\2\u00d4\u00cf\3\2\2\2\u00d5\r" +
					"\3\2\2\2\u00d6\u00e0\5\20\t\2\u00d7\u00e0\5\22\n\2\u00d8\u00e0\5\24\13" +
					"\2\u00d9\u00e0\5\30\r\2\u00da\u00e0\5\32\16\2\u00db\u00e0\5\36\20\2\u00dc" +
					"\u00e0\5 \21\2\u00dd\u00e0\5$\23\2\u00de\u00e0\5&\24\2\u00df\u00d6\3\2" +
					"\2\2\u00df\u00d7\3\2\2\2\u00df\u00d8\3\2\2\2\u00df\u00d9\3\2\2\2\u00df" +
					"\u00da\3\2\2\2\u00df\u00db\3\2\2\2\u00df\u00dc\3\2\2\2\u00df\u00dd\3\2" +
					"\2\2\u00df\u00de\3\2\2\2\u00e0\17\3\2\2\2\u00e1\u00e2\7C\2\2\u00e2\u00e4" +
					"\5\u0098M\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e5\3\2\2" +
					"\2\u00e5\u00e7\7D\2\2\u00e6\u00e8\5\u0098M\2\u00e7\u00e6\3\2\2\2\u00e7" +
					"\u00e8\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00ee\58\35\2\u00ea\u00ec\5\u0098" +
					"M\2\u00eb\u00ea\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed" +
					"\u00ef\5\66\34\2\u00ee\u00eb\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\21\3\2" +
					"\2\2\u00f0\u00f2\7E\2\2\u00f1\u00f3\5\u0098M\2\u00f2\u00f1\3\2\2\2\u00f2" +
					"\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\5V,\2\u00f5\u00f6\5\u0098" +
					"M\2\u00f6\u00f7\7F\2\2\u00f7\u00f8\5\u0098M\2\u00f8\u00f9\5\u0082B\2\u00f9" +
					"\23\3\2\2\2\u00fa\u00fc\7G\2\2\u00fb\u00fd\5\u0098M\2\u00fc\u00fb\3\2" +
					"\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0104\5:\36\2\u00ff" +
					"\u0100\5\u0098M\2\u0100\u0101\5\26\f\2\u0101\u0103\3\2\2\2\u0102\u00ff" +
					"\3\2\2\2\u0103\u0106\3\2\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105" +
					"\25\3\2\2\2\u0106\u0104\3\2\2\2\u0107\u0108\7H\2\2\u0108\u0109\5\u0098" +
					"M\2\u0109\u010a\7D\2\2\u010a\u010b\5\u0098M\2\u010b\u010c\5\32\16\2\u010c" +
					"\u0114\3\2\2\2\u010d\u010e\7H\2\2\u010e\u010f\5\u0098M\2\u010f\u0110\7" +
					"I\2\2\u0110\u0111\5\u0098M\2\u0111\u0112\5\32\16\2\u0112\u0114\3\2\2\2" +
					"\u0113\u0107\3\2\2\2\u0113\u010d\3\2\2\2\u0114\27\3\2\2\2\u0115\u0117" +
					"\7I\2\2\u0116\u0118\5\u0098M\2\u0117\u0116\3\2\2\2\u0117\u0118\3\2\2\2" +
					"\u0118\u0119\3\2\2\2\u0119\u011a\58\35\2\u011a\31\3\2\2\2\u011b\u011c" +
					"\7J\2\2\u011c\u0121\5\34\17\2\u011d\u011e\7\4\2\2\u011e\u0120\5\34\17" +
					"\2\u011f\u011d\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122" +
					"\3\2\2\2\u0122\33\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0125\5\u008aF\2\u0125" +
					"\u0126\7\5\2\2\u0126\u0127\5V,\2\u0127\u0134\3\2\2\2\u0128\u0129\5\u0082" +
					"B\2\u0129\u012a\7\5\2\2\u012a\u012b\5V,\2\u012b\u0134\3\2\2\2\u012c\u012d" +
					"\5\u0082B\2\u012d\u012e\7\6\2\2\u012e\u012f\5V,\2\u012f\u0134\3\2\2\2" +
					"\u0130\u0131\5\u0082B\2\u0131\u0132\5L\'\2\u0132\u0134\3\2\2\2\u0133\u0124" +
					"\3\2\2\2\u0133\u0128\3\2\2\2\u0133\u012c\3\2\2\2\u0133\u0130\3\2\2\2\u0134" +
					"\35\3\2\2\2\u0135\u0136\7K\2\2\u0136\u013b\5V,\2\u0137\u0138\7\4\2\2\u0138" +
					"\u013a\5V,\2\u0139\u0137\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3\2\2" +
					"\2\u013b\u013c\3\2\2\2\u013c\u014a\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u013f" +
					"\7L\2\2\u013f\u0140\5\u0098M\2\u0140\u0141\7K\2\2\u0141\u0146\5V,\2\u0142" +
					"\u0143\7\4\2\2\u0143\u0145\5V,\2\u0144\u0142\3\2\2\2\u0145\u0148\3\2\2" +
					"\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146" +
					"\3\2\2\2\u0149\u0135\3\2\2\2\u0149\u013e\3\2\2\2\u014a\37\3\2\2\2\u014b" +
					"\u014c\7M\2\2\u014c\u014d\5\u0098M\2\u014d\u0158\5\"\22\2\u014e\u0150" +
					"\5\u0098M\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2" +
					"\2\u0151\u0153\7\4\2\2\u0152\u0154\5\u0098M\2\u0153\u0152\3\2\2\2\u0153" +
					"\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157\5\"\22\2\u0156\u014f\3" +
					"\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159" +
					"!\3\2\2\2\u015a\u0158\3\2\2\2\u015b\u015c\5\u0082B\2\u015c\u015d\5L\'" +
					"\2\u015d\u0160\3\2\2\2\u015e\u0160\5\u008aF\2\u015f\u015b\3\2\2\2\u015f" +
					"\u015e\3\2\2\2\u0160#\3\2\2\2\u0161\u0162\7N\2\2\u0162\u0163\7O\2\2\u0163" +
					"\u0164\5\u0098M\2\u0164\u0166\5(\25\2\u0165\u0167\5\66\34\2\u0166\u0165" +
					"\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016f\3\2\2\2\u0168\u0169\7N\2\2\u0169" +
					"\u016a\5\u0098M\2\u016a\u016c\5(\25\2\u016b\u016d\5\66\34\2\u016c\u016b" +
					"\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e\u0161\3\2\2\2\u016e" +
					"\u0168\3\2\2\2\u016f%\3\2\2\2\u0170\u0171\7P\2\2\u0171\u0172\5\u0098M" +
					"\2\u0172\u0173\7O\2\2\u0173\u0174\5\u0098M\2\u0174\u0175\5(\25\2\u0175" +
					"\u017b\3\2\2\2\u0176\u0177\7P\2\2\u0177\u0178\5\u0098M\2\u0178\u0179\5" +
					"(\25\2\u0179\u017b\3\2\2\2\u017a\u0170\3\2\2\2\u017a\u0176\3\2\2\2\u017b" +
					"\'\3\2\2\2\u017c\u0180\5*\26\2\u017d\u017e\5\u0098M\2\u017e\u017f\5.\30" +
					"\2\u017f\u0181\3\2\2\2\u0180\u017d\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0185" +
					"\3\2\2\2\u0182\u0183\5\u0098M\2\u0183\u0184\5\60\31\2\u0184\u0186\3\2" +
					"\2\2\u0185\u0182\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u018a\3\2\2\2\u0187" +
					"\u0188\5\u0098M\2\u0188\u0189\5\62\32\2\u0189\u018b\3\2\2\2\u018a\u0187" +
					"\3\2\2\2\u018a\u018b\3\2\2\2\u018b)\3\2\2\2\u018c\u0197\7\7\2\2\u018d" +
					"\u018f\5\u0098M\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190" +
					"\3\2\2\2\u0190\u0192\7\4\2\2\u0191\u0193\5\u0098M\2\u0192\u0191\3\2\2" +
					"\2\u0192\u0193\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0196\5,\27\2\u0195\u018e" +
					"\3\2\2\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198" +
					"\u01a9\3\2\2\2\u0199\u0197\3\2\2\2\u019a\u01a5\5,\27\2\u019b\u019d\5\u0098" +
					"M\2\u019c\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019e\3\2\2\2\u019e" +
					"\u01a0\7\4\2\2\u019f\u01a1\5\u0098M\2\u01a0\u019f\3\2\2\2\u01a0\u01a1" +
					"\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\5,\27\2\u01a3\u019c\3\2\2\2\u01a4" +
					"\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01a9\3\2" +
					"\2\2\u01a7\u01a5\3\2\2\2\u01a8\u018c\3\2\2\2\u01a8\u019a\3\2\2\2\u01a9" +
					"+\3\2\2\2\u01aa\u01ab\5V,\2\u01ab\u01ac\5\u0098M\2\u01ac\u01ad\7F\2\2" +
					"\u01ad\u01ae\5\u0098M\2\u01ae\u01af\5\u0082B\2\u01af\u01b2\3\2\2\2\u01b0" +
					"\u01b2\5V,\2\u01b1\u01aa\3\2\2\2\u01b1\u01b0\3\2\2\2\u01b2-\3\2\2\2\u01b3" +
					"\u01b4\7Q\2\2\u01b4\u01b5\5\u0098M\2\u01b5\u01b6\7R\2\2\u01b6\u01b7\5" +
					"\u0098M\2\u01b7\u01bf\5\64\33\2\u01b8\u01ba\7\4\2\2\u01b9\u01bb\5\u0098" +
					"M\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc" +
					"\u01be\5\64\33\2\u01bd\u01b8\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3" +
					"\2\2\2\u01bf\u01c0\3\2\2\2\u01c0/\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c3" +
					"\7S\2\2\u01c3\u01c4\5\u0098M\2\u01c4\u01c5\5V,\2\u01c5\61\3\2\2\2\u01c6" +
					"\u01c7\7T\2\2\u01c7\u01c8\5\u0098M\2\u01c8\u01c9\5V,\2\u01c9\63\3\2\2" +
					"\2\u01ca\u01cb\5V,\2\u01cb\u01cc\5\u0098M\2\u01cc\u01cd\t\2\2\2\u01cd" +
					"\u01d4\3\2\2\2\u01ce\u01cf\5V,\2\u01cf\u01d0\5\u0098M\2\u01d0\u01d1\t" +
					"\3\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d4\5V,\2\u01d3\u01ca\3\2\2\2\u01d3" +
					"\u01ce\3\2\2\2\u01d3\u01d2\3\2\2\2\u01d4\65\3\2\2\2\u01d5\u01d6\7Y\2\2" +
					"\u01d6\u01d7\5\u0098M\2\u01d7\u01d8\5V,\2\u01d8\67\3\2\2\2\u01d9\u01e4" +
					"\5:\36\2\u01da\u01dc\5\u0098M\2\u01db\u01da\3\2\2\2\u01db\u01dc\3\2\2" +
					"\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\7\4\2\2\u01de\u01e0\5\u0098M\2\u01df" +
					"\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3\5:" +
					"\36\2\u01e2\u01db\3\2\2\2\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4" +
					"\u01e5\3\2\2\2\u01e59\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e7\u01e9\5\u0082" +
					"B\2\u01e8\u01ea\5\u0098M\2\u01e9\u01e8\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea" +
					"\u01eb\3\2\2\2\u01eb\u01ed\7\5\2\2\u01ec\u01ee\5\u0098M\2\u01ed\u01ec" +
					"\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\5<\37\2\u01f0" +
					"\u01f3\3\2\2\2\u01f1\u01f3\5<\37\2\u01f2\u01e7\3\2\2\2\u01f2\u01f1\3\2" +
					"\2\2\u01f3;\3\2\2\2\u01f4\u01f5\5> \2\u01f5=\3\2\2\2\u01f6\u01fd\5@!\2" +
					"\u01f7\u01f9\5\u0098M\2\u01f8\u01f7\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9" +
					"\u01fa\3\2\2\2\u01fa\u01fc\5B\"\2\u01fb\u01f8\3\2\2\2\u01fc\u01ff\3\2" +
					"\2\2\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0205\3\2\2\2\u01ff" +
					"\u01fd\3\2\2\2\u0200\u0201\7\b\2\2\u0201\u0202\5> \2\u0202\u0203\7\t\2" +
					"\2\u0203\u0205\3\2\2\2\u0204\u01f6\3\2\2\2\u0204\u0200\3\2\2\2\u0205?" +
					"\3\2\2\2\u0206\u0208\7\b\2\2\u0207\u0209\5\u0098M\2\u0208\u0207\3\2\2" +
					"\2\u0208\u0209\3\2\2\2\u0209\u020e\3\2\2\2\u020a\u020c\5\u0082B\2\u020b" +
					"\u020d\5\u0098M\2\u020c\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020f" +
					"\3\2\2\2\u020e\u020a\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0214\3\2\2\2\u0210" +
					"\u0212\5L\'\2\u0211\u0213\5\u0098M\2\u0212\u0211\3\2\2\2\u0212\u0213\3" +
					"\2\2\2\u0213\u0215\3\2\2\2\u0214\u0210\3\2\2\2\u0214\u0215\3\2\2\2\u0215" +
					"\u021a\3\2\2\2\u0216\u0218\5H%\2\u0217\u0219\5\u0098M\2\u0218\u0217\3" +
					"\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b\3\2\2\2\u021a\u0216\3\2\2\2\u021a" +
					"\u021b\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d\7\t\2\2\u021dA\3\2\2\2" +
					"\u021e\u0220\5D#\2\u021f\u0221\5\u0098M\2\u0220\u021f\3\2\2\2\u0220\u0221" +
					"\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223\5@!\2\u0223C\3\2\2\2\u0224\u0226" +
					"\5\u009aN\2\u0225\u0227\5\u0098M\2\u0226\u0225\3\2\2\2\u0226\u0227\3\2" +
					"\2\2\u0227\u0228\3\2\2\2\u0228\u022a\5\u009eP\2\u0229\u022b\5\u0098M\2" +
					"\u022a\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022d\3\2\2\2\u022c\u022e" +
					"\5F$\2\u022d\u022c\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f" +
					"\u0231\5\u0098M\2\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0232" +
					"\3\2\2\2\u0232\u0234\5\u009eP\2\u0233\u0235\5\u0098M\2\u0234\u0233\3\2" +
					"\2\2\u0234\u0235\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0237\5\u009cO\2\u0237" +
					"\u0265\3\2\2\2\u0238\u023a\5\u009aN\2\u0239\u023b\5\u0098M\2\u023a\u0239" +
					"\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023e\5\u009eP" +
					"\2\u023d\u023f\5\u0098M\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f" +
					"\u0241\3\2\2\2\u0240\u0242\5F$\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2" +
					"\2\u0242\u0244\3\2\2\2\u0243\u0245\5\u0098M\2\u0244\u0243\3\2\2\2\u0244" +
					"\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\5\u009eP\2\u0247\u0265" +
					"\3\2\2\2\u0248\u024a\5\u009eP\2\u0249\u024b\5\u0098M\2\u024a\u0249\3\2" +
					"\2\2\u024a\u024b\3\2\2\2\u024b\u024d\3\2\2\2\u024c\u024e\5F$\2\u024d\u024c" +
					"\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\3\2\2\2\u024f\u0251\5\u0098M" +
					"\2\u0250\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0254" +
					"\5\u009eP\2\u0253\u0255\5\u0098M\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2" +
					"\2\2\u0255\u0256\3\2\2\2\u0256\u0257\5\u009cO\2\u0257\u0265\3\2\2\2\u0258" +
					"\u025a\5\u009eP\2\u0259\u025b\5\u0098M\2\u025a\u0259\3\2\2\2\u025a\u025b" +
					"\3\2\2\2\u025b\u025d\3\2\2\2\u025c\u025e\5F$\2\u025d\u025c\3\2\2\2\u025d" +
					"\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f\u0261\5\u0098M\2\u0260\u025f" +
					"\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0263\5\u009eP" +
					"\2\u0263\u0265\3\2\2\2\u0264\u0224\3\2\2\2\u0264\u0238\3\2\2\2\u0264\u0248" +
					"\3\2\2\2\u0264\u0258\3\2\2\2\u0265E\3\2\2\2\u0266\u0268\7\n\2\2\u0267" +
					"\u0269\5\u0082B\2\u0268\u0267\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b" +
					"\3\2\2\2\u026a\u026c\7\13\2\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2" +
					"\u026c\u026e\3\2\2\2\u026d\u026f\5J&\2\u026e\u026d\3\2\2\2\u026e\u026f" +
					"\3\2\2\2\u026f\u0271\3\2\2\2\u0270\u0272\5P)\2\u0271\u0270\3\2\2\2\u0271" +
					"\u0272\3\2\2\2\u0272\u0274\3\2\2\2\u0273\u0275\5H%\2\u0274\u0273\3\2\2" +
					"\2\u0274\u0275\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\7\f\2\2\u0277G" +
					"\3\2\2\2\u0278\u027b\5\u0086D\2\u0279\u027b\5\u0088E\2\u027a\u0278\3\2" +
					"\2\2\u027a\u0279\3\2\2\2\u027bI\3\2\2\2\u027c\u027d\7\r\2\2\u027d\u028b" +
					"\5T+\2\u027e\u0280\5\u0098M\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2" +
					"\u0280\u0281\3\2\2\2\u0281\u0283\7\16\2\2\u0282\u0284\7\r\2\2\u0283\u0282" +
					"\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0286\3\2\2\2\u0285\u0287\5\u0098M" +
					"\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028a" +
					"\5T+\2\u0289\u027f\3\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289\3\2\2\2\u028b" +
					"\u028c\3\2\2\2\u028cK\3\2\2\2\u028d\u028b\3\2\2\2\u028e\u0295\5N(\2\u028f" +
					"\u0291\5\u0098M\2\u0290\u028f\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292" +
					"\3\2\2\2\u0292\u0294\5N(\2\u0293\u0290\3\2\2\2\u0294\u0297\3\2\2\2\u0295" +
					"\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296M\3\2\2\2\u0297\u0295\3\2\2\2" +
					"\u0298\u0299\7\r\2\2\u0299\u029a\5R*\2\u029aO\3\2\2\2\u029b\u029d\7\7" +
					"\2\2\u029c\u029e\5\u0098M\2\u029d\u029c\3\2\2\2\u029d\u029e\3\2\2\2\u029e" +
					"\u02a3\3\2\2\2\u029f\u02a1\5\u008eH\2\u02a0\u02a2\5\u0098M\2\u02a1\u02a0" +
					"\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a4\3\2\2\2\u02a3\u029f\3\2\2\2\u02a3" +
					"\u02a4\3\2\2\2\u02a4\u02af\3\2\2\2\u02a5\u02a7\7\17\2\2\u02a6\u02a8\5" +
					"\u0098M\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02ad\3\2\2\2" +
					"\u02a9\u02ab\5\u008eH\2\u02aa\u02ac\5\u0098M\2\u02ab\u02aa\3\2\2\2\u02ab" +
					"\u02ac\3\2\2\2\u02ac\u02ae\3\2\2\2\u02ad\u02a9\3\2\2\2\u02ad\u02ae\3\2" +
					"\2\2\u02ae\u02b0\3\2\2\2\u02af\u02a5\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0" +
					"Q\3\2\2\2\u02b1\u02b2\5\u0096L\2\u02b2S\3\2\2\2\u02b3\u02b4\5\u0096L\2" +
					"\u02b4U\3\2\2\2\u02b5\u02b6\5X-\2\u02b6W\3\2\2\2\u02b7\u02bf\5Z.\2\u02b8" +
					"\u02b9\5\u0098M\2\u02b9\u02ba\7Z\2\2\u02ba\u02bb\5\u0098M\2\u02bb\u02bc" +
					"\5Z.\2\u02bc\u02be\3\2\2\2\u02bd\u02b8\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf" +
					"\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0Y\3\2\2\2\u02c1\u02bf\3\2\2\2" +
					"\u02c2\u02ca\5\\/\2\u02c3\u02c4\5\u0098M\2\u02c4\u02c5\7[\2\2\u02c5\u02c6" +
					"\5\u0098M\2\u02c6\u02c7\5\\/\2\u02c7\u02c9\3\2\2\2\u02c8\u02c3\3\2\2\2" +
					"\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb[\3" +
					"\2\2\2\u02cc\u02ca\3\2\2\2\u02cd\u02d5\5^\60\2\u02ce\u02cf\5\u0098M\2" +
					"\u02cf\u02d0\7\\\2\2\u02d0\u02d1\5\u0098M\2\u02d1\u02d2\5^\60\2\u02d2" +
					"\u02d4\3\2\2\2\u02d3\u02ce\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5\u02d3\3\2" +
					"\2\2\u02d5\u02d6\3\2\2\2\u02d6]\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d8\u02d9" +
					"\5\u0098M\2\u02d9\u02da\7]\2\2\u02da\u02db\5\u0098M\2\u02db\u02dd\3\2" +
					"\2\2\u02dc\u02d8\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de\u02dc\3\2\2\2\u02de" +
					"\u02df\3\2\2\2\u02df\u02e1\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1\u02e2\5`" +
					"\61\2\u02e2_\3\2\2\2\u02e3\u02ea\5b\62\2\u02e4\u02e6\5\u0098M\2\u02e5" +
					"\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e9\5p" +
					"9\2\u02e8\u02e5\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea" +
					"\u02eb\3\2\2\2\u02eba\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ed\u0300\5d\63\2" +
					"\u02ee\u02f0\5\u0098M\2\u02ef\u02ee\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0" +
					"\u02f1\3\2\2\2\u02f1\u02f3\7\20\2\2\u02f2\u02f4\5\u0098M\2\u02f3\u02f2" +
					"\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02ff\5d\63\2\u02f6" +
					"\u02f8\5\u0098M\2\u02f7\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9" +
					"\3\2\2\2\u02f9\u02fb\7\21\2\2\u02fa\u02fc\5\u0098M\2\u02fb\u02fa\3\2\2" +
					"\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02ff\5d\63\2\u02fe\u02ef" +
					"\3\2\2\2\u02fe\u02f7\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300" +
					"\u0301\3\2\2\2\u0301c\3\2\2\2\u0302\u0300\3\2\2\2\u0303\u031e\5f\64\2" +
					"\u0304\u0306\5\u0098M\2\u0305\u0304\3\2\2\2\u0305\u0306\3\2\2\2\u0306" +
					"\u0307\3\2\2\2\u0307\u0309\7\7\2\2\u0308\u030a\5\u0098M\2\u0309\u0308" +
					"\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u031d\5f\64\2\u030c" +
					"\u030e\5\u0098M\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f" +
					"\3\2\2\2\u030f\u0311\7\22\2\2\u0310\u0312\5\u0098M\2\u0311\u0310\3\2\2" +
					"\2\u0311\u0312\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u031d\5f\64\2\u0314\u0316" +
					"\5\u0098M\2\u0315\u0314\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2" +
					"\2\u0317\u0319\7\23\2\2\u0318\u031a\5\u0098M\2\u0319\u0318\3\2\2\2\u0319" +
					"\u031a\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d\5f\64\2\u031c\u0305\3\2" +
					"\2\2\u031c\u030d\3\2\2\2\u031c\u0315\3\2\2\2\u031d\u0320\3\2\2\2\u031e" +
					"\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031fe\3\2\2\2\u0320\u031e\3\2\2\2" +
					"\u0321\u032c\5h\65\2\u0322\u0324\5\u0098M\2\u0323\u0322\3\2\2\2\u0323" +
					"\u0324\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0327\7\24\2\2\u0326\u0328\5" +
					"\u0098M\2\u0327\u0326\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0329\3\2\2\2" +
					"\u0329\u032b\5h\65\2\u032a\u0323\3\2\2\2\u032b\u032e\3\2\2\2\u032c\u032a" +
					"\3\2\2\2\u032c\u032d\3\2\2\2\u032dg\3\2\2\2\u032e\u032c\3\2\2\2\u032f" +
					"\u0331\t\4\2\2\u0330\u0332\5\u0098M\2\u0331\u0330\3\2\2\2\u0331\u0332" +
					"\3\2\2\2\u0332\u0334\3\2\2\2\u0333\u032f\3\2\2\2\u0334\u0337\3\2\2\2\u0335" +
					"\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3\2" +
					"\2\2\u0338\u0339\5j\66\2\u0339i\3\2\2\2\u033a\u0376\5l\67\2\u033b\u033d" +
					"\5\u0098M\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033e\3\2\2" +
					"\2\u033e\u033f\7\n\2\2\u033f\u0340\5V,\2\u0340\u0341\7\f\2\2\u0341\u0375" +
					"\3\2\2\2\u0342\u0344\5\u0098M\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2" +
					"\2\u0344\u0345\3\2\2\2\u0345\u0347\7\n\2\2\u0346\u0348\5V,\2\u0347\u0346" +
					"\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034b\7\17\2\2" +
					"\u034a\u034c\5V,\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d" +
					"\3\2\2\2\u034d\u0375\7\f\2\2\u034e\u0350\5\u0098M\2\u034f\u034e\3\2\2" +
					"\2\u034f\u0350\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0363\7\25\2\2\u0352" +
					"\u0353\5\u0098M\2\u0353\u0354\7^\2\2\u0354\u0363\3\2\2\2\u0355\u0356\5" +
					"\u0098M\2\u0356\u0357\7_\2\2\u0357\u0358\5\u0098M\2\u0358\u0359\7N\2\2" +
					"\u0359\u0363\3\2\2\2\u035a\u035b\5\u0098M\2\u035b\u035c\7`\2\2\u035c\u035d" +
					"\5\u0098M\2\u035d\u035e\7N\2\2\u035e\u0363\3\2\2\2\u035f\u0360\5\u0098" +
					"M\2\u0360\u0361\7a\2\2\u0361\u0363\3\2\2\2\u0362\u034f\3\2\2\2\u0362\u0352" +
					"\3\2\2\2\u0362\u0355\3\2\2\2\u0362\u035a\3\2\2\2\u0362\u035f\3\2\2\2\u0363" +
					"\u0365\3\2\2\2\u0364\u0366\5\u0098M\2\u0365\u0364\3\2\2\2\u0365\u0366" +
					"\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0375\5l\67\2\u0368\u0369\5\u0098M" +
					"\2\u0369\u036a\7b\2\2\u036a\u036b\5\u0098M\2\u036b\u036c\7c\2\2\u036c" +
					"\u0375\3\2\2\2\u036d\u036e\5\u0098M\2\u036e\u036f\7b\2\2\u036f\u0370\5" +
					"\u0098M\2\u0370\u0371\7]\2\2\u0371\u0372\5\u0098M\2\u0372\u0373\7c\2\2" +
					"\u0373\u0375\3\2\2\2\u0374\u033c\3\2\2\2\u0374\u0343\3\2\2\2\u0374\u0362" +
					"\3\2\2\2\u0374\u0368\3\2\2\2\u0374\u036d\3\2\2\2\u0375\u0378\3\2\2\2\u0376" +
					"\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377k\3\2\2\2\u0378\u0376\3\2\2\2" +
					"\u0379\u037e\5n8\2\u037a\u037d\5\u0080A\2\u037b\u037d\5L\'\2\u037c\u037a" +
					"\3\2\2\2\u037c\u037b\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037e" +
					"\u037f\3\2\2\2\u037fm\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u040d\5\u0084" +
					"C\2\u0382\u040d\7\66\2\2\u0383\u040d\5\u0088E\2\u0384\u040d\7d\2\2\u0385" +
					"\u040d\7e\2\2\u0386\u040d\7c\2\2\u0387\u0389\7f\2\2\u0388\u038a\5\u0098" +
					"M\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\3\2\2\2\u038b" +
					"\u038d\7\b\2\2\u038c\u038e\5\u0098M\2\u038d\u038c\3\2\2\2\u038d\u038e" +
					"\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0391\7\7\2\2\u0390\u0392\5\u0098M" +
					"\2\u0391\u0390\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u040d" +
					"\7\t\2\2\u0394\u040d\5\u0086D\2\u0395\u040d\5~@\2\u0396\u0398\7\n\2\2" +
					"\u0397\u0399\5\u0098M\2\u0398\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399" +
					"\u039a\3\2\2\2\u039a\u039c\5V,\2\u039b\u039d\5\u0098M\2\u039c\u039b\3" +
					"\2\2\2\u039c\u039d\3\2\2\2\u039d\u03a8\3\2\2\2\u039e\u03a0\7\4\2\2\u039f" +
					"\u03a1\5\u0098M\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2" +
					"\3\2\2\2\u03a2\u03a4\5V,\2\u03a3\u03a5\5\u0098M\2\u03a4\u03a3\3\2\2\2" +
					"\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6\u039e\3\2\2\2\u03a7\u03aa" +
					"\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\3\2\2\2\u03aa" +
					"\u03a8\3\2\2\2\u03ab\u03ac\7\f\2\2\u03ac\u040d\3\2\2\2\u03ad\u03af\7g" +
					"\2\2\u03ae\u03b0\5\u0098M\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0" +
					"\u03b1\3\2\2\2\u03b1\u03b3\7\b\2\2\u03b2\u03b4\5\u0098M\2\u03b3\u03b2" +
					"\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b7\5v<\2\u03b6" +
					"\u03b8\5\u0098M\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9" +
					"\3\2\2\2\u03b9\u03ba\7\t\2\2\u03ba\u040d\3\2\2\2\u03bb\u03bd\7h\2\2\u03bc" +
					"\u03be\5\u0098M\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf" +
					"\3\2\2\2\u03bf\u03c1\7\b\2\2\u03c0\u03c2\5\u0098M\2\u03c1\u03c0\3\2\2" +
					"\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c5\5v<\2\u03c4\u03c6" +
					"\5\u0098M\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03cc\3\2\2" +
					"\2\u03c7\u03c9\5\u0098M\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9" +
					"\u03ca\3\2\2\2\u03ca\u03cb\7\16\2\2\u03cb\u03cd\5V,\2\u03cc\u03c8\3\2" +
					"\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\7\t\2\2\u03cf" +
					"\u040d\3\2\2\2\u03d0\u03d2\7B\2\2\u03d1\u03d3\5\u0098M\2\u03d2\u03d1\3" +
					"\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d6\7\b\2\2\u03d5" +
					"\u03d7\5\u0098M\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8" +
					"\3\2\2\2\u03d8\u03da\5v<\2\u03d9\u03db\5\u0098M\2\u03da\u03d9\3\2\2\2" +
					"\u03da\u03db\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\7\t\2\2\u03dd\u040d" +
					"\3\2\2\2\u03de\u03e0\7i\2\2\u03df\u03e1\5\u0098M\2\u03e0\u03df\3\2\2\2" +
					"\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e4\7\b\2\2\u03e3\u03e5" +
					"\5\u0098M\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2" +
					"\2\u03e6\u03e8\5v<\2\u03e7\u03e9\5\u0098M\2\u03e8\u03e7\3\2\2\2\u03e8" +
					"\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\7\t\2\2\u03eb\u040d\3\2" +
					"\2\2\u03ec\u03ee\7j\2\2\u03ed\u03ef\5\u0098M\2\u03ee\u03ed\3\2\2\2\u03ee" +
					"\u03ef\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f2\7\b\2\2\u03f1\u03f3\5\u0098" +
					"M\2\u03f2\u03f1\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4" +
					"\u03f6\5v<\2\u03f5\u03f7\5\u0098M\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3" +
					"\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\7\t\2\2\u03f9\u040d\3\2\2\2\u03fa" +
					"\u03fc\7k\2\2\u03fb\u03fd\5\u0098M\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3" +
					"\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0400\7\b\2\2\u03ff\u0401\5\u0098M\2" +
					"\u0400\u03ff\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404" +
					"\5v<\2\u0403\u0405\5\u0098M\2\u0404\u0403\3\2\2\2\u0404\u0405\3\2\2\2" +
					"\u0405\u0406\3\2\2\2\u0406\u0407\7\t\2\2\u0407\u040d\3\2\2\2\u0408\u040d" +
					"\5t;\2\u0409\u040d\5r:\2\u040a\u040d\5z>\2\u040b\u040d\5\u0082B\2\u040c" +
					"\u0381\3\2\2\2\u040c\u0382\3\2\2\2\u040c\u0383\3\2\2\2\u040c\u0384\3\2" +
					"\2\2\u040c\u0385\3\2\2\2\u040c\u0386\3\2\2\2\u040c\u0387\3\2\2\2\u040c" +
					"\u0394\3\2\2\2\u040c\u0395\3\2\2\2\u040c\u0396\3\2\2\2\u040c\u03ad\3\2" +
					"\2\2\u040c\u03bb\3\2\2\2\u040c\u03d0\3\2\2\2\u040c\u03de\3\2\2\2\u040c" +
					"\u03ec\3\2\2\2\u040c\u03fa\3\2\2\2\u040c\u0408\3\2\2\2\u040c\u0409\3\2" +
					"\2\2\u040c\u040a\3\2\2\2\u040c\u040b\3\2\2\2\u040do\3\2\2\2\u040e\u0410" +
					"\7\5\2\2\u040f\u0411\5\u0098M\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2" +
					"\2\u0411\u0412\3\2\2\2\u0412\u0432\5b\62\2\u0413\u0415\7\26\2\2\u0414" +
					"\u0416\5\u0098M\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417" +
					"\3\2\2\2\u0417\u0432\5b\62\2\u0418\u041a\7\27\2\2\u0419\u041b\5\u0098" +
					"M\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c" +
					"\u0432\5b\62\2\u041d\u041f\7\30\2\2\u041e\u0420\5\u0098M\2\u041f\u041e" +
					"\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0432\5b\62\2\u0422" +
					"\u0424\7\31\2\2\u0423\u0425\5\u0098M\2\u0424\u0423\3\2\2\2\u0424\u0425" +
					"\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0432\5b\62\2\u0427\u0429\7\32\2\2" +
					"\u0428\u042a\5\u0098M\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a" +
					"\u042b\3\2\2\2\u042b\u0432\5b\62\2\u042c\u042e\7\33\2\2\u042d\u042f\5" +
					"\u0098M\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430\3\2\2\2" +
					"\u0430\u0432\5b\62\2\u0431\u040e\3\2\2\2\u0431\u0413\3\2\2\2\u0431\u0418" +
					"\3\2\2\2\u0431\u041d\3\2\2\2\u0431\u0422\3\2\2\2\u0431\u0427\3\2\2\2\u0431" +
					"\u042c\3\2\2\2\u0432q\3\2\2\2\u0433\u0435\7\b\2\2\u0434\u0436\5\u0098" +
					"M\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\3\2\2\2\u0437" +
					"\u0439\5V,\2\u0438\u043a\5\u0098M\2\u0439\u0438\3\2\2\2\u0439\u043a\3" +
					"\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c\7\t\2\2\u043cs\3\2\2\2\u043d\u0442" +
					"\5@!\2\u043e\u0440\5\u0098M\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2" +
					"\u0440\u0441\3\2\2\2\u0441\u0443\5B\"\2\u0442\u043f\3\2\2\2\u0443\u0444" +
					"\3\2\2\2\u0444\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445u\3\2\2\2\u0446" +
					"\u044b\5x=\2\u0447\u0449\5\u0098M\2\u0448\u0447\3\2\2\2\u0448\u0449\3" +
					"\2\2\2\u0449\u044a\3\2\2\2\u044a\u044c\5\66\34\2\u044b\u0448\3\2\2\2\u044b" +
					"\u044c\3\2\2\2\u044cw\3\2\2\2\u044d\u044e\5\u0082B\2\u044e\u044f\5\u0098" +
					"M\2\u044f\u0450\7^\2\2\u0450\u0451\5\u0098M\2\u0451\u0452\5V,\2\u0452" +
					"y\3\2\2\2\u0453\u0455\5|?\2\u0454\u0456\5\u0098M\2\u0455\u0454\3\2\2\2" +
					"\u0455\u0456\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0459\7\b\2\2\u0458\u045a" +
					"\5\u0098M\2\u0459\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045f\3\2\2" +
					"\2\u045b\u045d\7O\2\2\u045c\u045e\5\u0098M\2\u045d\u045c\3\2\2\2\u045d" +
					"\u045e\3\2\2\2\u045e\u0460\3\2\2\2\u045f\u045b\3\2\2\2\u045f\u0460\3\2" +
					"\2\2\u0460\u0472\3\2\2\2\u0461\u0463\5V,\2\u0462\u0464\5\u0098M\2\u0463" +
					"\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u046f\3\2\2\2\u0465\u0467\7\4" +
					"\2\2\u0466\u0468\5\u0098M\2\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468" +
					"\u0469\3\2\2\2\u0469\u046b\5V,\2\u046a\u046c\5\u0098M\2\u046b\u046a\3" +
					"\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u0465\3\2\2\2\u046e" +
					"\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0473\3\2" +
					"\2\2\u0471\u046f\3\2\2\2\u0472\u0461\3\2\2\2\u0472\u0473\3\2\2\2\u0473" +
					"\u0474\3\2\2\2\u0474\u0475\7\t\2\2\u0475{\3\2\2\2\u0476\u0477\5\u0096" +
					"L\2\u0477}\3\2\2\2\u0478\u0479\7\n\2\2\u0479\u047f\5v<\2\u047a\u047c\5" +
					"\u0098M\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2" +
					"\u047d\u047e\7\16\2\2\u047e\u0480\5V,\2\u047f\u047b\3\2\2\2\u047f\u0480" +
					"\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\7\f\2\2\u0482\177\3\2\2\2\u0483" +
					"\u0485\5\u0098M\2\u0484\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486" +
					"\3\2\2\2\u0486\u0488\7\34\2\2\u0487\u0489\5\u0098M\2\u0488\u0487\3\2\2" +
					"\2\u0488\u0489\3\2\2\2\u0489\u048e\3\2\2\2\u048a\u048b\5\u008cG\2\u048b" +
					"\u048c\t\5\2\2\u048c\u048f\3\2\2\2\u048d\u048f\5\u008cG\2\u048e\u048a" +
					"\3\2\2\2\u048e\u048d\3\2\2\2\u048f\u0081\3\2\2\2\u0490\u0491\5\u0096L" +
					"\2\u0491\u0083\3\2\2\2\u0492\u0495\5\u0090I\2\u0493\u0495\5\u008eH\2\u0494" +
					"\u0492\3\2\2\2\u0494\u0493\3\2\2\2\u0495\u0085\3\2\2\2\u0496\u0498\7\36" +
					"\2\2\u0497\u0499\5\u0098M\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499" +
					"\u04bb\3\2\2\2\u049a\u049c\5\u008cG\2\u049b\u049d\5\u0098M\2\u049c\u049b" +
					"\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\7\r\2\2\u049f" +
					"\u04a1\5\u0098M\2\u04a0\u049f\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2" +
					"\3\2\2\2\u04a2\u04a4\5V,\2\u04a3\u04a5\5\u0098M\2\u04a4\u04a3\3\2\2\2" +
					"\u04a4\u04a5\3\2\2\2\u04a5\u04b8\3\2\2\2\u04a6\u04a8\7\4\2\2\u04a7\u04a9" +
					"\5\u0098M\2\u04a8\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\3\2\2" +
					"\2\u04aa\u04ac\5\u008cG\2\u04ab\u04ad\5\u0098M\2\u04ac\u04ab\3\2\2\2\u04ac" +
					"\u04ad\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b0\7\r\2\2\u04af\u04b1\5\u0098" +
					"M\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2" +
					"\u04b4\5V,\2\u04b3\u04b5\5\u0098M\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3" +
					"\2\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04a6\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8" +
					"\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bc\3\2\2\2\u04ba\u04b8\3\2" +
					"\2\2\u04bb\u049a\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd" +
					"\u04be\7\37\2\2\u04be\u0087\3\2\2\2\u04bf\u04c2\7 \2\2\u04c0\u04c3\5\u0096" +
					"L\2\u04c1\u04c3\79\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c1\3\2\2\2\u04c3\u0089" +
					"\3\2\2\2\u04c4\u04c9\5n8\2\u04c5\u04c7\5\u0098M\2\u04c6\u04c5\3\2\2\2" +
					"\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca\5\u0080A\2\u04c9" +
					"\u04c6\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3\2" +
					"\2\2\u04cc\u008b\3\2\2\2\u04cd\u04ce\5\u0096L\2\u04ce\u008d\3\2\2\2\u04cf" +
					"\u04d0\t\6\2\2\u04d0\u008f\3\2\2\2\u04d1\u04d4\5\u0092J\2\u04d2\u04d4" +
					"\5\u0094K\2\u04d3\u04d1\3\2\2\2\u04d3\u04d2\3\2\2\2\u04d4\u0091\3\2\2" +
					"\2\u04d5\u04d7\t\7\2\2\u04d6\u04d5\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d6" +
					"\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da\u04dc\79\2\2\u04db" +
					"\u04d6\3\2\2\2\u04db\u04da\3\2\2\2\u04dc\u04df\3\2\2\2\u04dd\u04e0\t\b" +
					"\2\2\u04de\u04e0\t\b\2\2\u04df\u04dd\3\2\2\2\u04df\u04de\3\2\2\2\u04e0" +
					"\u04e1\3\2\2\2\u04e1\u04e2\t\t\2\2\u04e2\u0093\3\2\2\2\u04e3\u04e5\7?" +
					"\2\2\u04e4\u04e3\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e6" +
					"\u04e7\3\2\2\2\u04e7\u04eb\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e9\u04eb\79" +
					"\2\2\u04ea\u04e6\3\2\2\2\u04ea\u04e9\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec" +
					"\u04ed\7\34\2\2\u04ed\u04ee\t\t\2\2\u04ee\u0095\3\2\2\2\u04ef\u04f0\t" +
					"\n\2\2\u04f0\u0097\3\2\2\2\u04f1\u04f3\7p\2\2\u04f2\u04f1\3\2\2\2\u04f3" +
					"\u04f4\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u0099\3\2" +
					"\2\2\u04f6\u04f7\t\13\2\2\u04f7\u009b\3\2\2\2\u04f8\u04f9\t\f\2\2\u04f9" +
					"\u009d\3\2\2\2\u04fa\u04fb\t\r\2\2\u04fb\u009f\3\2\2\2\u04fc\u04fd\7?" +
					"\2\2\u04fd\u00a1\3\2\2\2\u00d9\u00a3\u00a7\u00aa\u00ad\u00b5\u00ba\u00bf" +
					"\u00c4\u00cb\u00d1\u00d4\u00df\u00e3\u00e7\u00eb\u00ee\u00f2\u00fc\u0104" +
					"\u0113\u0117\u0121\u0133\u013b\u0146\u0149\u014f\u0153\u0158\u015f\u0166" +
					"\u016c\u016e\u017a\u0180\u0185\u018a\u018e\u0192\u0197\u019c\u01a0\u01a5" +
					"\u01a8\u01b1\u01ba\u01bf\u01d3\u01db\u01df\u01e4\u01e9\u01ed\u01f2\u01f8" +
					"\u01fd\u0204\u0208\u020c\u020e\u0212\u0214\u0218\u021a\u0220\u0226\u022a" +
					"\u022d\u0230\u0234\u023a\u023e\u0241\u0244\u024a\u024d\u0250\u0254\u025a" +
					"\u025d\u0260\u0264\u0268\u026b\u026e\u0271\u0274\u027a\u027f\u0283\u0286" +
					"\u028b\u0290\u0295\u029d\u02a1\u02a3\u02a7\u02ab\u02ad\u02af\u02bf\u02ca" +
					"\u02d5\u02de\u02e5\u02ea\u02ef\u02f3\u02f7\u02fb\u02fe\u0300\u0305\u0309" +
					"\u030d\u0311\u0315\u0319\u031c\u031e\u0323\u0327\u032c\u0331\u0335\u033c" +
					"\u0343\u0347\u034b\u034f\u0362\u0365\u0374\u0376\u037c\u037e\u0389\u038d" +
					"\u0391\u0398\u039c\u03a0\u03a4\u03a8\u03af\u03b3\u03b7\u03bd\u03c1\u03c5" +
					"\u03c8\u03cc\u03d2\u03d6\u03da\u03e0\u03e4\u03e8\u03ee\u03f2\u03f6\u03fc" +
					"\u0400\u0404\u040c\u0410\u0415\u041a\u041f\u0424\u0429\u042e\u0431\u0435" +
					"\u0439\u043f\u0444\u0448\u044b\u0455\u0459\u045d\u045f\u0463\u0467\u046b" +
					"\u046f\u0472\u047b\u047f\u0484\u0488\u048e\u0494\u0498\u049c\u04a0\u04a4" +
					"\u04a8\u04ac\u04b0\u04b4\u04b8\u04bb\u04c2\u04c6\u04cb\u04d3\u04d8\u04db" +
					"\u04df\u04e6\u04ea\u04f4";
	public static final ATN _ATN =
			new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
			new PredictionContextCache();
	private static final String[] _LITERAL_NAMES = {
			null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "'?'",
			"']'", "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'=~'",
			"'<>'", "'!='", "'<'", "'>'", "'<='", "'>='", "'.'", "'!'", "'{'", "'}'",
			"'$'", "'E'", "'e'", "'⟨'", "'〈'", "'﹤'", "'＜'", "'⟩'", "'〉'",
			"'﹥'", "'＞'", "'­'", "'�?'", "'‑'", "'‒'", "'–'", "'—'",
			"'―'", "'−'", "'﹘'", "'﹣'", "'�?'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, "StringLiteral", "EscapedChar", "HexInteger",
			"DecimalInteger", "OctalInteger", "HexString", "DigitString", "OctalString",
			"HexDigit", "Digit", "OctDigit", "UNION", "ALL", "OPTIONAL", "MATCH",
			"UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DELETE", "DETACH", "REMOVE",
			"WITH", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "DESCENDING",
			"DESC", "ASCENDING", "ASC", "WHERE", "OR", "XOR", "AND", "NOT", "IN",
			"STARTS", "ENDS", "CONTAINS", "IS", "NULL", "TRUE", "FALSE", "COUNT",
			"FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "UnescapedSymbolicName",
			"IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "WHITESPACE",
			"Comment", "L_0X"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	static {
		RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION);
	}

	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}

	public CypherParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() {
		return "Cypher.g4";
	}

	@Override
	public String[] getRuleNames() {
		return ruleNames;
	}

	@Override
	public String getSerializedATN() {
		return _serializedATN;
	}

	@Override
	public ATN getATN() {
		return _ATN;
	}

	public final CypherContext cypher() throws RecognitionException {
		CypherContext _localctx = new CypherContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_cypher);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(161);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(160);
						sp();
					}
				}

				setState(163);
				statement();
				setState(168);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 2, _ctx)) {
					case 1: {
						setState(165);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(164);
								sp();
							}
						}

						setState(167);
						match(T__0);
					}
					break;
				}
				setState(171);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(170);
						sp();
					}
				}

			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(173);
				query();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(175);
				regularQuery();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RegularQueryContext regularQuery() throws RecognitionException {
		RegularQueryContext _localctx = new RegularQueryContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_regularQuery);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(177);
				singleQuery();
				setState(184);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 5, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(179);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(178);
										sp();
									}
								}

								setState(181);
								union();
							}
						}
					}
					setState(186);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 5, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SingleQueryContext singleQuery() throws RecognitionException {
		SingleQueryContext _localctx = new SingleQueryContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_singleQuery);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(187);
				clause();
				setState(194);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 7, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(189);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(188);
										sp();
									}
								}

								setState(191);
								clause();
							}
						}
					}
					setState(196);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 7, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final UnionContext union() throws RecognitionException {
		UnionContext _localctx = new UnionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_union);
		int _la;
		try {
			setState(210);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 10, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(197);
						match(UNION);
						setState(198);
						sp();
						setState(199);
						match(ALL);
						setState(201);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(200);
								sp();
							}
						}

						setState(203);
						singleQuery();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(205);
						match(UNION);
						setState(207);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(206);
								sp();
							}
						}

						setState(209);
						singleQuery();
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ClauseContext clause() throws RecognitionException {
		ClauseContext _localctx = new ClauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_clause);
		try {
			setState(221);
			switch (_input.LA(1)) {
				case OPTIONAL:
				case MATCH:
					enterOuterAlt(_localctx, 1);
				{
					setState(212);
					match();
				}
				break;
				case UNWIND:
					enterOuterAlt(_localctx, 2);
				{
					setState(213);
					unwind();
				}
				break;
				case MERGE:
					enterOuterAlt(_localctx, 3);
				{
					setState(214);
					merge();
				}
				break;
				case CREATE:
					enterOuterAlt(_localctx, 4);
				{
					setState(215);
					create();
				}
				break;
				case SET:
					enterOuterAlt(_localctx, 5);
				{
					setState(216);
					set();
				}
				break;
				case DELETE:
				case DETACH:
					enterOuterAlt(_localctx, 6);
				{
					setState(217);
					delete();
				}
				break;
				case REMOVE:
					enterOuterAlt(_localctx, 7);
				{
					setState(218);
					remove();
				}
				break;
				case WITH:
					enterOuterAlt(_localctx, 8);
				{
					setState(219);
					with();
				}
				break;
				case RETURN:
					enterOuterAlt(_localctx, 9);
				{
					setState(220);
					returnMain();
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final MatchContext match() throws RecognitionException {
		MatchContext _localctx = new MatchContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_match);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(225);
				_la = _input.LA(1);
				if (_la == OPTIONAL) {
					{
						setState(223);
						match(OPTIONAL);
						setState(224);
						sp();
					}
				}

				setState(227);
				match(MATCH);
				setState(229);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(228);
						sp();
					}
				}

				setState(231);
				pattern();
				setState(236);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 15, _ctx)) {
					case 1: {
						setState(233);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(232);
								sp();
							}
						}

						setState(235);
						where();
					}
					break;
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final UnwindContext unwind() throws RecognitionException {
		UnwindContext _localctx = new UnwindContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_unwind);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(238);
				match(UNWIND);
				setState(240);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 16, _ctx)) {
					case 1: {
						setState(239);
						sp();
					}
					break;
				}
				setState(242);
				expression();
				setState(243);
				sp();
				setState(244);
				match(AS);
				setState(245);
				sp();
				setState(246);
				variable();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final MergeContext merge() throws RecognitionException {
		MergeContext _localctx = new MergeContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_merge);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(248);
				match(MERGE);
				setState(250);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(249);
						sp();
					}
				}

				setState(252);
				patternPart();
				setState(258);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 18, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(253);
								sp();
								setState(254);
								mergeAction();
							}
						}
					}
					setState(260);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 18, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final MergeActionContext mergeAction() throws RecognitionException {
		MergeActionContext _localctx = new MergeActionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_mergeAction);
		try {
			setState(273);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 19, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(261);
						match(ON);
						setState(262);
						sp();
						setState(263);
						match(MATCH);
						setState(264);
						sp();
						setState(265);
						set();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(267);
						match(ON);
						setState(268);
						sp();
						setState(269);
						match(CREATE);
						setState(270);
						sp();
						setState(271);
						set();
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final CreateContext create() throws RecognitionException {
		CreateContext _localctx = new CreateContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_create);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(275);
				match(CREATE);
				setState(277);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(276);
						sp();
					}
				}

				setState(279);
				pattern();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SetContext set() throws RecognitionException {
		SetContext _localctx = new SetContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_set);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(281);
				match(SET);
				setState(282);
				setItem();
				setState(287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__1) {
					{
						{
							setState(283);
							match(T__1);
							setState(284);
							setItem();
						}
					}
					setState(289);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SetItemContext setItem() throws RecognitionException {
		SetItemContext _localctx = new SetItemContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_setItem);
		try {
			setState(305);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 22, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(290);
						propertyExpression();
						setState(291);
						match(T__2);
						setState(292);
						expression();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(294);
						variable();
						setState(295);
						match(T__2);
						setState(296);
						expression();
					}
				}
				break;
				case 3:
					enterOuterAlt(_localctx, 3);
				{
					{
						setState(298);
						variable();
						setState(299);
						match(T__3);
						setState(300);
						expression();
					}
				}
				break;
				case 4:
					enterOuterAlt(_localctx, 4);
				{
					{
						setState(302);
						variable();
						setState(303);
						nodeLabels();
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_delete);
		int _la;
		try {
			setState(327);
			switch (_input.LA(1)) {
				case DELETE:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(307);
						match(DELETE);
						setState(308);
						expression();
						setState(313);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__1) {
							{
								{
									setState(309);
									match(T__1);
									setState(310);
									expression();
								}
							}
							setState(315);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
					}
				}
				break;
				case DETACH:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(316);
						match(DETACH);
						setState(317);
						sp();
						setState(318);
						match(DELETE);
						setState(319);
						expression();
						setState(324);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__1) {
							{
								{
									setState(320);
									match(T__1);
									setState(321);
									expression();
								}
							}
							setState(326);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
					}
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RemoveContext remove() throws RecognitionException {
		RemoveContext _localctx = new RemoveContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_remove);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(329);
				match(REMOVE);
				setState(330);
				sp();
				setState(331);
				removeItem();
				setState(342);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 28, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(333);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(332);
										sp();
									}
								}

								setState(335);
								match(T__1);
								setState(337);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(336);
										sp();
									}
								}

								setState(339);
								removeItem();
							}
						}
					}
					setState(344);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 28, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RemoveItemContext removeItem() throws RecognitionException {
		RemoveItemContext _localctx = new RemoveItemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_removeItem);
		try {
			setState(349);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 29, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(345);
						variable();
						setState(346);
						nodeLabels();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(348);
					propertyExpression();
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final WithContext with() throws RecognitionException {
		WithContext _localctx = new WithContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_with);
		int _la;
		try {
			setState(364);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 32, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(351);
						match(WITH);
						setState(352);
						match(DISTINCT);
						setState(353);
						sp();
						setState(354);
						returnBody();
						setState(356);
						_la = _input.LA(1);
						if (_la == WHERE) {
							{
								setState(355);
								where();
							}
						}

					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(358);
						match(WITH);
						setState(359);
						sp();
						setState(360);
						returnBody();
						setState(362);
						_la = _input.LA(1);
						if (_la == WHERE) {
							{
								setState(361);
								where();
							}
						}

					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ReturnMainContext returnMain() throws RecognitionException {
		ReturnMainContext _localctx = new ReturnMainContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_returnMain);
		try {
			setState(376);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 33, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(366);
						match(RETURN);
						setState(367);
						sp();
						setState(368);
						match(DISTINCT);
						setState(369);
						sp();
						setState(370);
						returnBody();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(372);
						match(RETURN);
						setState(373);
						sp();
						setState(374);
						returnBody();
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ReturnBodyContext returnBody() throws RecognitionException {
		ReturnBodyContext _localctx = new ReturnBodyContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_returnBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(378);
				returnItems();
				setState(382);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 34, _ctx)) {
					case 1: {
						setState(379);
						sp();
						setState(380);
						order();
					}
					break;
				}
				setState(387);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 35, _ctx)) {
					case 1: {
						setState(384);
						sp();
						setState(385);
						skip();
					}
					break;
				}
				setState(392);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 36, _ctx)) {
					case 1: {
						setState(389);
						sp();
						setState(390);
						limit();
					}
					break;
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ReturnItemsContext returnItems() throws RecognitionException {
		ReturnItemsContext _localctx = new ReturnItemsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_returnItems);
		int _la;
		try {
			int _alt;
			setState(422);
			switch (_input.LA(1)) {
				case T__4:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(394);
						match(T__4);
						setState(405);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input, 39, _ctx);
						while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
							if (_alt == 1) {
								{
									{
										setState(396);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(395);
												sp();
											}
										}

										setState(398);
										match(T__1);
										setState(400);
										_errHandler.sync(this);
										switch (getInterpreter().adaptivePredict(_input, 38, _ctx)) {
											case 1: {
												setState(399);
												sp();
											}
											break;
										}
										setState(402);
										returnItem();
									}
								}
							}
							setState(407);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input, 39, _ctx);
						}
					}
				}
				break;
				case T__5:
				case T__7:
				case T__13:
				case T__14:
				case T__25:
				case T__27:
				case T__29:
				case StringLiteral:
				case HexInteger:
				case DecimalInteger:
				case OctalInteger:
				case HexString:
				case Digit:
				case UNION:
				case ALL:
				case OPTIONAL:
				case MATCH:
				case UNWIND:
				case AS:
				case MERGE:
				case ON:
				case CREATE:
				case SET:
				case DELETE:
				case DETACH:
				case REMOVE:
				case WITH:
				case DISTINCT:
				case RETURN:
				case ORDER:
				case BY:
				case L_SKIP:
				case LIMIT:
				case DESCENDING:
				case DESC:
				case ASCENDING:
				case ASC:
				case WHERE:
				case OR:
				case XOR:
				case AND:
				case NOT:
				case IN:
				case STARTS:
				case ENDS:
				case CONTAINS:
				case IS:
				case NULL:
				case TRUE:
				case FALSE:
				case COUNT:
				case FILTER:
				case EXTRACT:
				case ANY:
				case NONE:
				case SINGLE:
				case UnescapedSymbolicName:
				case EscapedSymbolicName:
				case WHITESPACE:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(408);
						returnItem();
						setState(419);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input, 42, _ctx);
						while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
							if (_alt == 1) {
								{
									{
										setState(410);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(409);
												sp();
											}
										}

										setState(412);
										match(T__1);
										setState(414);
										_errHandler.sync(this);
										switch (getInterpreter().adaptivePredict(_input, 41, _ctx)) {
											case 1: {
												setState(413);
												sp();
											}
											break;
										}
										setState(416);
										returnItem();
									}
								}
							}
							setState(421);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input, 42, _ctx);
						}
					}
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ReturnItemContext returnItem() throws RecognitionException {
		ReturnItemContext _localctx = new ReturnItemContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_returnItem);
		try {
			setState(431);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 44, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(424);
						expression();
						setState(425);
						sp();
						setState(426);
						match(AS);
						setState(427);
						sp();
						setState(428);
						variable();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(430);
					expression();
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final OrderContext order() throws RecognitionException {
		OrderContext _localctx = new OrderContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(433);
				match(ORDER);
				setState(434);
				sp();
				setState(435);
				match(BY);
				setState(436);
				sp();
				setState(437);
				sortItem();
				setState(445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__1) {
					{
						{
							setState(438);
							match(T__1);
							setState(440);
							_errHandler.sync(this);
							switch (getInterpreter().adaptivePredict(_input, 45, _ctx)) {
								case 1: {
									setState(439);
									sp();
								}
								break;
							}
							setState(442);
							sortItem();
						}
					}
					setState(447);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SkipContext skip() throws RecognitionException {
		SkipContext _localctx = new SkipContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_skip);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(448);
				match(L_SKIP);
				setState(449);
				sp();
				setState(450);
				expression();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final LimitContext limit() throws RecognitionException {
		LimitContext _localctx = new LimitContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_limit);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(452);
				match(LIMIT);
				setState(453);
				sp();
				setState(454);
				expression();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SortItemContext sortItem() throws RecognitionException {
		SortItemContext _localctx = new SortItemContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_sortItem);
		int _la;
		try {
			setState(465);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 47, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(456);
						expression();
						setState(457);
						sp();
						setState(458);
						_la = _input.LA(1);
						if (!(_la == DESCENDING || _la == DESC)) {
							_errHandler.recoverInline(this);
						} else {
							consume();
						}
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(460);
						expression();
						setState(461);
						sp();
						setState(462);
						_la = _input.LA(1);
						if (!(_la == ASCENDING || _la == ASC)) {
							_errHandler.recoverInline(this);
						} else {
							consume();
						}
					}
				}
				break;
				case 3:
					enterOuterAlt(_localctx, 3);
				{
					{
						setState(464);
						expression();
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final WhereContext where() throws RecognitionException {
		WhereContext _localctx = new WhereContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_where);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(467);
				match(WHERE);
				setState(468);
				sp();
				setState(469);
				expression();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PatternContext pattern() throws RecognitionException {
		PatternContext _localctx = new PatternContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_pattern);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(471);
				patternPart();
				setState(482);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 50, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(473);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(472);
										sp();
									}
								}

								setState(475);
								match(T__1);
								setState(477);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(476);
										sp();
									}
								}

								setState(479);
								patternPart();
							}
						}
					}
					setState(484);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 50, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PatternPartContext patternPart() throws RecognitionException {
		PatternPartContext _localctx = new PatternPartContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_patternPart);
		int _la;
		try {
			setState(496);
			switch (_input.LA(1)) {
				case HexString:
				case UNION:
				case ALL:
				case OPTIONAL:
				case MATCH:
				case UNWIND:
				case AS:
				case MERGE:
				case ON:
				case CREATE:
				case SET:
				case DELETE:
				case DETACH:
				case REMOVE:
				case WITH:
				case DISTINCT:
				case RETURN:
				case ORDER:
				case BY:
				case L_SKIP:
				case LIMIT:
				case DESCENDING:
				case DESC:
				case ASCENDING:
				case ASC:
				case WHERE:
				case OR:
				case XOR:
				case AND:
				case NOT:
				case IN:
				case STARTS:
				case ENDS:
				case CONTAINS:
				case IS:
				case NULL:
				case TRUE:
				case FALSE:
				case COUNT:
				case FILTER:
				case EXTRACT:
				case ANY:
				case NONE:
				case SINGLE:
				case UnescapedSymbolicName:
				case EscapedSymbolicName:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(485);
						variable();
						setState(487);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(486);
								sp();
							}
						}

						setState(489);
						match(T__2);
						setState(491);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(490);
								sp();
							}
						}

						setState(493);
						anonymousPatternPart();
					}
				}
				break;
				case T__5:
					enterOuterAlt(_localctx, 2);
				{
					setState(495);
					anonymousPatternPart();
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final AnonymousPatternPartContext anonymousPatternPart() throws RecognitionException {
		AnonymousPatternPartContext _localctx = new AnonymousPatternPartContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_anonymousPatternPart);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(498);
				patternElement();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PatternElementContext patternElement() throws RecognitionException {
		PatternElementContext _localctx = new PatternElementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_patternElement);
		int _la;
		try {
			int _alt;
			setState(514);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 56, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(500);
						nodePattern();
						setState(507);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input, 55, _ctx);
						while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
							if (_alt == 1) {
								{
									{
										setState(502);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(501);
												sp();
											}
										}

										setState(504);
										patternElementChain();
									}
								}
							}
							setState(509);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input, 55, _ctx);
						}
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(510);
						match(T__5);
						setState(511);
						patternElement();
						setState(512);
						match(T__6);
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final NodePatternContext nodePattern() throws RecognitionException {
		NodePatternContext _localctx = new NodePatternContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_nodePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(516);
				match(T__5);
				setState(518);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(517);
						sp();
					}
				}

				setState(524);
				_la = _input.LA(1);
				if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0)) {
					{
						setState(520);
						variable();
						setState(522);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(521);
								sp();
							}
						}

					}
				}

				setState(530);
				_la = _input.LA(1);
				if (_la == T__10) {
					{
						setState(526);
						nodeLabels();
						setState(528);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(527);
								sp();
							}
						}

					}
				}

				setState(536);
				_la = _input.LA(1);
				if (_la == T__27 || _la == T__29) {
					{
						setState(532);
						properties();
						setState(534);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(533);
								sp();
							}
						}

					}
				}

				setState(538);
				match(T__6);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PatternElementChainContext patternElementChain() throws RecognitionException {
		PatternElementChainContext _localctx = new PatternElementChainContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_patternElementChain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(540);
				relationshipPattern();
				setState(542);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(541);
						sp();
					}
				}

				setState(544);
				nodePattern();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RelationshipPatternContext relationshipPattern() throws RecognitionException {
		RelationshipPatternContext _localctx = new RelationshipPatternContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_relationshipPattern);
		int _la;
		try {
			setState(610);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 81, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(546);
						leftArrowHead();
						setState(548);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(547);
								sp();
							}
						}

						setState(550);
						dash();
						setState(552);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 66, _ctx)) {
							case 1: {
								setState(551);
								sp();
							}
							break;
						}
						setState(555);
						_la = _input.LA(1);
						if (_la == T__7) {
							{
								setState(554);
								relationshipDetail();
							}
						}

						setState(558);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(557);
								sp();
							}
						}

						setState(560);
						dash();
						setState(562);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(561);
								sp();
							}
						}

						setState(564);
						rightArrowHead();
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(566);
						leftArrowHead();
						setState(568);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(567);
								sp();
							}
						}

						setState(570);
						dash();
						setState(572);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 71, _ctx)) {
							case 1: {
								setState(571);
								sp();
							}
							break;
						}
						setState(575);
						_la = _input.LA(1);
						if (_la == T__7) {
							{
								setState(574);
								relationshipDetail();
							}
						}

						setState(578);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(577);
								sp();
							}
						}

						setState(580);
						dash();
					}
				}
				break;
				case 3:
					enterOuterAlt(_localctx, 3);
				{
					{
						setState(582);
						dash();
						setState(584);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 74, _ctx)) {
							case 1: {
								setState(583);
								sp();
							}
							break;
						}
						setState(587);
						_la = _input.LA(1);
						if (_la == T__7) {
							{
								setState(586);
								relationshipDetail();
							}
						}

						setState(590);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(589);
								sp();
							}
						}

						setState(592);
						dash();
						setState(594);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(593);
								sp();
							}
						}

						setState(596);
						rightArrowHead();
					}
				}
				break;
				case 4:
					enterOuterAlt(_localctx, 4);
				{
					{
						setState(598);
						dash();
						setState(600);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 78, _ctx)) {
							case 1: {
								setState(599);
								sp();
							}
							break;
						}
						setState(603);
						_la = _input.LA(1);
						if (_la == T__7) {
							{
								setState(602);
								relationshipDetail();
							}
						}

						setState(606);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(605);
								sp();
							}
						}

						setState(608);
						dash();
					}
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RelationshipDetailContext relationshipDetail() throws RecognitionException {
		RelationshipDetailContext _localctx = new RelationshipDetailContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_relationshipDetail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(612);
				match(T__7);
				setState(614);
				_la = _input.LA(1);
				if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0)) {
					{
						setState(613);
						variable();
					}
				}

				setState(617);
				_la = _input.LA(1);
				if (_la == T__8) {
					{
						setState(616);
						match(T__8);
					}
				}

				setState(620);
				_la = _input.LA(1);
				if (_la == T__10) {
					{
						setState(619);
						relationshipTypes();
					}
				}

				setState(623);
				_la = _input.LA(1);
				if (_la == T__4) {
					{
						setState(622);
						rangeLiteral();
					}
				}

				setState(626);
				_la = _input.LA(1);
				if (_la == T__27 || _la == T__29) {
					{
						setState(625);
						properties();
					}
				}

				setState(628);
				match(T__9);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PropertiesContext properties() throws RecognitionException {
		PropertiesContext _localctx = new PropertiesContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_properties);
		try {
			setState(632);
			switch (_input.LA(1)) {
				case T__27:
					enterOuterAlt(_localctx, 1);
				{
					setState(630);
					mapLiteral();
				}
				break;
				case T__29:
					enterOuterAlt(_localctx, 2);
				{
					setState(631);
					parameter();
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RelationshipTypesContext relationshipTypes() throws RecognitionException {
		RelationshipTypesContext _localctx = new RelationshipTypesContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_relationshipTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(634);
				match(T__10);
				setState(635);
				relTypeName();
				setState(649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__11 || _la == WHITESPACE) {
					{
						{
							setState(637);
							_la = _input.LA(1);
							if (_la == WHITESPACE) {
								{
									setState(636);
									sp();
								}
							}

							setState(639);
							match(T__11);
							setState(641);
							_la = _input.LA(1);
							if (_la == T__10) {
								{
									setState(640);
									match(T__10);
								}
							}

							setState(644);
							_la = _input.LA(1);
							if (_la == WHITESPACE) {
								{
									setState(643);
									sp();
								}
							}

							setState(646);
							relTypeName();
						}
					}
					setState(651);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final NodeLabelsContext nodeLabels() throws RecognitionException {
		NodeLabelsContext _localctx = new NodeLabelsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_nodeLabels);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(652);
				nodeLabel();
				setState(659);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 93, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(654);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(653);
										sp();
									}
								}

								setState(656);
								nodeLabel();
							}
						}
					}
					setState(661);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 93, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final NodeLabelContext nodeLabel() throws RecognitionException {
		NodeLabelContext _localctx = new NodeLabelContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_nodeLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(662);
				match(T__10);
				setState(663);
				labelName();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RangeLiteralContext rangeLiteral() throws RecognitionException {
		RangeLiteralContext _localctx = new RangeLiteralContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_rangeLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(665);
				match(T__4);
				setState(667);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(666);
						sp();
					}
				}

				setState(673);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger))) != 0)) {
					{
						setState(669);
						integerLiteral();
						setState(671);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(670);
								sp();
							}
						}

					}
				}

				setState(685);
				_la = _input.LA(1);
				if (_la == T__12) {
					{
						setState(675);
						match(T__12);
						setState(677);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(676);
								sp();
							}
						}

						setState(683);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger))) != 0)) {
							{
								setState(679);
								integerLiteral();
								setState(681);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(680);
										sp();
									}
								}

							}
						}

					}
				}

			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final LabelNameContext labelName() throws RecognitionException {
		LabelNameContext _localctx = new LabelNameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_labelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(687);
				symbolicName();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RelTypeNameContext relTypeName() throws RecognitionException {
		RelTypeNameContext _localctx = new RelTypeNameContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_relTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(689);
				symbolicName();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(691);
				expression12();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression12Context expression12() throws RecognitionException {
		Expression12Context _localctx = new Expression12Context(_ctx, getState());
		enterRule(_localctx, 86, RULE_expression12);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(693);
				expression11();
				setState(701);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 101, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(694);
								sp();
								setState(695);
								match(OR);
								setState(696);
								sp();
								setState(697);
								expression11();
							}
						}
					}
					setState(703);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 101, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression11Context expression11() throws RecognitionException {
		Expression11Context _localctx = new Expression11Context(_ctx, getState());
		enterRule(_localctx, 88, RULE_expression11);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(704);
				expression10();
				setState(712);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 102, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(705);
								sp();
								setState(706);
								match(XOR);
								setState(707);
								sp();
								setState(708);
								expression10();
							}
						}
					}
					setState(714);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 102, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression10Context expression10() throws RecognitionException {
		Expression10Context _localctx = new Expression10Context(_ctx, getState());
		enterRule(_localctx, 90, RULE_expression10);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(715);
				expression9();
				setState(723);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 103, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(716);
								sp();
								setState(717);
								match(AND);
								setState(718);
								sp();
								setState(719);
								expression9();
							}
						}
					}
					setState(725);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 103, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression9Context expression9() throws RecognitionException {
		Expression9Context _localctx = new Expression9Context(_ctx, getState());
		enterRule(_localctx, 92, RULE_expression9);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == WHITESPACE) {
					{
						{
							setState(726);
							sp();
							setState(727);
							match(NOT);
							setState(728);
							sp();
						}
					}
					setState(734);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(735);
				expression8();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression8Context expression8() throws RecognitionException {
		Expression8Context _localctx = new Expression8Context(_ctx, getState());
		enterRule(_localctx, 94, RULE_expression8);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(737);
				expression7();
				setState(744);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 106, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(739);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(738);
										sp();
									}
								}

								setState(741);
								partialComparisonExpression();
							}
						}
					}
					setState(746);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 106, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression7Context expression7() throws RecognitionException {
		Expression7Context _localctx = new Expression7Context(_ctx, getState());
		enterRule(_localctx, 96, RULE_expression7);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(747);
				expression6();
				setState(766);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 112, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							setState(764);
							_errHandler.sync(this);
							switch (getInterpreter().adaptivePredict(_input, 111, _ctx)) {
								case 1: {
									{
										setState(749);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(748);
												sp();
											}
										}

										setState(751);
										match(T__13);
										setState(753);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(752);
												sp();
											}
										}

										setState(755);
										expression6();
									}
								}
								break;
								case 2: {
									{
										setState(757);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(756);
												sp();
											}
										}

										setState(759);
										match(T__14);
										setState(761);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(760);
												sp();
											}
										}

										setState(763);
										expression6();
									}
								}
								break;
							}
						}
					}
					setState(768);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 112, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression6Context expression6() throws RecognitionException {
		Expression6Context _localctx = new Expression6Context(_ctx, getState());
		enterRule(_localctx, 98, RULE_expression6);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(769);
				expression5();
				setState(796);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 120, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							setState(794);
							_errHandler.sync(this);
							switch (getInterpreter().adaptivePredict(_input, 119, _ctx)) {
								case 1: {
									{
										setState(771);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(770);
												sp();
											}
										}

										setState(773);
										match(T__4);
										setState(775);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(774);
												sp();
											}
										}

										setState(777);
										expression5();
									}
								}
								break;
								case 2: {
									{
										setState(779);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(778);
												sp();
											}
										}

										setState(781);
										match(T__15);
										setState(783);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(782);
												sp();
											}
										}

										setState(785);
										expression5();
									}
								}
								break;
								case 3: {
									{
										setState(787);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(786);
												sp();
											}
										}

										setState(789);
										match(T__16);
										setState(791);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(790);
												sp();
											}
										}

										setState(793);
										expression5();
									}
								}
								break;
							}
						}
					}
					setState(798);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 120, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression5Context expression5() throws RecognitionException {
		Expression5Context _localctx = new Expression5Context(_ctx, getState());
		enterRule(_localctx, 100, RULE_expression5);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(799);
				expression4();
				setState(810);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 123, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							{
								setState(801);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(800);
										sp();
									}
								}

								setState(803);
								match(T__17);
								setState(805);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(804);
										sp();
									}
								}

								setState(807);
								expression4();
							}
						}
					}
					setState(812);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 123, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression4Context expression4() throws RecognitionException {
		Expression4Context _localctx = new Expression4Context(_ctx, getState());
		enterRule(_localctx, 102, RULE_expression4);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__13 || _la == T__14) {
					{
						{
							setState(813);
							_la = _input.LA(1);
							if (!(_la == T__13 || _la == T__14)) {
								_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(815);
							_la = _input.LA(1);
							if (_la == WHITESPACE) {
								{
									setState(814);
									sp();
								}
							}

						}
					}
					setState(821);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(822);
				expression3();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression3Context expression3() throws RecognitionException {
		Expression3Context _localctx = new Expression3Context(_ctx, getState());
		enterRule(_localctx, 104, RULE_expression3);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(824);
				expression2();
				setState(884);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 134, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							setState(882);
							_errHandler.sync(this);
							switch (getInterpreter().adaptivePredict(_input, 133, _ctx)) {
								case 1: {
									{
										setState(826);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(825);
												sp();
											}
										}

										setState(828);
										match(T__7);
										setState(829);
										expression();
										setState(830);
										match(T__9);
									}
								}
								break;
								case 2: {
									{
										setState(833);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(832);
												sp();
											}
										}

										setState(835);
										match(T__7);
										setState(837);
										_la = _input.LA(1);
										if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << StringLiteral) | (1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger) | (1L << HexString) | (1L << Digit) | (1L << UNION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ALL - 64)) | (1L << (OPTIONAL - 64)) | (1L << (MATCH - 64)) | (1L << (UNWIND - 64)) | (1L << (AS - 64)) | (1L << (MERGE - 64)) | (1L << (ON - 64)) | (1L << (CREATE - 64)) | (1L << (SET - 64)) | (1L << (DELETE - 64)) | (1L << (DETACH - 64)) | (1L << (REMOVE - 64)) | (1L << (WITH - 64)) | (1L << (DISTINCT - 64)) | (1L << (RETURN - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (L_SKIP - 64)) | (1L << (LIMIT - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESC - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASC - 64)) | (1L << (WHERE - 64)) | (1L << (OR - 64)) | (1L << (XOR - 64)) | (1L << (AND - 64)) | (1L << (NOT - 64)) | (1L << (IN - 64)) | (1L << (STARTS - 64)) | (1L << (ENDS - 64)) | (1L << (CONTAINS - 64)) | (1L << (IS - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (COUNT - 64)) | (1L << (FILTER - 64)) | (1L << (EXTRACT - 64)) | (1L << (ANY - 64)) | (1L << (NONE - 64)) | (1L << (SINGLE - 64)) | (1L << (UnescapedSymbolicName - 64)) | (1L << (EscapedSymbolicName - 64)) | (1L << (WHITESPACE - 64)))) != 0)) {
											{
												setState(836);
												expression();
											}
										}

										setState(839);
										match(T__12);
										setState(841);
										_la = _input.LA(1);
										if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << StringLiteral) | (1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger) | (1L << HexString) | (1L << Digit) | (1L << UNION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ALL - 64)) | (1L << (OPTIONAL - 64)) | (1L << (MATCH - 64)) | (1L << (UNWIND - 64)) | (1L << (AS - 64)) | (1L << (MERGE - 64)) | (1L << (ON - 64)) | (1L << (CREATE - 64)) | (1L << (SET - 64)) | (1L << (DELETE - 64)) | (1L << (DETACH - 64)) | (1L << (REMOVE - 64)) | (1L << (WITH - 64)) | (1L << (DISTINCT - 64)) | (1L << (RETURN - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (L_SKIP - 64)) | (1L << (LIMIT - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESC - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASC - 64)) | (1L << (WHERE - 64)) | (1L << (OR - 64)) | (1L << (XOR - 64)) | (1L << (AND - 64)) | (1L << (NOT - 64)) | (1L << (IN - 64)) | (1L << (STARTS - 64)) | (1L << (ENDS - 64)) | (1L << (CONTAINS - 64)) | (1L << (IS - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (COUNT - 64)) | (1L << (FILTER - 64)) | (1L << (EXTRACT - 64)) | (1L << (ANY - 64)) | (1L << (NONE - 64)) | (1L << (SINGLE - 64)) | (1L << (UnescapedSymbolicName - 64)) | (1L << (EscapedSymbolicName - 64)) | (1L << (WHITESPACE - 64)))) != 0)) {
											{
												setState(840);
												expression();
											}
										}

										setState(843);
										match(T__9);
									}
								}
								break;
								case 3: {
									{
										setState(864);
										_errHandler.sync(this);
										switch (getInterpreter().adaptivePredict(_input, 131, _ctx)) {
											case 1: {
												{
													setState(845);
													_la = _input.LA(1);
													if (_la == WHITESPACE) {
														{
															setState(844);
															sp();
														}
													}

													setState(847);
													match(T__18);
												}
											}
											break;
											case 2: {
												{
													setState(848);
													sp();
													setState(849);
													match(IN);
												}
											}
											break;
											case 3: {
												{
													setState(851);
													sp();
													setState(852);
													match(STARTS);
													setState(853);
													sp();
													setState(854);
													match(WITH);
												}
											}
											break;
											case 4: {
												{
													setState(856);
													sp();
													setState(857);
													match(ENDS);
													setState(858);
													sp();
													setState(859);
													match(WITH);
												}
											}
											break;
											case 5: {
												{
													setState(861);
													sp();
													setState(862);
													match(CONTAINS);
												}
											}
											break;
										}
										setState(867);
										_la = _input.LA(1);
										if (_la == WHITESPACE) {
											{
												setState(866);
												sp();
											}
										}

										setState(869);
										expression2();
									}
								}
								break;
								case 4: {
									{
										setState(870);
										sp();
										setState(871);
										match(IS);
										setState(872);
										sp();
										setState(873);
										match(NULL);
									}
								}
								break;
								case 5: {
									{
										setState(875);
										sp();
										setState(876);
										match(IS);
										setState(877);
										sp();
										setState(878);
										match(NOT);
										setState(879);
										sp();
										setState(880);
										match(NULL);
									}
								}
								break;
							}
						}
					}
					setState(886);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 134, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final Expression2Context expression2() throws RecognitionException {
		Expression2Context _localctx = new Expression2Context(_ctx, getState());
		enterRule(_localctx, 106, RULE_expression2);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(887);
				atom();
				setState(892);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 136, _ctx);
				while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						{
							setState(890);
							switch (_input.LA(1)) {
								case T__25:
								case WHITESPACE: {
									setState(888);
									propertyLookup();
								}
								break;
								case T__10: {
									setState(889);
									nodeLabels();
								}
								break;
								default:
									throw new NoViableAltException(this);
							}
						}
					}
					setState(894);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 136, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_atom);
		int _la;
		try {
			setState(1034);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 165, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					setState(895);
					numberLiteral();
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(896);
					match(StringLiteral);
				}
				break;
				case 3:
					enterOuterAlt(_localctx, 3);
				{
					setState(897);
					parameter();
				}
				break;
				case 4:
					enterOuterAlt(_localctx, 4);
				{
					setState(898);
					match(TRUE);
				}
				break;
				case 5:
					enterOuterAlt(_localctx, 5);
				{
					setState(899);
					match(FALSE);
				}
				break;
				case 6:
					enterOuterAlt(_localctx, 6);
				{
					setState(900);
					match(NULL);
				}
				break;
				case 7:
					enterOuterAlt(_localctx, 7);
				{
					{
						setState(901);
						match(COUNT);
						setState(903);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(902);
								sp();
							}
						}

						setState(905);
						match(T__5);
						setState(907);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(906);
								sp();
							}
						}

						setState(909);
						match(T__4);
						setState(911);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(910);
								sp();
							}
						}

						setState(913);
						match(T__6);
					}
				}
				break;
				case 8:
					enterOuterAlt(_localctx, 8);
				{
					setState(914);
					mapLiteral();
				}
				break;
				case 9:
					enterOuterAlt(_localctx, 9);
				{
					setState(915);
					listComprehension();
				}
				break;
				case 10:
					enterOuterAlt(_localctx, 10);
				{
					{
						setState(916);
						match(T__7);
						setState(918);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 140, _ctx)) {
							case 1: {
								setState(917);
								sp();
							}
							break;
						}
						setState(920);
						expression();
						setState(922);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(921);
								sp();
							}
						}

						setState(934);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__1) {
							{
								{
									setState(924);
									match(T__1);
									setState(926);
									_errHandler.sync(this);
									switch (getInterpreter().adaptivePredict(_input, 142, _ctx)) {
										case 1: {
											setState(925);
											sp();
										}
										break;
									}
									setState(928);
									expression();
									setState(930);
									_la = _input.LA(1);
									if (_la == WHITESPACE) {
										{
											setState(929);
											sp();
										}
									}

								}
							}
							setState(936);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(937);
						match(T__9);
					}
				}
				break;
				case 11:
					enterOuterAlt(_localctx, 11);
				{
					{
						setState(939);
						match(FILTER);
						setState(941);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(940);
								sp();
							}
						}

						setState(943);
						match(T__5);
						setState(945);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(944);
								sp();
							}
						}

						setState(947);
						filterExpression();
						setState(949);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(948);
								sp();
							}
						}

						setState(951);
						match(T__6);
					}
				}
				break;
				case 12:
					enterOuterAlt(_localctx, 12);
				{
					{
						setState(953);
						match(EXTRACT);
						setState(955);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(954);
								sp();
							}
						}

						setState(957);
						match(T__5);
						setState(959);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(958);
								sp();
							}
						}

						setState(961);
						filterExpression();
						setState(963);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 150, _ctx)) {
							case 1: {
								setState(962);
								sp();
							}
							break;
						}
						setState(970);
						_la = _input.LA(1);
						if (_la == T__11 || _la == WHITESPACE) {
							{
								setState(966);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(965);
										sp();
									}
								}

								setState(968);
								match(T__11);
								setState(969);
								expression();
							}
						}

						setState(972);
						match(T__6);
					}
				}
				break;
				case 13:
					enterOuterAlt(_localctx, 13);
				{
					{
						setState(974);
						match(ALL);
						setState(976);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(975);
								sp();
							}
						}

						setState(978);
						match(T__5);
						setState(980);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(979);
								sp();
							}
						}

						setState(982);
						filterExpression();
						setState(984);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(983);
								sp();
							}
						}

						setState(986);
						match(T__6);
					}
				}
				break;
				case 14:
					enterOuterAlt(_localctx, 14);
				{
					{
						setState(988);
						match(ANY);
						setState(990);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(989);
								sp();
							}
						}

						setState(992);
						match(T__5);
						setState(994);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(993);
								sp();
							}
						}

						setState(996);
						filterExpression();
						setState(998);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(997);
								sp();
							}
						}

						setState(1000);
						match(T__6);
					}
				}
				break;
				case 15:
					enterOuterAlt(_localctx, 15);
				{
					{
						setState(1002);
						match(NONE);
						setState(1004);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1003);
								sp();
							}
						}

						setState(1006);
						match(T__5);
						setState(1008);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1007);
								sp();
							}
						}

						setState(1010);
						filterExpression();
						setState(1012);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1011);
								sp();
							}
						}

						setState(1014);
						match(T__6);
					}
				}
				break;
				case 16:
					enterOuterAlt(_localctx, 16);
				{
					{
						setState(1016);
						match(SINGLE);
						setState(1018);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1017);
								sp();
							}
						}

						setState(1020);
						match(T__5);
						setState(1022);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1021);
								sp();
							}
						}

						setState(1024);
						filterExpression();
						setState(1026);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1025);
								sp();
							}
						}

						setState(1028);
						match(T__6);
					}
				}
				break;
				case 17:
					enterOuterAlt(_localctx, 17);
				{
					setState(1030);
					relationshipsPattern();
				}
				break;
				case 18:
					enterOuterAlt(_localctx, 18);
				{
					setState(1031);
					parenthesizedExpression();
				}
				break;
				case 19:
					enterOuterAlt(_localctx, 19);
				{
					setState(1032);
					functionInvocation();
				}
				break;
				case 20:
					enterOuterAlt(_localctx, 20);
				{
					setState(1033);
					variable();
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PartialComparisonExpressionContext partialComparisonExpression() throws RecognitionException {
		PartialComparisonExpressionContext _localctx = new PartialComparisonExpressionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partialComparisonExpression);
		int _la;
		try {
			setState(1071);
			switch (_input.LA(1)) {
				case T__2:
					enterOuterAlt(_localctx, 1);
				{
					{
						setState(1036);
						match(T__2);
						setState(1038);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1037);
								sp();
							}
						}

						setState(1040);
						expression7();
					}
				}
				break;
				case T__19:
					enterOuterAlt(_localctx, 2);
				{
					{
						setState(1041);
						match(T__19);
						setState(1043);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1042);
								sp();
							}
						}

						setState(1045);
						expression7();
					}
				}
				break;
				case T__20:
					enterOuterAlt(_localctx, 3);
				{
					{
						setState(1046);
						match(T__20);
						setState(1048);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1047);
								sp();
							}
						}

						setState(1050);
						expression7();
					}
				}
				break;
				case T__21:
					enterOuterAlt(_localctx, 4);
				{
					{
						setState(1051);
						match(T__21);
						setState(1053);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1052);
								sp();
							}
						}

						setState(1055);
						expression7();
					}
				}
				break;
				case T__22:
					enterOuterAlt(_localctx, 5);
				{
					{
						setState(1056);
						match(T__22);
						setState(1058);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1057);
								sp();
							}
						}

						setState(1060);
						expression7();
					}
				}
				break;
				case T__23:
					enterOuterAlt(_localctx, 6);
				{
					{
						setState(1061);
						match(T__23);
						setState(1063);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1062);
								sp();
							}
						}

						setState(1065);
						expression7();
					}
				}
				break;
				case T__24:
					enterOuterAlt(_localctx, 7);
				{
					{
						setState(1066);
						match(T__24);
						setState(1068);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1067);
								sp();
							}
						}

						setState(1070);
						expression7();
					}
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ParenthesizedExpressionContext parenthesizedExpression() throws RecognitionException {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_parenthesizedExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1073);
				match(T__5);
				setState(1075);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 174, _ctx)) {
					case 1: {
						setState(1074);
						sp();
					}
					break;
				}
				setState(1077);
				expression();
				setState(1079);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(1078);
						sp();
					}
				}

				setState(1081);
				match(T__6);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RelationshipsPatternContext relationshipsPattern() throws RecognitionException {
		RelationshipsPatternContext _localctx = new RelationshipsPatternContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_relationshipsPattern);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(1083);
				nodePattern();
				setState(1088);
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
						case 1: {
							{
								setState(1085);
								_la = _input.LA(1);
								if (_la == WHITESPACE) {
									{
										setState(1084);
										sp();
									}
								}

								setState(1087);
								patternElementChain();
							}
						}
						break;
						default:
							throw new NoViableAltException(this);
					}
					setState(1090);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 177, _ctx);
				} while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final FilterExpressionContext filterExpression() throws RecognitionException {
		FilterExpressionContext _localctx = new FilterExpressionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_filterExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1092);
				idInColl();
				setState(1097);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 179, _ctx)) {
					case 1: {
						setState(1094);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1093);
								sp();
							}
						}

						setState(1096);
						where();
					}
					break;
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final IdInCollContext idInColl() throws RecognitionException {
		IdInCollContext _localctx = new IdInCollContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_idInColl);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1099);
				variable();
				setState(1100);
				sp();
				setState(1101);
				match(IN);
				setState(1102);
				sp();
				setState(1103);
				expression();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final FunctionInvocationContext functionInvocation() throws RecognitionException {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_functionInvocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1105);
				functionName();
				setState(1107);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(1106);
						sp();
					}
				}

				setState(1109);
				match(T__5);
				setState(1111);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 181, _ctx)) {
					case 1: {
						setState(1110);
						sp();
					}
					break;
				}
				setState(1117);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 183, _ctx)) {
					case 1: {
						setState(1113);
						match(DISTINCT);
						setState(1115);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 182, _ctx)) {
							case 1: {
								setState(1114);
								sp();
							}
							break;
						}
					}
					break;
				}
				setState(1136);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__25) | (1L << T__27) | (1L << T__29) | (1L << StringLiteral) | (1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger) | (1L << HexString) | (1L << Digit) | (1L << UNION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ALL - 64)) | (1L << (OPTIONAL - 64)) | (1L << (MATCH - 64)) | (1L << (UNWIND - 64)) | (1L << (AS - 64)) | (1L << (MERGE - 64)) | (1L << (ON - 64)) | (1L << (CREATE - 64)) | (1L << (SET - 64)) | (1L << (DELETE - 64)) | (1L << (DETACH - 64)) | (1L << (REMOVE - 64)) | (1L << (WITH - 64)) | (1L << (DISTINCT - 64)) | (1L << (RETURN - 64)) | (1L << (ORDER - 64)) | (1L << (BY - 64)) | (1L << (L_SKIP - 64)) | (1L << (LIMIT - 64)) | (1L << (DESCENDING - 64)) | (1L << (DESC - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASC - 64)) | (1L << (WHERE - 64)) | (1L << (OR - 64)) | (1L << (XOR - 64)) | (1L << (AND - 64)) | (1L << (NOT - 64)) | (1L << (IN - 64)) | (1L << (STARTS - 64)) | (1L << (ENDS - 64)) | (1L << (CONTAINS - 64)) | (1L << (IS - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (COUNT - 64)) | (1L << (FILTER - 64)) | (1L << (EXTRACT - 64)) | (1L << (ANY - 64)) | (1L << (NONE - 64)) | (1L << (SINGLE - 64)) | (1L << (UnescapedSymbolicName - 64)) | (1L << (EscapedSymbolicName - 64)) | (1L << (WHITESPACE - 64)))) != 0)) {
					{
						setState(1119);
						expression();
						setState(1121);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1120);
								sp();
							}
						}

						setState(1133);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__1) {
							{
								{
									setState(1123);
									match(T__1);
									setState(1125);
									_errHandler.sync(this);
									switch (getInterpreter().adaptivePredict(_input, 185, _ctx)) {
										case 1: {
											setState(1124);
											sp();
										}
										break;
									}
									setState(1127);
									expression();
									setState(1129);
									_la = _input.LA(1);
									if (_la == WHITESPACE) {
										{
											setState(1128);
											sp();
										}
									}

								}
							}
							setState(1135);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
					}
				}

				setState(1138);
				match(T__6);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1140);
				symbolicName();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ListComprehensionContext listComprehension() throws RecognitionException {
		ListComprehensionContext _localctx = new ListComprehensionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_listComprehension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1142);
				match(T__7);
				setState(1143);
				filterExpression();
				setState(1149);
				_la = _input.LA(1);
				if (_la == T__11 || _la == WHITESPACE) {
					{
						setState(1145);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1144);
								sp();
							}
						}

						setState(1147);
						match(T__11);
						setState(1148);
						expression();
					}
				}

				setState(1151);
				match(T__9);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PropertyLookupContext propertyLookup() throws RecognitionException {
		PropertyLookupContext _localctx = new PropertyLookupContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_propertyLookup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1154);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(1153);
						sp();
					}
				}

				setState(1156);
				match(T__25);
				setState(1158);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(1157);
						sp();
					}
				}

				setState(1164);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 193, _ctx)) {
					case 1: {
						{
							setState(1160);
							propertyKeyName();
							setState(1161);
							_la = _input.LA(1);
							if (!(_la == T__8 || _la == T__26)) {
								_errHandler.recoverInline(this);
							} else {
								consume();
							}
						}
					}
					break;
					case 2: {
						setState(1163);
						propertyKeyName();
					}
					break;
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1166);
				symbolicName();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final NumberLiteralContext numberLiteral() throws RecognitionException {
		NumberLiteralContext _localctx = new NumberLiteralContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_numberLiteral);
		try {
			setState(1170);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 194, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					setState(1168);
					doubleLiteral();
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(1169);
					integerLiteral();
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final MapLiteralContext mapLiteral() throws RecognitionException {
		MapLiteralContext _localctx = new MapLiteralContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_mapLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1172);
				match(T__27);
				setState(1174);
				_la = _input.LA(1);
				if (_la == WHITESPACE) {
					{
						setState(1173);
						sp();
					}
				}

				setState(1209);
				_la = _input.LA(1);
				if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0)) {
					{
						setState(1176);
						propertyKeyName();
						setState(1178);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1177);
								sp();
							}
						}

						setState(1180);
						match(T__10);
						setState(1182);
						_errHandler.sync(this);
						switch (getInterpreter().adaptivePredict(_input, 197, _ctx)) {
							case 1: {
								setState(1181);
								sp();
							}
							break;
						}
						setState(1184);
						expression();
						setState(1186);
						_la = _input.LA(1);
						if (_la == WHITESPACE) {
							{
								setState(1185);
								sp();
							}
						}

						setState(1206);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__1) {
							{
								{
									setState(1188);
									match(T__1);
									setState(1190);
									_la = _input.LA(1);
									if (_la == WHITESPACE) {
										{
											setState(1189);
											sp();
										}
									}

									setState(1192);
									propertyKeyName();
									setState(1194);
									_la = _input.LA(1);
									if (_la == WHITESPACE) {
										{
											setState(1193);
											sp();
										}
									}

									setState(1196);
									match(T__10);
									setState(1198);
									_errHandler.sync(this);
									switch (getInterpreter().adaptivePredict(_input, 201, _ctx)) {
										case 1: {
											setState(1197);
											sp();
										}
										break;
									}
									setState(1200);
									expression();
									setState(1202);
									_la = _input.LA(1);
									if (_la == WHITESPACE) {
										{
											setState(1201);
											sp();
										}
									}

								}
							}
							setState(1208);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
					}
				}

				setState(1211);
				match(T__28);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1213);
				match(T__29);
				setState(1216);
				switch (_input.LA(1)) {
					case HexString:
					case UNION:
					case ALL:
					case OPTIONAL:
					case MATCH:
					case UNWIND:
					case AS:
					case MERGE:
					case ON:
					case CREATE:
					case SET:
					case DELETE:
					case DETACH:
					case REMOVE:
					case WITH:
					case DISTINCT:
					case RETURN:
					case ORDER:
					case BY:
					case L_SKIP:
					case LIMIT:
					case DESCENDING:
					case DESC:
					case ASCENDING:
					case ASC:
					case WHERE:
					case OR:
					case XOR:
					case AND:
					case NOT:
					case IN:
					case STARTS:
					case ENDS:
					case CONTAINS:
					case IS:
					case NULL:
					case TRUE:
					case FALSE:
					case COUNT:
					case FILTER:
					case EXTRACT:
					case ANY:
					case NONE:
					case SINGLE:
					case UnescapedSymbolicName:
					case EscapedSymbolicName: {
						setState(1214);
						symbolicName();
					}
					break;
					case DecimalInteger: {
						setState(1215);
						match(DecimalInteger);
					}
					break;
					default:
						throw new NoViableAltException(this);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PropertyExpressionContext propertyExpression() throws RecognitionException {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_propertyExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(1218);
				atom();
				setState(1223);
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
						case 1: {
							{
								setState(1220);
								_errHandler.sync(this);
								switch (getInterpreter().adaptivePredict(_input, 206, _ctx)) {
									case 1: {
										setState(1219);
										sp();
									}
									break;
								}
								setState(1222);
								propertyLookup();
							}
						}
						break;
						default:
							throw new NoViableAltException(this);
					}
					setState(1225);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 207, _ctx);
				} while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final PropertyKeyNameContext propertyKeyName() throws RecognitionException {
		PropertyKeyNameContext _localctx = new PropertyKeyNameContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_propertyKeyName);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1227);
				symbolicName();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final IntegerLiteralContext integerLiteral() throws RecognitionException {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_integerLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1229);
				_la = _input.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HexInteger) | (1L << DecimalInteger) | (1L << OctalInteger))) != 0))) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final DoubleLiteralContext doubleLiteral() throws RecognitionException {
		DoubleLiteralContext _localctx = new DoubleLiteralContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_doubleLiteral);
		try {
			setState(1233);
			_errHandler.sync(this);
			switch (getInterpreter().adaptivePredict(_input, 208, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					setState(1231);
					exponentDecimalReal();
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(1232);
					regularDecimalReal();
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ExponentDecimalRealContext exponentDecimalReal() throws RecognitionException {
		ExponentDecimalRealContext _localctx = new ExponentDecimalRealContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_exponentDecimalReal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1241);
				switch (_input.LA(1)) {
					case T__25:
					case Digit: {
						setState(1236);
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
								{
									setState(1235);
									_la = _input.LA(1);
									if (!(_la == T__25 || _la == Digit)) {
										_errHandler.recoverInline(this);
									} else {
										consume();
									}
								}
							}
							setState(1238);
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while (_la == T__25 || _la == Digit);
					}
					break;
					case DecimalInteger: {
						setState(1240);
						match(DecimalInteger);
					}
					break;
					default:
						throw new NoViableAltException(this);
				}
				setState(1245);
				_errHandler.sync(this);
				switch (getInterpreter().adaptivePredict(_input, 211, _ctx)) {
					case 1: {
						setState(1243);
						_la = _input.LA(1);
						if (!(_la == T__30 || _la == T__31)) {
							_errHandler.recoverInline(this);
						} else {
							consume();
						}
					}
					break;
					case 2: {
						setState(1244);
						_la = _input.LA(1);
						if (!(_la == T__30 || _la == T__31)) {
							_errHandler.recoverInline(this);
						} else {
							consume();
						}
					}
					break;
				}
				setState(1247);
				_la = _input.LA(1);
				if (!(_la == DecimalInteger || _la == DigitString)) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RegularDecimalRealContext regularDecimalReal() throws RecognitionException {
		RegularDecimalRealContext _localctx = new RegularDecimalRealContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_regularDecimalReal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1256);
				switch (_input.LA(1)) {
					case T__25:
					case Digit: {
						setState(1252);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == Digit) {
							{
								{
									setState(1249);
									match(Digit);
								}
							}
							setState(1254);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
					}
					break;
					case DecimalInteger: {
						setState(1255);
						match(DecimalInteger);
					}
					break;
					default:
						throw new NoViableAltException(this);
				}
				setState(1258);
				match(T__25);
				setState(1259);
				_la = _input.LA(1);
				if (!(_la == DecimalInteger || _la == DigitString)) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SymbolicNameContext symbolicName() throws RecognitionException {
		SymbolicNameContext _localctx = new SymbolicNameContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_symbolicName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1261);
				_la = _input.LA(1);
				if (!(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (HexString - 57)) | (1L << (UNION - 57)) | (1L << (ALL - 57)) | (1L << (OPTIONAL - 57)) | (1L << (MATCH - 57)) | (1L << (UNWIND - 57)) | (1L << (AS - 57)) | (1L << (MERGE - 57)) | (1L << (ON - 57)) | (1L << (CREATE - 57)) | (1L << (SET - 57)) | (1L << (DELETE - 57)) | (1L << (DETACH - 57)) | (1L << (REMOVE - 57)) | (1L << (WITH - 57)) | (1L << (DISTINCT - 57)) | (1L << (RETURN - 57)) | (1L << (ORDER - 57)) | (1L << (BY - 57)) | (1L << (L_SKIP - 57)) | (1L << (LIMIT - 57)) | (1L << (DESCENDING - 57)) | (1L << (DESC - 57)) | (1L << (ASCENDING - 57)) | (1L << (ASC - 57)) | (1L << (WHERE - 57)) | (1L << (OR - 57)) | (1L << (XOR - 57)) | (1L << (AND - 57)) | (1L << (NOT - 57)) | (1L << (IN - 57)) | (1L << (STARTS - 57)) | (1L << (ENDS - 57)) | (1L << (CONTAINS - 57)) | (1L << (IS - 57)) | (1L << (NULL - 57)) | (1L << (TRUE - 57)) | (1L << (FALSE - 57)) | (1L << (COUNT - 57)) | (1L << (FILTER - 57)) | (1L << (EXTRACT - 57)) | (1L << (ANY - 57)) | (1L << (NONE - 57)) | (1L << (SINGLE - 57)) | (1L << (UnescapedSymbolicName - 57)) | (1L << (EscapedSymbolicName - 57)))) != 0))) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SpContext sp() throws RecognitionException {
		SpContext _localctx = new SpContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_sp);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(1264);
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
						case 1: {
							{
								setState(1263);
								match(WHITESPACE);
							}
						}
						break;
						default:
							throw new NoViableAltException(this);
					}
					setState(1266);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 214, _ctx);
				} while (_alt != 2 && _alt != ATN.INVALID_ALT_NUMBER);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final LeftArrowHeadContext leftArrowHead() throws RecognitionException {
		LeftArrowHeadContext _localctx = new LeftArrowHeadContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_leftArrowHead);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1268);
				_la = _input.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35))) != 0))) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final RightArrowHeadContext rightArrowHead() throws RecognitionException {
		RightArrowHeadContext _localctx = new RightArrowHeadContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_rightArrowHead);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1270);
				_la = _input.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0))) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final DashContext dash() throws RecognitionException {
		DashContext _localctx = new DashContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dash);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1272);
				_la = _input.LA(1);
				if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50))) != 0))) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final DigitContext digit() throws RecognitionException {
		DigitContext _localctx = new DigitContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_digit);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1274);
				match(Digit);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CypherContext extends ParserRuleContext {
		public CypherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public StatementContext statement() {
			return getRuleContext(StatementContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_cypher;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterCypher(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitCypher(this);
		}
	}

	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public QueryContext query() {
			return getRuleContext(QueryContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_statement;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterStatement(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitStatement(this);
		}
	}

	public static class QueryContext extends ParserRuleContext {
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public RegularQueryContext regularQuery() {
			return getRuleContext(RegularQueryContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_query;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterQuery(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitQuery(this);
		}
	}

	public static class RegularQueryContext extends ParserRuleContext {
		public RegularQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SingleQueryContext singleQuery() {
			return getRuleContext(SingleQueryContext.class, 0);
		}

		public List<UnionContext> union() {
			return getRuleContexts(UnionContext.class);
		}

		public UnionContext union(int i) {
			return getRuleContext(UnionContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_regularQuery;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRegularQuery(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRegularQuery(this);
		}
	}

	public static class SingleQueryContext extends ParserRuleContext {
		public SingleQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<ClauseContext> clause() {
			return getRuleContexts(ClauseContext.class);
		}

		public ClauseContext clause(int i) {
			return getRuleContext(ClauseContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_singleQuery;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSingleQuery(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSingleQuery(this);
		}
	}

	public static class UnionContext extends ParserRuleContext {
		public UnionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode UNION() {
			return getToken(CypherParser.UNION, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode ALL() {
			return getToken(CypherParser.ALL, 0);
		}

		public SingleQueryContext singleQuery() {
			return getRuleContext(SingleQueryContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_union;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterUnion(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitUnion(this);
		}
	}

	public static class ClauseContext extends ParserRuleContext {
		public ClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public MatchContext match() {
			return getRuleContext(MatchContext.class, 0);
		}

		public UnwindContext unwind() {
			return getRuleContext(UnwindContext.class, 0);
		}

		public MergeContext merge() {
			return getRuleContext(MergeContext.class, 0);
		}

		public CreateContext create() {
			return getRuleContext(CreateContext.class, 0);
		}

		public SetContext set() {
			return getRuleContext(SetContext.class, 0);
		}

		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class, 0);
		}

		public RemoveContext remove() {
			return getRuleContext(RemoveContext.class, 0);
		}

		public WithContext with() {
			return getRuleContext(WithContext.class, 0);
		}

		public ReturnMainContext returnMain() {
			return getRuleContext(ReturnMainContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_clause;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterClause(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitClause(this);
		}
	}

	public static class MatchContext extends ParserRuleContext {
		public MatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode MATCH() {
			return getToken(CypherParser.MATCH, 0);
		}

		public PatternContext pattern() {
			return getRuleContext(PatternContext.class, 0);
		}

		public TerminalNode OPTIONAL() {
			return getToken(CypherParser.OPTIONAL, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public WhereContext where() {
			return getRuleContext(WhereContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_match;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterMatch(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitMatch(this);
		}
	}

	public static class UnwindContext extends ParserRuleContext {
		public UnwindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode UNWIND() {
			return getToken(CypherParser.UNWIND, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode AS() {
			return getToken(CypherParser.AS, 0);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_unwind;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterUnwind(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitUnwind(this);
		}
	}

	public static class MergeContext extends ParserRuleContext {
		public MergeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode MERGE() {
			return getToken(CypherParser.MERGE, 0);
		}

		public PatternPartContext patternPart() {
			return getRuleContext(PatternPartContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<MergeActionContext> mergeAction() {
			return getRuleContexts(MergeActionContext.class);
		}

		public MergeActionContext mergeAction(int i) {
			return getRuleContext(MergeActionContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_merge;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterMerge(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitMerge(this);
		}
	}

	public static class MergeActionContext extends ParserRuleContext {
		public MergeActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode ON() {
			return getToken(CypherParser.ON, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode MATCH() {
			return getToken(CypherParser.MATCH, 0);
		}

		public SetContext set() {
			return getRuleContext(SetContext.class, 0);
		}

		public TerminalNode CREATE() {
			return getToken(CypherParser.CREATE, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_mergeAction;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterMergeAction(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitMergeAction(this);
		}
	}

	public static class CreateContext extends ParserRuleContext {
		public CreateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode CREATE() {
			return getToken(CypherParser.CREATE, 0);
		}

		public PatternContext pattern() {
			return getRuleContext(PatternContext.class, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_create;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterCreate(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitCreate(this);
		}
	}

	public static class SetContext extends ParserRuleContext {
		public SetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode SET() {
			return getToken(CypherParser.SET, 0);
		}

		public List<SetItemContext> setItem() {
			return getRuleContexts(SetItemContext.class);
		}

		public SetItemContext setItem(int i) {
			return getRuleContext(SetItemContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_set;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSet(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSet(this);
		}
	}

	public static class SetItemContext extends ParserRuleContext {
		public SetItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public PropertyExpressionContext propertyExpression() {
			return getRuleContext(PropertyExpressionContext.class, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		public NodeLabelsContext nodeLabels() {
			return getRuleContext(NodeLabelsContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_setItem;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSetItem(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSetItem(this);
		}
	}

	public static class DeleteContext extends ParserRuleContext {
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode DELETE() {
			return getToken(CypherParser.DELETE, 0);
		}

		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}

		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class, i);
		}

		public TerminalNode DETACH() {
			return getToken(CypherParser.DETACH, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_delete;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterDelete(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitDelete(this);
		}
	}

	public static class RemoveContext extends ParserRuleContext {
		public RemoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode REMOVE() {
			return getToken(CypherParser.REMOVE, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<RemoveItemContext> removeItem() {
			return getRuleContexts(RemoveItemContext.class);
		}

		public RemoveItemContext removeItem(int i) {
			return getRuleContext(RemoveItemContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_remove;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRemove(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRemove(this);
		}
	}

	public static class RemoveItemContext extends ParserRuleContext {
		public RemoveItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		public NodeLabelsContext nodeLabels() {
			return getRuleContext(NodeLabelsContext.class, 0);
		}

		public PropertyExpressionContext propertyExpression() {
			return getRuleContext(PropertyExpressionContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_removeItem;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRemoveItem(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRemoveItem(this);
		}
	}

	public static class WithContext extends ParserRuleContext {
		public WithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode WITH() {
			return getToken(CypherParser.WITH, 0);
		}

		public TerminalNode DISTINCT() {
			return getToken(CypherParser.DISTINCT, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		public ReturnBodyContext returnBody() {
			return getRuleContext(ReturnBodyContext.class, 0);
		}

		public WhereContext where() {
			return getRuleContext(WhereContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_with;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterWith(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitWith(this);
		}
	}

	public static class ReturnMainContext extends ParserRuleContext {
		public ReturnMainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode RETURN() {
			return getToken(CypherParser.RETURN, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode DISTINCT() {
			return getToken(CypherParser.DISTINCT, 0);
		}

		public ReturnBodyContext returnBody() {
			return getRuleContext(ReturnBodyContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_returnMain;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnMain(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnMain(this);
		}
	}

	public static class ReturnBodyContext extends ParserRuleContext {
		public ReturnBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public ReturnItemsContext returnItems() {
			return getRuleContext(ReturnItemsContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public OrderContext order() {
			return getRuleContext(OrderContext.class, 0);
		}

		public SkipContext skip() {
			return getRuleContext(SkipContext.class, 0);
		}

		public LimitContext limit() {
			return getRuleContext(LimitContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_returnBody;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnBody(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnBody(this);
		}
	}

	public static class ReturnItemsContext extends ParserRuleContext {
		public ReturnItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<ReturnItemContext> returnItem() {
			return getRuleContexts(ReturnItemContext.class);
		}

		public ReturnItemContext returnItem(int i) {
			return getRuleContext(ReturnItemContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_returnItems;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnItems(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnItems(this);
		}
	}

	public static class ReturnItemContext extends ParserRuleContext {
		public ReturnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode AS() {
			return getToken(CypherParser.AS, 0);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_returnItem;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterReturnItem(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitReturnItem(this);
		}
	}

	public static class OrderContext extends ParserRuleContext {
		public OrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode ORDER() {
			return getToken(CypherParser.ORDER, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode BY() {
			return getToken(CypherParser.BY, 0);
		}

		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}

		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_order;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterOrder(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitOrder(this);
		}
	}

	public static class SkipContext extends ParserRuleContext {
		public SkipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode L_SKIP() {
			return getToken(CypherParser.L_SKIP, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_skip;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSkip(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSkip(this);
		}
	}

	public static class LimitContext extends ParserRuleContext {
		public LimitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode LIMIT() {
			return getToken(CypherParser.LIMIT, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_limit;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterLimit(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitLimit(this);
		}
	}

	public static class SortItemContext extends ParserRuleContext {
		public SortItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		public TerminalNode DESCENDING() {
			return getToken(CypherParser.DESCENDING, 0);
		}

		public TerminalNode DESC() {
			return getToken(CypherParser.DESC, 0);
		}

		public TerminalNode ASCENDING() {
			return getToken(CypherParser.ASCENDING, 0);
		}

		public TerminalNode ASC() {
			return getToken(CypherParser.ASC, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_sortItem;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSortItem(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSortItem(this);
		}
	}

	public static class WhereContext extends ParserRuleContext {
		public WhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode WHERE() {
			return getToken(CypherParser.WHERE, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_where;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterWhere(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitWhere(this);
		}
	}

	public static class PatternContext extends ParserRuleContext {
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<PatternPartContext> patternPart() {
			return getRuleContexts(PatternPartContext.class);
		}

		public PatternPartContext patternPart(int i) {
			return getRuleContext(PatternPartContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_pattern;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPattern(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPattern(this);
		}
	}

	public static class PatternPartContext extends ParserRuleContext {
		public PatternPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		public AnonymousPatternPartContext anonymousPatternPart() {
			return getRuleContext(AnonymousPatternPartContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_patternPart;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPatternPart(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPatternPart(this);
		}
	}

	public static class AnonymousPatternPartContext extends ParserRuleContext {
		public AnonymousPatternPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public PatternElementContext patternElement() {
			return getRuleContext(PatternElementContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_anonymousPatternPart;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterAnonymousPatternPart(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitAnonymousPatternPart(this);
		}
	}

	public static class PatternElementContext extends ParserRuleContext {
		public PatternElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public NodePatternContext nodePattern() {
			return getRuleContext(NodePatternContext.class, 0);
		}

		public List<PatternElementChainContext> patternElementChain() {
			return getRuleContexts(PatternElementChainContext.class);
		}

		public PatternElementChainContext patternElementChain(int i) {
			return getRuleContext(PatternElementChainContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public PatternElementContext patternElement() {
			return getRuleContext(PatternElementContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_patternElement;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPatternElement(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPatternElement(this);
		}
	}

	public static class NodePatternContext extends ParserRuleContext {
		public NodePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		public NodeLabelsContext nodeLabels() {
			return getRuleContext(NodeLabelsContext.class, 0);
		}

		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_nodePattern;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterNodePattern(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitNodePattern(this);
		}
	}

	public static class PatternElementChainContext extends ParserRuleContext {
		public PatternElementChainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public RelationshipPatternContext relationshipPattern() {
			return getRuleContext(RelationshipPatternContext.class, 0);
		}

		public NodePatternContext nodePattern() {
			return getRuleContext(NodePatternContext.class, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_patternElementChain;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPatternElementChain(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPatternElementChain(this);
		}
	}

	public static class RelationshipPatternContext extends ParserRuleContext {
		public RelationshipPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public LeftArrowHeadContext leftArrowHead() {
			return getRuleContext(LeftArrowHeadContext.class, 0);
		}

		public List<DashContext> dash() {
			return getRuleContexts(DashContext.class);
		}

		public DashContext dash(int i) {
			return getRuleContext(DashContext.class, i);
		}

		public RightArrowHeadContext rightArrowHead() {
			return getRuleContext(RightArrowHeadContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public RelationshipDetailContext relationshipDetail() {
			return getRuleContext(RelationshipDetailContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_relationshipPattern;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipPattern(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipPattern(this);
		}
	}

	public static class RelationshipDetailContext extends ParserRuleContext {
		public RelationshipDetailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		public RelationshipTypesContext relationshipTypes() {
			return getRuleContext(RelationshipTypesContext.class, 0);
		}

		public RangeLiteralContext rangeLiteral() {
			return getRuleContext(RangeLiteralContext.class, 0);
		}

		public PropertiesContext properties() {
			return getRuleContext(PropertiesContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_relationshipDetail;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipDetail(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipDetail(this);
		}
	}

	public static class PropertiesContext extends ParserRuleContext {
		public PropertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public MapLiteralContext mapLiteral() {
			return getRuleContext(MapLiteralContext.class, 0);
		}

		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_properties;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterProperties(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitProperties(this);
		}
	}

	public static class RelationshipTypesContext extends ParserRuleContext {
		public RelationshipTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<RelTypeNameContext> relTypeName() {
			return getRuleContexts(RelTypeNameContext.class);
		}

		public RelTypeNameContext relTypeName(int i) {
			return getRuleContext(RelTypeNameContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_relationshipTypes;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipTypes(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipTypes(this);
		}
	}

	public static class NodeLabelsContext extends ParserRuleContext {
		public NodeLabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<NodeLabelContext> nodeLabel() {
			return getRuleContexts(NodeLabelContext.class);
		}

		public NodeLabelContext nodeLabel(int i) {
			return getRuleContext(NodeLabelContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_nodeLabels;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterNodeLabels(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitNodeLabels(this);
		}
	}

	public static class NodeLabelContext extends ParserRuleContext {
		public NodeLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_nodeLabel;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterNodeLabel(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitNodeLabel(this);
		}
	}

	public static class RangeLiteralContext extends ParserRuleContext {
		public RangeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<IntegerLiteralContext> integerLiteral() {
			return getRuleContexts(IntegerLiteralContext.class);
		}

		public IntegerLiteralContext integerLiteral(int i) {
			return getRuleContext(IntegerLiteralContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_rangeLiteral;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRangeLiteral(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRangeLiteral(this);
		}
	}

	public static class LabelNameContext extends ParserRuleContext {
		public LabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SymbolicNameContext symbolicName() {
			return getRuleContext(SymbolicNameContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_labelName;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterLabelName(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitLabelName(this);
		}
	}

	public static class RelTypeNameContext extends ParserRuleContext {
		public RelTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SymbolicNameContext symbolicName() {
			return getRuleContext(SymbolicNameContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_relTypeName;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRelTypeName(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRelTypeName(this);
		}
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public Expression12Context expression12() {
			return getRuleContext(Expression12Context.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression(this);
		}
	}

	public static class Expression12Context extends ParserRuleContext {
		public Expression12Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression11Context> expression11() {
			return getRuleContexts(Expression11Context.class);
		}

		public Expression11Context expression11(int i) {
			return getRuleContext(Expression11Context.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<TerminalNode> OR() {
			return getTokens(CypherParser.OR);
		}

		public TerminalNode OR(int i) {
			return getToken(CypherParser.OR, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression12;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression12(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression12(this);
		}
	}

	public static class Expression11Context extends ParserRuleContext {
		public Expression11Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression10Context> expression10() {
			return getRuleContexts(Expression10Context.class);
		}

		public Expression10Context expression10(int i) {
			return getRuleContext(Expression10Context.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<TerminalNode> XOR() {
			return getTokens(CypherParser.XOR);
		}

		public TerminalNode XOR(int i) {
			return getToken(CypherParser.XOR, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression11;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression11(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression11(this);
		}
	}

	public static class Expression10Context extends ParserRuleContext {
		public Expression10Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression9Context> expression9() {
			return getRuleContexts(Expression9Context.class);
		}

		public Expression9Context expression9(int i) {
			return getRuleContext(Expression9Context.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<TerminalNode> AND() {
			return getTokens(CypherParser.AND);
		}

		public TerminalNode AND(int i) {
			return getToken(CypherParser.AND, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression10;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression10(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression10(this);
		}
	}

	public static class Expression9Context extends ParserRuleContext {
		public Expression9Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public Expression8Context expression8() {
			return getRuleContext(Expression8Context.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<TerminalNode> NOT() {
			return getTokens(CypherParser.NOT);
		}

		public TerminalNode NOT(int i) {
			return getToken(CypherParser.NOT, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression9;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression9(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression9(this);
		}
	}

	public static class Expression8Context extends ParserRuleContext {
		public Expression8Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public Expression7Context expression7() {
			return getRuleContext(Expression7Context.class, 0);
		}

		public List<PartialComparisonExpressionContext> partialComparisonExpression() {
			return getRuleContexts(PartialComparisonExpressionContext.class);
		}

		public PartialComparisonExpressionContext partialComparisonExpression(int i) {
			return getRuleContext(PartialComparisonExpressionContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression8;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression8(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression8(this);
		}
	}

	public static class Expression7Context extends ParserRuleContext {
		public Expression7Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression6Context> expression6() {
			return getRuleContexts(Expression6Context.class);
		}

		public Expression6Context expression6(int i) {
			return getRuleContext(Expression6Context.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression7;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression7(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression7(this);
		}
	}

	public static class Expression6Context extends ParserRuleContext {
		public Expression6Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression5Context> expression5() {
			return getRuleContexts(Expression5Context.class);
		}

		public Expression5Context expression5(int i) {
			return getRuleContext(Expression5Context.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression6;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression6(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression6(this);
		}
	}

	public static class Expression5Context extends ParserRuleContext {
		public Expression5Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression4Context> expression4() {
			return getRuleContexts(Expression4Context.class);
		}

		public Expression4Context expression4(int i) {
			return getRuleContext(Expression4Context.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression5;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression5(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression5(this);
		}
	}

	public static class Expression4Context extends ParserRuleContext {
		public Expression4Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public Expression3Context expression3() {
			return getRuleContext(Expression3Context.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression4;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression4(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression4(this);
		}
	}

	public static class Expression3Context extends ParserRuleContext {
		public Expression3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<Expression2Context> expression2() {
			return getRuleContexts(Expression2Context.class);
		}

		public Expression2Context expression2(int i) {
			return getRuleContext(Expression2Context.class, i);
		}

		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}

		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<TerminalNode> IS() {
			return getTokens(CypherParser.IS);
		}

		public TerminalNode IS(int i) {
			return getToken(CypherParser.IS, i);
		}

		public List<TerminalNode> NULL() {
			return getTokens(CypherParser.NULL);
		}

		public TerminalNode NULL(int i) {
			return getToken(CypherParser.NULL, i);
		}

		public List<TerminalNode> NOT() {
			return getTokens(CypherParser.NOT);
		}

		public TerminalNode NOT(int i) {
			return getToken(CypherParser.NOT, i);
		}

		public List<TerminalNode> IN() {
			return getTokens(CypherParser.IN);
		}

		public TerminalNode IN(int i) {
			return getToken(CypherParser.IN, i);
		}

		public List<TerminalNode> STARTS() {
			return getTokens(CypherParser.STARTS);
		}

		public TerminalNode STARTS(int i) {
			return getToken(CypherParser.STARTS, i);
		}

		public List<TerminalNode> WITH() {
			return getTokens(CypherParser.WITH);
		}

		public TerminalNode WITH(int i) {
			return getToken(CypherParser.WITH, i);
		}

		public List<TerminalNode> ENDS() {
			return getTokens(CypherParser.ENDS);
		}

		public TerminalNode ENDS(int i) {
			return getToken(CypherParser.ENDS, i);
		}

		public List<TerminalNode> CONTAINS() {
			return getTokens(CypherParser.CONTAINS);
		}

		public TerminalNode CONTAINS(int i) {
			return getToken(CypherParser.CONTAINS, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression3;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression3(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression3(this);
		}
	}

	public static class Expression2Context extends ParserRuleContext {
		public Expression2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public AtomContext atom() {
			return getRuleContext(AtomContext.class, 0);
		}

		public List<PropertyLookupContext> propertyLookup() {
			return getRuleContexts(PropertyLookupContext.class);
		}

		public PropertyLookupContext propertyLookup(int i) {
			return getRuleContext(PropertyLookupContext.class, i);
		}

		public List<NodeLabelsContext> nodeLabels() {
			return getRuleContexts(NodeLabelsContext.class);
		}

		public NodeLabelsContext nodeLabels(int i) {
			return getRuleContext(NodeLabelsContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_expression2;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExpression2(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExpression2(this);
		}
	}

	public static class AtomContext extends ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public NumberLiteralContext numberLiteral() {
			return getRuleContext(NumberLiteralContext.class, 0);
		}

		public TerminalNode StringLiteral() {
			return getToken(CypherParser.StringLiteral, 0);
		}

		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class, 0);
		}

		public TerminalNode TRUE() {
			return getToken(CypherParser.TRUE, 0);
		}

		public TerminalNode FALSE() {
			return getToken(CypherParser.FALSE, 0);
		}

		public TerminalNode NULL() {
			return getToken(CypherParser.NULL, 0);
		}

		public TerminalNode COUNT() {
			return getToken(CypherParser.COUNT, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public MapLiteralContext mapLiteral() {
			return getRuleContext(MapLiteralContext.class, 0);
		}

		public ListComprehensionContext listComprehension() {
			return getRuleContext(ListComprehensionContext.class, 0);
		}

		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}

		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class, i);
		}

		public TerminalNode FILTER() {
			return getToken(CypherParser.FILTER, 0);
		}

		public FilterExpressionContext filterExpression() {
			return getRuleContext(FilterExpressionContext.class, 0);
		}

		public TerminalNode EXTRACT() {
			return getToken(CypherParser.EXTRACT, 0);
		}

		public TerminalNode ALL() {
			return getToken(CypherParser.ALL, 0);
		}

		public TerminalNode ANY() {
			return getToken(CypherParser.ANY, 0);
		}

		public TerminalNode NONE() {
			return getToken(CypherParser.NONE, 0);
		}

		public TerminalNode SINGLE() {
			return getToken(CypherParser.SINGLE, 0);
		}

		public RelationshipsPatternContext relationshipsPattern() {
			return getRuleContext(RelationshipsPatternContext.class, 0);
		}

		public ParenthesizedExpressionContext parenthesizedExpression() {
			return getRuleContext(ParenthesizedExpressionContext.class, 0);
		}

		public FunctionInvocationContext functionInvocation() {
			return getRuleContext(FunctionInvocationContext.class, 0);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_atom;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterAtom(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitAtom(this);
		}
	}

	public static class PartialComparisonExpressionContext extends ParserRuleContext {
		public PartialComparisonExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public Expression7Context expression7() {
			return getRuleContext(Expression7Context.class, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_partialComparisonExpression;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPartialComparisonExpression(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPartialComparisonExpression(this);
		}
	}

	public static class ParenthesizedExpressionContext extends ParserRuleContext {
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_parenthesizedExpression;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterParenthesizedExpression(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitParenthesizedExpression(this);
		}
	}

	public static class RelationshipsPatternContext extends ParserRuleContext {
		public RelationshipsPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public NodePatternContext nodePattern() {
			return getRuleContext(NodePatternContext.class, 0);
		}

		public List<PatternElementChainContext> patternElementChain() {
			return getRuleContexts(PatternElementChainContext.class);
		}

		public PatternElementChainContext patternElementChain(int i) {
			return getRuleContext(PatternElementChainContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_relationshipsPattern;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRelationshipsPattern(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRelationshipsPattern(this);
		}
	}

	public static class FilterExpressionContext extends ParserRuleContext {
		public FilterExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public IdInCollContext idInColl() {
			return getRuleContext(IdInCollContext.class, 0);
		}

		public WhereContext where() {
			return getRuleContext(WhereContext.class, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_filterExpression;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterFilterExpression(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitFilterExpression(this);
		}
	}

	public static class IdInCollContext extends ParserRuleContext {
		public IdInCollContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public VariableContext variable() {
			return getRuleContext(VariableContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode IN() {
			return getToken(CypherParser.IN, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_idInColl;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterIdInColl(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitIdInColl(this);
		}
	}

	public static class FunctionInvocationContext extends ParserRuleContext {
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public TerminalNode DISTINCT() {
			return getToken(CypherParser.DISTINCT, 0);
		}

		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}

		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_functionInvocation;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterFunctionInvocation(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitFunctionInvocation(this);
		}
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SymbolicNameContext symbolicName() {
			return getRuleContext(SymbolicNameContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_functionName;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterFunctionName(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitFunctionName(this);
		}
	}

	public static class ListComprehensionContext extends ParserRuleContext {
		public ListComprehensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public FilterExpressionContext filterExpression() {
			return getRuleContext(FilterExpressionContext.class, 0);
		}

		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class, 0);
		}

		public SpContext sp() {
			return getRuleContext(SpContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_listComprehension;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterListComprehension(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitListComprehension(this);
		}
	}

	public static class PropertyLookupContext extends ParserRuleContext {
		public PropertyLookupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public PropertyKeyNameContext propertyKeyName() {
			return getRuleContext(PropertyKeyNameContext.class, 0);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_propertyLookup;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPropertyLookup(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPropertyLookup(this);
		}
	}

	public static class VariableContext extends ParserRuleContext {
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SymbolicNameContext symbolicName() {
			return getRuleContext(SymbolicNameContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_variable;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterVariable(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitVariable(this);
		}
	}

	public static class NumberLiteralContext extends ParserRuleContext {
		public NumberLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public DoubleLiteralContext doubleLiteral() {
			return getRuleContext(DoubleLiteralContext.class, 0);
		}

		public IntegerLiteralContext integerLiteral() {
			return getRuleContext(IntegerLiteralContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_numberLiteral;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterNumberLiteral(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitNumberLiteral(this);
		}
	}

	public static class MapLiteralContext extends ParserRuleContext {
		public MapLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		public List<PropertyKeyNameContext> propertyKeyName() {
			return getRuleContexts(PropertyKeyNameContext.class);
		}

		public PropertyKeyNameContext propertyKeyName(int i) {
			return getRuleContext(PropertyKeyNameContext.class, i);
		}

		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}

		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_mapLiteral;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterMapLiteral(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitMapLiteral(this);
		}
	}

	public static class ParameterContext extends ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SymbolicNameContext symbolicName() {
			return getRuleContext(SymbolicNameContext.class, 0);
		}

		public TerminalNode DecimalInteger() {
			return getToken(CypherParser.DecimalInteger, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_parameter;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterParameter(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitParameter(this);
		}
	}

	public static class PropertyExpressionContext extends ParserRuleContext {
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public AtomContext atom() {
			return getRuleContext(AtomContext.class, 0);
		}

		public List<PropertyLookupContext> propertyLookup() {
			return getRuleContexts(PropertyLookupContext.class);
		}

		public PropertyLookupContext propertyLookup(int i) {
			return getRuleContext(PropertyLookupContext.class, i);
		}

		public List<SpContext> sp() {
			return getRuleContexts(SpContext.class);
		}

		public SpContext sp(int i) {
			return getRuleContext(SpContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_propertyExpression;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPropertyExpression(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPropertyExpression(this);
		}
	}

	public static class PropertyKeyNameContext extends ParserRuleContext {
		public PropertyKeyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public SymbolicNameContext symbolicName() {
			return getRuleContext(SymbolicNameContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_propertyKeyName;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterPropertyKeyName(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitPropertyKeyName(this);
		}
	}

	public static class IntegerLiteralContext extends ParserRuleContext {
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode HexInteger() {
			return getToken(CypherParser.HexInteger, 0);
		}

		public TerminalNode OctalInteger() {
			return getToken(CypherParser.OctalInteger, 0);
		}

		public TerminalNode DecimalInteger() {
			return getToken(CypherParser.DecimalInteger, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_integerLiteral;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterIntegerLiteral(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitIntegerLiteral(this);
		}
	}

	public static class DoubleLiteralContext extends ParserRuleContext {
		public DoubleLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public ExponentDecimalRealContext exponentDecimalReal() {
			return getRuleContext(ExponentDecimalRealContext.class, 0);
		}

		public RegularDecimalRealContext regularDecimalReal() {
			return getRuleContext(RegularDecimalRealContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_doubleLiteral;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterDoubleLiteral(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitDoubleLiteral(this);
		}
	}

	public static class ExponentDecimalRealContext extends ParserRuleContext {
		public ExponentDecimalRealContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode DigitString() {
			return getToken(CypherParser.DigitString, 0);
		}

		public List<TerminalNode> DecimalInteger() {
			return getTokens(CypherParser.DecimalInteger);
		}

		public TerminalNode DecimalInteger(int i) {
			return getToken(CypherParser.DecimalInteger, i);
		}

		public List<TerminalNode> Digit() {
			return getTokens(CypherParser.Digit);
		}

		public TerminalNode Digit(int i) {
			return getToken(CypherParser.Digit, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_exponentDecimalReal;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterExponentDecimalReal(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitExponentDecimalReal(this);
		}
	}

	public static class RegularDecimalRealContext extends ParserRuleContext {
		public RegularDecimalRealContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode DigitString() {
			return getToken(CypherParser.DigitString, 0);
		}

		public List<TerminalNode> DecimalInteger() {
			return getTokens(CypherParser.DecimalInteger);
		}

		public TerminalNode DecimalInteger(int i) {
			return getToken(CypherParser.DecimalInteger, i);
		}

		public List<TerminalNode> Digit() {
			return getTokens(CypherParser.Digit);
		}

		public TerminalNode Digit(int i) {
			return getToken(CypherParser.Digit, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_regularDecimalReal;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRegularDecimalReal(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRegularDecimalReal(this);
		}
	}

	public static class SymbolicNameContext extends ParserRuleContext {
		public SymbolicNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode UnescapedSymbolicName() {
			return getToken(CypherParser.UnescapedSymbolicName, 0);
		}

		public TerminalNode EscapedSymbolicName() {
			return getToken(CypherParser.EscapedSymbolicName, 0);
		}

		public TerminalNode UNION() {
			return getToken(CypherParser.UNION, 0);
		}

		public TerminalNode ALL() {
			return getToken(CypherParser.ALL, 0);
		}

		public TerminalNode OPTIONAL() {
			return getToken(CypherParser.OPTIONAL, 0);
		}

		public TerminalNode MATCH() {
			return getToken(CypherParser.MATCH, 0);
		}

		public TerminalNode UNWIND() {
			return getToken(CypherParser.UNWIND, 0);
		}

		public TerminalNode AS() {
			return getToken(CypherParser.AS, 0);
		}

		public TerminalNode MERGE() {
			return getToken(CypherParser.MERGE, 0);
		}

		public TerminalNode ON() {
			return getToken(CypherParser.ON, 0);
		}

		public TerminalNode CREATE() {
			return getToken(CypherParser.CREATE, 0);
		}

		public TerminalNode SET() {
			return getToken(CypherParser.SET, 0);
		}

		public TerminalNode DELETE() {
			return getToken(CypherParser.DELETE, 0);
		}

		public TerminalNode DETACH() {
			return getToken(CypherParser.DETACH, 0);
		}

		public TerminalNode REMOVE() {
			return getToken(CypherParser.REMOVE, 0);
		}

		public TerminalNode WITH() {
			return getToken(CypherParser.WITH, 0);
		}

		public TerminalNode DISTINCT() {
			return getToken(CypherParser.DISTINCT, 0);
		}

		public TerminalNode RETURN() {
			return getToken(CypherParser.RETURN, 0);
		}

		public TerminalNode ORDER() {
			return getToken(CypherParser.ORDER, 0);
		}

		public TerminalNode BY() {
			return getToken(CypherParser.BY, 0);
		}

		public TerminalNode L_SKIP() {
			return getToken(CypherParser.L_SKIP, 0);
		}

		public TerminalNode LIMIT() {
			return getToken(CypherParser.LIMIT, 0);
		}

		public TerminalNode DESCENDING() {
			return getToken(CypherParser.DESCENDING, 0);
		}

		public TerminalNode DESC() {
			return getToken(CypherParser.DESC, 0);
		}

		public TerminalNode ASCENDING() {
			return getToken(CypherParser.ASCENDING, 0);
		}

		public TerminalNode ASC() {
			return getToken(CypherParser.ASC, 0);
		}

		public TerminalNode WHERE() {
			return getToken(CypherParser.WHERE, 0);
		}

		public TerminalNode OR() {
			return getToken(CypherParser.OR, 0);
		}

		public TerminalNode XOR() {
			return getToken(CypherParser.XOR, 0);
		}

		public TerminalNode AND() {
			return getToken(CypherParser.AND, 0);
		}

		public TerminalNode NOT() {
			return getToken(CypherParser.NOT, 0);
		}

		public TerminalNode IN() {
			return getToken(CypherParser.IN, 0);
		}

		public TerminalNode STARTS() {
			return getToken(CypherParser.STARTS, 0);
		}

		public TerminalNode ENDS() {
			return getToken(CypherParser.ENDS, 0);
		}

		public TerminalNode CONTAINS() {
			return getToken(CypherParser.CONTAINS, 0);
		}

		public TerminalNode IS() {
			return getToken(CypherParser.IS, 0);
		}

		public TerminalNode NULL() {
			return getToken(CypherParser.NULL, 0);
		}

		public TerminalNode TRUE() {
			return getToken(CypherParser.TRUE, 0);
		}

		public TerminalNode FALSE() {
			return getToken(CypherParser.FALSE, 0);
		}

		public TerminalNode COUNT() {
			return getToken(CypherParser.COUNT, 0);
		}

		public TerminalNode FILTER() {
			return getToken(CypherParser.FILTER, 0);
		}

		public TerminalNode EXTRACT() {
			return getToken(CypherParser.EXTRACT, 0);
		}

		public TerminalNode ANY() {
			return getToken(CypherParser.ANY, 0);
		}

		public TerminalNode NONE() {
			return getToken(CypherParser.NONE, 0);
		}

		public TerminalNode SINGLE() {
			return getToken(CypherParser.SINGLE, 0);
		}

		public TerminalNode HexString() {
			return getToken(CypherParser.HexString, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_symbolicName;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSymbolicName(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSymbolicName(this);
		}
	}

	public static class SpContext extends ParserRuleContext {
		public SpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<TerminalNode> WHITESPACE() {
			return getTokens(CypherParser.WHITESPACE);
		}

		public TerminalNode WHITESPACE(int i) {
			return getToken(CypherParser.WHITESPACE, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_sp;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterSp(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitSp(this);
		}
	}

	public static class LeftArrowHeadContext extends ParserRuleContext {
		public LeftArrowHeadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		@Override
		public int getRuleIndex() {
			return RULE_leftArrowHead;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterLeftArrowHead(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitLeftArrowHead(this);
		}
	}

	public static class RightArrowHeadContext extends ParserRuleContext {
		public RightArrowHeadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		@Override
		public int getRuleIndex() {
			return RULE_rightArrowHead;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterRightArrowHead(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitRightArrowHead(this);
		}
	}

	public static class DashContext extends ParserRuleContext {
		public DashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		@Override
		public int getRuleIndex() {
			return RULE_dash;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterDash(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitDash(this);
		}
	}

	public static class DigitContext extends ParserRuleContext {
		public DigitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode Digit() {
			return getToken(CypherParser.Digit, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_digit;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).enterDigit(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof CypherListener) ((CypherListener) listener).exitDigit(this);
		}
	}
}