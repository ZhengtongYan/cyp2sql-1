// general basic queries, domain independent
//MATCH (node) RETURN node;
//MATCH ()-[r]->() RETURN count(r);
//MATCH (a)-[r]->(b)--(c)<-[q]-(a) RETURN count(a);
//MATCH (a)-[*1..2]->(b) RETURN b;
//MATCH (a)-[*1..3]->(b) RETURN b;
//MATCH (a)-[*2..4]->(b) RETURN count(b);

// general basic queries, with small data knowledge included to make query more sensible
//MATCH (node:Programmer:Owner) WHERE node.cars > 1 RETURN node AS BigShot;
//MATCH (node) WHERE node.domain = "co.uk" OR node.domain = "jp" RETURN DISTINCT node.host ORDER BY node.host ASC;
//MATCH (node:Programmer {pets:2}) RETURN DISTINCT node.city SKIP 5 LIMIT 10;
//MATCH (node:Programmer {pets:2}) RETURN node.city ORDER BY node.state DESC LIMIT 50;
//MATCH (a:Programmer:Owner)-->(b:Website)<--(c:Owner)<--(a) RETURN a.surname;
//MATCH (a {pets:2})--(b)--(c:Owner)-->(d) RETURN d;
//MATCH (a:Website {host:"google"})-[*1..3]->(b:Website) RETURN b.host;

// explore scope of translation tool (UNION[ALL], WITH, COLLECT, CASE)
//MATCH (nodeA:Website {domain:"co.in"})-[link:LINKED_TO]->(nodeB:Website) WHERE link.popularity > 80 RETURN nodeB.host UNION MATCH (nodeA:Website {domain:"org"})-[link:LINKED_TO]->(nodeB:Website) WHERE link.popularity > 80 RETURN nodeB.host;
//MATCH (a:Website)-[m:LINKED_TO]->(b:Website {domain:"com"}) WITH a, count(m) AS Link_Count WHERE Link_Count >= 15 RETURN a.host, Link_Count ORDER BY Link_Count DESC;
//MATCH (texas {state:"Texas"}) RETURN collect(texas.city);
//MATCH (o:Programmer {pets:2})-[:CODES_FOR]->()<--(p:Owner {cars:1}) RETURN CASE p.state WHEN 'California' THEN 'CA' WHEN 'New York' THEN 'YA' ELSE 'Other' END;

// more advanced queries
//MATCH (a {domain:"com"})-->(b) RETURN b.host;
//MATCH (a:Website {domain:"com"})-[l:LINKED_TO]->(b:Website) RETURN b.host;
//MATCH (a:Website {domain:"com"})-[l:LINKED_TO]->(b:Website) WHERE l.popularity > 70 RETURN b.host;

//MATCH (a)-->(b)-->(c)<--(d {cars:2}) RETURN DISTINCT d.surname, d.city;
//MATCH (a)-->(b)-->(c)<--(d:Programmer:Owner {cars:2}) RETURN DISTINCT d.surname, d.city;
//MATCH (a:Owner {pets:2})-->(b:Website)-->(c:Website)<--(d:Programmer:Owner {cars:2}) RETURN DISTINCT d.surname, d.city;
//MATCH (a:Owner {pets:2})-[l1:OWNS]->(b:Website)-[l2:LINKED_TO]->(c:Website)<-[l3]-(d:Programmer:Owner {cars:2}) RETURN DISTINCT d.surname, d.city;

//MATCH (a)-->(b)-->(c)-->(a) RETURN count(a);
//MATCH (a)-->(b)-->(c)-->(a)<--(z)--(zz) RETURN count(zz);
//MATCH (a)-->(b)-->(c)-->(a)-->(d)-->(b) RETURN count(b);
//MATCH (a:Programmer)--(b:Owner)--(c)<--(d:Website) RETURN count(d);

//MATCH (a)-->(b)-->(c)-->(d:Programmer {state:"Washington"}) RETURN DISTINCT d.surname ORDER BY d.surname ASC;
//MATCH (a)-->(b)-->(c)-->(d {state:"Washington"}) RETURN DISTINCT d.surname ORDER BY d.surname ASC;

//MATCH (a {domain:"jp"})-[:LINKED_TO]->(b)-[l1:LINKED_TO]->(c)-[l2]->(a)-->(d) WHERE l1.popularity < 45 AND l2.popularity > 80 RETURN d.host AS HostName order by d.host asc;
//MATCH (a)-[:LINKED_TO]->(b)-[l1:LINKED_TO]->(c)-[l2]->(a)-->(d) WHERE l1.popularity < 45 AND l2.popularity > 80 RETURN d.host AS HostName order by d.host asc;
//MATCH (a)-[]->(b)-[l1]->(c)-[l2]->(a)-->(d) WHERE l1.popularity < 45 AND l2.popularity > 80 RETURN d.host AS HostName order by d.host asc;

//MATCH p=shortestPath((f:Website {domain:"com"})-[*1..3]->(t:Website {domain:"co.in"})) RETURN t.host order by t.host asc;
//MATCH p=shortestPath((f:Website {domain:"com"})-[*1..5]->(t:Website {domain:"co.in"})) RETURN t.host order by t.host asc;
//MATCH p=shortestPath((f:Programmer {state:"Florida"})-[*1..5]->(t:Website {host:"amazon"})) RETURN t.domain order by t.domain desc;
//MATCH p=shortestPath((f:Owner {cars:3})-[*1..2]->(t:Website {domain:"co.uk"})) RETURN t.host order by t.host asc;
//MATCH p=shortestPath((f:Owner {cars:3})-[*1..3]->(t:Website {domain:"co.uk"})) RETURN t.host order by t.host asc;
//MATCH p=shortestPath((f:Owner {cars:3})-[*1..1]->(t:Programmer)) RETURN t.state order by t.state asc;
//MATCH p=shortestPath((f)-[*1..2]->(t:Website)) RETURN t.host order by t.host asc;
MATCH p=shortestPath((f:Owner)-[*1..3]->(t:Website)) RETURN t.host order by t.host asc;
